// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.9
// source: Full.proto

package model

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CounteragentStatus int32

const (
	CounteragentStatus_UnknownCounteragentStatus CounteragentStatus = 0
	CounteragentStatus_IsMyCounteragent          CounteragentStatus = 1
	CounteragentStatus_InvitesMe                 CounteragentStatus = 2
	CounteragentStatus_IsInvitedByMe             CounteragentStatus = 3
	CounteragentStatus_RejectsMe                 CounteragentStatus = 5
	CounteragentStatus_IsRejectedByMe            CounteragentStatus = 6
	CounteragentStatus_NotInCounteragentList     CounteragentStatus = 7
)

// Enum value maps for CounteragentStatus.
var (
	CounteragentStatus_name = map[int32]string{
		0: "UnknownCounteragentStatus",
		1: "IsMyCounteragent",
		2: "InvitesMe",
		3: "IsInvitedByMe",
		5: "RejectsMe",
		6: "IsRejectedByMe",
		7: "NotInCounteragentList",
	}
	CounteragentStatus_value = map[string]int32{
		"UnknownCounteragentStatus": 0,
		"IsMyCounteragent":          1,
		"InvitesMe":                 2,
		"IsInvitedByMe":             3,
		"RejectsMe":                 5,
		"IsRejectedByMe":            6,
		"NotInCounteragentList":     7,
	}
)

func (x CounteragentStatus) Enum() *CounteragentStatus {
	p := new(CounteragentStatus)
	*p = x
	return p
}

func (x CounteragentStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CounteragentStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_Full_proto_enumTypes[0].Descriptor()
}

func (CounteragentStatus) Type() protoreflect.EnumType {
	return &file_Full_proto_enumTypes[0]
}

func (x CounteragentStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CounteragentStatus) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CounteragentStatus(num)
	return nil
}

// Deprecated: Use CounteragentStatus.Descriptor instead.
func (CounteragentStatus) EnumDescriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{0}
}

type TotalCountType int32

const (
	TotalCountType_UnknownCountType   TotalCountType = 0
	TotalCountType_Equal              TotalCountType = 1
	TotalCountType_GreaterThanOrEqual TotalCountType = 2
)

// Enum value maps for TotalCountType.
var (
	TotalCountType_name = map[int32]string{
		0: "UnknownCountType",
		1: "Equal",
		2: "GreaterThanOrEqual",
	}
	TotalCountType_value = map[string]int32{
		"UnknownCountType":   0,
		"Equal":              1,
		"GreaterThanOrEqual": 2,
	}
)

func (x TotalCountType) Enum() *TotalCountType {
	p := new(TotalCountType)
	*p = x
	return p
}

func (x TotalCountType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TotalCountType) Descriptor() protoreflect.EnumDescriptor {
	return file_Full_proto_enumTypes[1].Descriptor()
}

func (TotalCountType) Type() protoreflect.EnumType {
	return &file_Full_proto_enumTypes[1]
}

func (x TotalCountType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *TotalCountType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = TotalCountType(num)
	return nil
}

// Deprecated: Use TotalCountType.Descriptor instead.
func (TotalCountType) EnumDescriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{1}
}

type DocumentAccessLevel int32

const (
	DocumentAccessLevel_UnknownDocumentAccessLevel  DocumentAccessLevel = -1
	DocumentAccessLevel_DepartmentOnly              DocumentAccessLevel = 0
	DocumentAccessLevel_DepartmentAndSubdepartments DocumentAccessLevel = 1
	DocumentAccessLevel_AllDocuments                DocumentAccessLevel = 2
	DocumentAccessLevel_SelectedDepartments         DocumentAccessLevel = 3
)

// Enum value maps for DocumentAccessLevel.
var (
	DocumentAccessLevel_name = map[int32]string{
		-1: "UnknownDocumentAccessLevel",
		0:  "DepartmentOnly",
		1:  "DepartmentAndSubdepartments",
		2:  "AllDocuments",
		3:  "SelectedDepartments",
	}
	DocumentAccessLevel_value = map[string]int32{
		"UnknownDocumentAccessLevel":  -1,
		"DepartmentOnly":              0,
		"DepartmentAndSubdepartments": 1,
		"AllDocuments":                2,
		"SelectedDepartments":         3,
	}
)

func (x DocumentAccessLevel) Enum() *DocumentAccessLevel {
	p := new(DocumentAccessLevel)
	*p = x
	return p
}

func (x DocumentAccessLevel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DocumentAccessLevel) Descriptor() protoreflect.EnumDescriptor {
	return file_Full_proto_enumTypes[2].Descriptor()
}

func (DocumentAccessLevel) Type() protoreflect.EnumType {
	return &file_Full_proto_enumTypes[2]
}

func (x DocumentAccessLevel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *DocumentAccessLevel) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = DocumentAccessLevel(num)
	return nil
}

// Deprecated: Use DocumentAccessLevel.Descriptor instead.
func (DocumentAccessLevel) EnumDescriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{2}
}

type CertificateType int32

const (
	CertificateType_Unknown           CertificateType = 0
	CertificateType_Token             CertificateType = 1
	CertificateType_Dss               CertificateType = 2
	CertificateType_KonturCertificate CertificateType = 3
)

// Enum value maps for CertificateType.
var (
	CertificateType_name = map[int32]string{
		0: "Unknown",
		1: "Token",
		2: "Dss",
		3: "KonturCertificate",
	}
	CertificateType_value = map[string]int32{
		"Unknown":           0,
		"Token":             1,
		"Dss":               2,
		"KonturCertificate": 3,
	}
)

func (x CertificateType) Enum() *CertificateType {
	p := new(CertificateType)
	*p = x
	return p
}

func (x CertificateType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CertificateType) Descriptor() protoreflect.EnumDescriptor {
	return file_Full_proto_enumTypes[3].Descriptor()
}

func (CertificateType) Type() protoreflect.EnumType {
	return &file_Full_proto_enumTypes[3]
}

func (x CertificateType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CertificateType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CertificateType(num)
	return nil
}

// Deprecated: Use CertificateType.Descriptor instead.
func (CertificateType) EnumDescriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{3}
}

type CertificateSubjectType int32

const (
	CertificateSubjectType_UnknownCertificateSubjectType CertificateSubjectType = 0
	CertificateSubjectType_LegalEntity                   CertificateSubjectType = 1
	CertificateSubjectType_IndividualEntity              CertificateSubjectType = 2
	CertificateSubjectType_PhysicalPerson                CertificateSubjectType = 3
)

// Enum value maps for CertificateSubjectType.
var (
	CertificateSubjectType_name = map[int32]string{
		0: "UnknownCertificateSubjectType",
		1: "LegalEntity",
		2: "IndividualEntity",
		3: "PhysicalPerson",
	}
	CertificateSubjectType_value = map[string]int32{
		"UnknownCertificateSubjectType": 0,
		"LegalEntity":                   1,
		"IndividualEntity":              2,
		"PhysicalPerson":                3,
	}
)

func (x CertificateSubjectType) Enum() *CertificateSubjectType {
	p := new(CertificateSubjectType)
	*p = x
	return p
}

func (x CertificateSubjectType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CertificateSubjectType) Descriptor() protoreflect.EnumDescriptor {
	return file_Full_proto_enumTypes[4].Descriptor()
}

func (CertificateSubjectType) Type() protoreflect.EnumType {
	return &file_Full_proto_enumTypes[4]
}

func (x CertificateSubjectType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CertificateSubjectType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CertificateSubjectType(num)
	return nil
}

// Deprecated: Use CertificateSubjectType.Descriptor instead.
func (CertificateSubjectType) EnumDescriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{4}
}

type Severity int32

const (
	Severity_UnknownSeverity Severity = 0
	Severity_Info            Severity = 1
	Severity_Success         Severity = 2
	Severity_Warning         Severity = 3
	Severity_Error           Severity = 4
)

// Enum value maps for Severity.
var (
	Severity_name = map[int32]string{
		0: "UnknownSeverity",
		1: "Info",
		2: "Success",
		3: "Warning",
		4: "Error",
	}
	Severity_value = map[string]int32{
		"UnknownSeverity": 0,
		"Info":            1,
		"Success":         2,
		"Warning":         3,
		"Error":           4,
	}
)

func (x Severity) Enum() *Severity {
	p := new(Severity)
	*p = x
	return p
}

func (x Severity) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Severity) Descriptor() protoreflect.EnumDescriptor {
	return file_Full_proto_enumTypes[5].Descriptor()
}

func (Severity) Type() protoreflect.EnumType {
	return &file_Full_proto_enumTypes[5]
}

func (x Severity) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Severity) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Severity(num)
	return nil
}

// Deprecated: Use Severity.Descriptor instead.
func (Severity) EnumDescriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{5}
}

type PowerOfAttorneyValidationStatusNamedId int32

const (
	PowerOfAttorneyValidationStatusNamedId_UnknownStatus     PowerOfAttorneyValidationStatusNamedId = 0
	PowerOfAttorneyValidationStatusNamedId_CanNotBeValidated PowerOfAttorneyValidationStatusNamedId = 1
	PowerOfAttorneyValidationStatusNamedId_IsValid           PowerOfAttorneyValidationStatusNamedId = 2
	PowerOfAttorneyValidationStatusNamedId_IsNotValid        PowerOfAttorneyValidationStatusNamedId = 3
	PowerOfAttorneyValidationStatusNamedId_ValidationError   PowerOfAttorneyValidationStatusNamedId = 4
)

// Enum value maps for PowerOfAttorneyValidationStatusNamedId.
var (
	PowerOfAttorneyValidationStatusNamedId_name = map[int32]string{
		0: "UnknownStatus",
		1: "CanNotBeValidated",
		2: "IsValid",
		3: "IsNotValid",
		4: "ValidationError",
	}
	PowerOfAttorneyValidationStatusNamedId_value = map[string]int32{
		"UnknownStatus":     0,
		"CanNotBeValidated": 1,
		"IsValid":           2,
		"IsNotValid":        3,
		"ValidationError":   4,
	}
)

func (x PowerOfAttorneyValidationStatusNamedId) Enum() *PowerOfAttorneyValidationStatusNamedId {
	p := new(PowerOfAttorneyValidationStatusNamedId)
	*p = x
	return p
}

func (x PowerOfAttorneyValidationStatusNamedId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PowerOfAttorneyValidationStatusNamedId) Descriptor() protoreflect.EnumDescriptor {
	return file_Full_proto_enumTypes[6].Descriptor()
}

func (PowerOfAttorneyValidationStatusNamedId) Type() protoreflect.EnumType {
	return &file_Full_proto_enumTypes[6]
}

func (x PowerOfAttorneyValidationStatusNamedId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *PowerOfAttorneyValidationStatusNamedId) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = PowerOfAttorneyValidationStatusNamedId(num)
	return nil
}

// Deprecated: Use PowerOfAttorneyValidationStatusNamedId.Descriptor instead.
func (PowerOfAttorneyValidationStatusNamedId) EnumDescriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{6}
}

type Sociability int32

const (
	Sociability_AllOrganizations  Sociability = 0
	Sociability_CounteragentsOnly Sociability = 1
)

// Enum value maps for Sociability.
var (
	Sociability_name = map[int32]string{
		0: "AllOrganizations",
		1: "CounteragentsOnly",
	}
	Sociability_value = map[string]int32{
		"AllOrganizations":  0,
		"CounteragentsOnly": 1,
	}
)

func (x Sociability) Enum() *Sociability {
	p := new(Sociability)
	*p = x
	return p
}

func (x Sociability) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Sociability) Descriptor() protoreflect.EnumDescriptor {
	return file_Full_proto_enumTypes[7].Descriptor()
}

func (Sociability) Type() protoreflect.EnumType {
	return &file_Full_proto_enumTypes[7]
}

func (x Sociability) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Sociability) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Sociability(num)
	return nil
}

// Deprecated: Use Sociability.Descriptor instead.
func (Sociability) EnumDescriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{7}
}

type OrganizationInvoiceFormatVersion int32

const (
	OrganizationInvoiceFormatVersion_v5_01 OrganizationInvoiceFormatVersion = 1
	OrganizationInvoiceFormatVersion_v5_02 OrganizationInvoiceFormatVersion = 2
)

// Enum value maps for OrganizationInvoiceFormatVersion.
var (
	OrganizationInvoiceFormatVersion_name = map[int32]string{
		1: "v5_01",
		2: "v5_02",
	}
	OrganizationInvoiceFormatVersion_value = map[string]int32{
		"v5_01": 1,
		"v5_02": 2,
	}
)

func (x OrganizationInvoiceFormatVersion) Enum() *OrganizationInvoiceFormatVersion {
	p := new(OrganizationInvoiceFormatVersion)
	*p = x
	return p
}

func (x OrganizationInvoiceFormatVersion) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OrganizationInvoiceFormatVersion) Descriptor() protoreflect.EnumDescriptor {
	return file_Full_proto_enumTypes[8].Descriptor()
}

func (OrganizationInvoiceFormatVersion) Type() protoreflect.EnumType {
	return &file_Full_proto_enumTypes[8]
}

func (x OrganizationInvoiceFormatVersion) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *OrganizationInvoiceFormatVersion) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = OrganizationInvoiceFormatVersion(num)
	return nil
}

// Deprecated: Use OrganizationInvoiceFormatVersion.Descriptor instead.
func (OrganizationInvoiceFormatVersion) EnumDescriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{8}
}

type LockMode int32

const (
	LockMode_None LockMode = 1
	LockMode_Send LockMode = 2
	LockMode_Full LockMode = 3
)

// Enum value maps for LockMode.
var (
	LockMode_name = map[int32]string{
		1: "None",
		2: "Send",
		3: "Full",
	}
	LockMode_value = map[string]int32{
		"None": 1,
		"Send": 2,
		"Full": 3,
	}
)

func (x LockMode) Enum() *LockMode {
	p := new(LockMode)
	*p = x
	return p
}

func (x LockMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LockMode) Descriptor() protoreflect.EnumDescriptor {
	return file_Full_proto_enumTypes[9].Descriptor()
}

func (LockMode) Type() protoreflect.EnumType {
	return &file_Full_proto_enumTypes[9]
}

func (x LockMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *LockMode) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = LockMode(num)
	return nil
}

// Deprecated: Use LockMode.Descriptor instead.
func (LockMode) EnumDescriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{9}
}

type MessageType int32

const (
	MessageType_UnknownMT  MessageType = 0
	MessageType_LetterMT   MessageType = 1
	MessageType_DraftMT    MessageType = 2
	MessageType_TemplateMT MessageType = 3
)

// Enum value maps for MessageType.
var (
	MessageType_name = map[int32]string{
		0: "UnknownMT",
		1: "LetterMT",
		2: "DraftMT",
		3: "TemplateMT",
	}
	MessageType_value = map[string]int32{
		"UnknownMT":  0,
		"LetterMT":   1,
		"DraftMT":    2,
		"TemplateMT": 3,
	}
)

func (x MessageType) Enum() *MessageType {
	p := new(MessageType)
	*p = x
	return p
}

func (x MessageType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MessageType) Descriptor() protoreflect.EnumDescriptor {
	return file_Full_proto_enumTypes[10].Descriptor()
}

func (MessageType) Type() protoreflect.EnumType {
	return &file_Full_proto_enumTypes[10]
}

func (x MessageType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *MessageType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = MessageType(num)
	return nil
}

// Deprecated: Use MessageType.Descriptor instead.
func (MessageType) EnumDescriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{10}
}

type EntityType int32

const (
	EntityType_TypeUnknownEntity EntityType = 0 // Reserved type to report to legacy clients for newly introduced entity types
	EntityType_TypeAttachment    EntityType = 1
	EntityType_TypeSignature     EntityType = 2
)

// Enum value maps for EntityType.
var (
	EntityType_name = map[int32]string{
		0: "TypeUnknownEntity",
		1: "TypeAttachment",
		2: "TypeSignature",
	}
	EntityType_value = map[string]int32{
		"TypeUnknownEntity": 0,
		"TypeAttachment":    1,
		"TypeSignature":     2,
	}
)

func (x EntityType) Enum() *EntityType {
	p := new(EntityType)
	*p = x
	return p
}

func (x EntityType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EntityType) Descriptor() protoreflect.EnumDescriptor {
	return file_Full_proto_enumTypes[11].Descriptor()
}

func (EntityType) Type() protoreflect.EnumType {
	return &file_Full_proto_enumTypes[11]
}

func (x EntityType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EntityType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EntityType(num)
	return nil
}

// Deprecated: Use EntityType.Descriptor instead.
func (EntityType) EnumDescriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{11}
}

type AttachmentType int32

const (
	AttachmentType_UnknownAttachmentType                     AttachmentType = -1 // Reserved attachment type to report to legacy clients for newly introduced attachment types
	AttachmentType_NonformalizedType                         AttachmentType = 0
	AttachmentType_InvoiceType                               AttachmentType = 1
	AttachmentType_InvoiceReceiptType                        AttachmentType = 2
	AttachmentType_InvoiceConfirmationType                   AttachmentType = 3
	AttachmentType_InvoiceCorrectionRequestType              AttachmentType = 4
	AttachmentType_AttachmentCommentType                     AttachmentType = 5
	AttachmentType_DeliveryFailureNotificationType           AttachmentType = 6
	AttachmentType_SignatureRequestRejectionType             AttachmentType = 8
	AttachmentType_SignatureVerificationReportType           AttachmentType = 10
	AttachmentType_TrustConnectionRequestType                AttachmentType = 11
	AttachmentType_Torg12Type                                AttachmentType = 12
	AttachmentType_InvoiceRevisionType                       AttachmentType = 13
	AttachmentType_InvoiceCorrectionType                     AttachmentType = 14
	AttachmentType_InvoiceCorrectionRevisionType             AttachmentType = 15
	AttachmentType_AcceptanceCertificateType                 AttachmentType = 16
	AttachmentType_StructuredDataType                        AttachmentType = 17
	AttachmentType_ProformaInvoiceType                       AttachmentType = 18
	AttachmentType_XmlTorg12Type                             AttachmentType = 19
	AttachmentType_XmlAcceptanceCertificateType              AttachmentType = 20
	AttachmentType_XmlTorg12BuyerTitleType                   AttachmentType = 21
	AttachmentType_XmlAcceptanceCertificateBuyerTitleType    AttachmentType = 22
	AttachmentType_Resolution                                AttachmentType = 23
	AttachmentType_ResolutionRequest                         AttachmentType = 24
	AttachmentType_ResolutionRequestDenialType               AttachmentType = 25
	AttachmentType_PriceListType                             AttachmentType = 26
	AttachmentType_ReceiptType                               AttachmentType = 27
	AttachmentType_XmlSignatureRejectionType                 AttachmentType = 28
	AttachmentType_RevocationRequestType                     AttachmentType = 29
	AttachmentType_PriceListAgreementType                    AttachmentType = 30
	AttachmentType_CertificateRegistryType                   AttachmentType = 34
	AttachmentType_ReconciliationActType                     AttachmentType = 35
	AttachmentType_ContractType                              AttachmentType = 36
	AttachmentType_Torg13Type                                AttachmentType = 37
	AttachmentType_ServiceDetailsType                        AttachmentType = 38
	AttachmentType_RoamingNotificationType                   AttachmentType = 39
	AttachmentType_SupplementaryAgreementType                AttachmentType = 40
	AttachmentType_UniversalTransferDocumentType             AttachmentType = 41
	AttachmentType_UniversalTransferDocumentBuyerTitleType   AttachmentType = 42
	AttachmentType_UniversalTransferDocumentRevisionType     AttachmentType = 45
	AttachmentType_UniversalCorrectionDocumentType           AttachmentType = 49
	AttachmentType_UniversalCorrectionDocumentRevisionType   AttachmentType = 50
	AttachmentType_UniversalCorrectionDocumentBuyerTitleType AttachmentType = 51
	AttachmentType_CustomDataType                            AttachmentType = 64
	AttachmentType_MoveDocumentType                          AttachmentType = 65
	AttachmentType_ResolutionRouteAssignmentType             AttachmentType = 66
	AttachmentType_ResolutionRouteRemovalType                AttachmentType = 67
	AttachmentType_TitleType                                 AttachmentType = 68
	AttachmentType_CancellationType                          AttachmentType = 69
	AttachmentType_EditionType                               AttachmentType = 71
	AttachmentType_DeletionRestorationType                   AttachmentType = 72
	AttachmentType_TemplateTransformationType                AttachmentType = 73
	AttachmentType_TemplateRefusal                           AttachmentType = 74
	AttachmentType_OuterDocflowType                          AttachmentType = 75
	AttachmentType_RoamingConfirmationType                   AttachmentType = 76
	AttachmentType_PowerOfAttorneyType                       AttachmentType = 77
	AttachmentType_PowerOfAttorneyStatusType                 AttachmentType = 78 // Неизвестные типы должны обрабатываться как Nonformalized
)

// Enum value maps for AttachmentType.
var (
	AttachmentType_name = map[int32]string{
		-1: "UnknownAttachmentType",
		0:  "NonformalizedType",
		1:  "InvoiceType",
		2:  "InvoiceReceiptType",
		3:  "InvoiceConfirmationType",
		4:  "InvoiceCorrectionRequestType",
		5:  "AttachmentCommentType",
		6:  "DeliveryFailureNotificationType",
		8:  "SignatureRequestRejectionType",
		10: "SignatureVerificationReportType",
		11: "TrustConnectionRequestType",
		12: "Torg12Type",
		13: "InvoiceRevisionType",
		14: "InvoiceCorrectionType",
		15: "InvoiceCorrectionRevisionType",
		16: "AcceptanceCertificateType",
		17: "StructuredDataType",
		18: "ProformaInvoiceType",
		19: "XmlTorg12Type",
		20: "XmlAcceptanceCertificateType",
		21: "XmlTorg12BuyerTitleType",
		22: "XmlAcceptanceCertificateBuyerTitleType",
		23: "Resolution",
		24: "ResolutionRequest",
		25: "ResolutionRequestDenialType",
		26: "PriceListType",
		27: "ReceiptType",
		28: "XmlSignatureRejectionType",
		29: "RevocationRequestType",
		30: "PriceListAgreementType",
		34: "CertificateRegistryType",
		35: "ReconciliationActType",
		36: "ContractType",
		37: "Torg13Type",
		38: "ServiceDetailsType",
		39: "RoamingNotificationType",
		40: "SupplementaryAgreementType",
		41: "UniversalTransferDocumentType",
		42: "UniversalTransferDocumentBuyerTitleType",
		45: "UniversalTransferDocumentRevisionType",
		49: "UniversalCorrectionDocumentType",
		50: "UniversalCorrectionDocumentRevisionType",
		51: "UniversalCorrectionDocumentBuyerTitleType",
		64: "CustomDataType",
		65: "MoveDocumentType",
		66: "ResolutionRouteAssignmentType",
		67: "ResolutionRouteRemovalType",
		68: "TitleType",
		69: "CancellationType",
		71: "EditionType",
		72: "DeletionRestorationType",
		73: "TemplateTransformationType",
		74: "TemplateRefusal",
		75: "OuterDocflowType",
		76: "RoamingConfirmationType",
		77: "PowerOfAttorneyType",
		78: "PowerOfAttorneyStatusType",
	}
	AttachmentType_value = map[string]int32{
		"UnknownAttachmentType":                     -1,
		"NonformalizedType":                         0,
		"InvoiceType":                               1,
		"InvoiceReceiptType":                        2,
		"InvoiceConfirmationType":                   3,
		"InvoiceCorrectionRequestType":              4,
		"AttachmentCommentType":                     5,
		"DeliveryFailureNotificationType":           6,
		"SignatureRequestRejectionType":             8,
		"SignatureVerificationReportType":           10,
		"TrustConnectionRequestType":                11,
		"Torg12Type":                                12,
		"InvoiceRevisionType":                       13,
		"InvoiceCorrectionType":                     14,
		"InvoiceCorrectionRevisionType":             15,
		"AcceptanceCertificateType":                 16,
		"StructuredDataType":                        17,
		"ProformaInvoiceType":                       18,
		"XmlTorg12Type":                             19,
		"XmlAcceptanceCertificateType":              20,
		"XmlTorg12BuyerTitleType":                   21,
		"XmlAcceptanceCertificateBuyerTitleType":    22,
		"Resolution":                                23,
		"ResolutionRequest":                         24,
		"ResolutionRequestDenialType":               25,
		"PriceListType":                             26,
		"ReceiptType":                               27,
		"XmlSignatureRejectionType":                 28,
		"RevocationRequestType":                     29,
		"PriceListAgreementType":                    30,
		"CertificateRegistryType":                   34,
		"ReconciliationActType":                     35,
		"ContractType":                              36,
		"Torg13Type":                                37,
		"ServiceDetailsType":                        38,
		"RoamingNotificationType":                   39,
		"SupplementaryAgreementType":                40,
		"UniversalTransferDocumentType":             41,
		"UniversalTransferDocumentBuyerTitleType":   42,
		"UniversalTransferDocumentRevisionType":     45,
		"UniversalCorrectionDocumentType":           49,
		"UniversalCorrectionDocumentRevisionType":   50,
		"UniversalCorrectionDocumentBuyerTitleType": 51,
		"CustomDataType":                            64,
		"MoveDocumentType":                          65,
		"ResolutionRouteAssignmentType":             66,
		"ResolutionRouteRemovalType":                67,
		"TitleType":                                 68,
		"CancellationType":                          69,
		"EditionType":                               71,
		"DeletionRestorationType":                   72,
		"TemplateTransformationType":                73,
		"TemplateRefusal":                           74,
		"OuterDocflowType":                          75,
		"RoamingConfirmationType":                   76,
		"PowerOfAttorneyType":                       77,
		"PowerOfAttorneyStatusType":                 78,
	}
)

func (x AttachmentType) Enum() *AttachmentType {
	p := new(AttachmentType)
	*p = x
	return p
}

func (x AttachmentType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AttachmentType) Descriptor() protoreflect.EnumDescriptor {
	return file_Full_proto_enumTypes[12].Descriptor()
}

func (AttachmentType) Type() protoreflect.EnumType {
	return &file_Full_proto_enumTypes[12]
}

func (x AttachmentType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *AttachmentType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = AttachmentType(num)
	return nil
}

// Deprecated: Use AttachmentType.Descriptor instead.
func (AttachmentType) EnumDescriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{12}
}

type RoamingNotificationStatus int32

const (
	RoamingNotificationStatus_UnknownRoamingNotificationStatus RoamingNotificationStatus = 0 // Reserved status to report to legacy clients for newly introduced statuses
	RoamingNotificationStatus_NotificationStatusNone           RoamingNotificationStatus = 1
	RoamingNotificationStatus_NotificationStatusSuccess        RoamingNotificationStatus = 2
	RoamingNotificationStatus_NotificationStatusError          RoamingNotificationStatus = 3
)

// Enum value maps for RoamingNotificationStatus.
var (
	RoamingNotificationStatus_name = map[int32]string{
		0: "UnknownRoamingNotificationStatus",
		1: "NotificationStatusNone",
		2: "NotificationStatusSuccess",
		3: "NotificationStatusError",
	}
	RoamingNotificationStatus_value = map[string]int32{
		"UnknownRoamingNotificationStatus": 0,
		"NotificationStatusNone":           1,
		"NotificationStatusSuccess":        2,
		"NotificationStatusError":          3,
	}
)

func (x RoamingNotificationStatus) Enum() *RoamingNotificationStatus {
	p := new(RoamingNotificationStatus)
	*p = x
	return p
}

func (x RoamingNotificationStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RoamingNotificationStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_Full_proto_enumTypes[13].Descriptor()
}

func (RoamingNotificationStatus) Type() protoreflect.EnumType {
	return &file_Full_proto_enumTypes[13]
}

func (x RoamingNotificationStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *RoamingNotificationStatus) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = RoamingNotificationStatus(num)
	return nil
}

// Deprecated: Use RoamingNotificationStatus.Descriptor instead.
func (RoamingNotificationStatus) EnumDescriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{13}
}

type ResolutionType int32

const (
	ResolutionType_UndefinedResolutionType ResolutionType = 0
	ResolutionType_Approve                 ResolutionType = 1
	ResolutionType_Disapprove              ResolutionType = 2
	ResolutionType_UnknownResolutionType   ResolutionType = 3
)

// Enum value maps for ResolutionType.
var (
	ResolutionType_name = map[int32]string{
		0: "UndefinedResolutionType",
		1: "Approve",
		2: "Disapprove",
		3: "UnknownResolutionType",
	}
	ResolutionType_value = map[string]int32{
		"UndefinedResolutionType": 0,
		"Approve":                 1,
		"Disapprove":              2,
		"UnknownResolutionType":   3,
	}
)

func (x ResolutionType) Enum() *ResolutionType {
	p := new(ResolutionType)
	*p = x
	return p
}

func (x ResolutionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ResolutionType) Descriptor() protoreflect.EnumDescriptor {
	return file_Full_proto_enumTypes[14].Descriptor()
}

func (ResolutionType) Type() protoreflect.EnumType {
	return &file_Full_proto_enumTypes[14]
}

func (x ResolutionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ResolutionType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ResolutionType(num)
	return nil
}

// Deprecated: Use ResolutionType.Descriptor instead.
func (ResolutionType) EnumDescriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{14}
}

type ResolutionRequestType int32

const (
	ResolutionRequestType_UnknownResolutionRequestType ResolutionRequestType = -1
	ResolutionRequestType_ApprovementRequest           ResolutionRequestType = 0
	ResolutionRequestType_SignatureRequest             ResolutionRequestType = 1
	ResolutionRequestType_ApprovementSignatureRequest  ResolutionRequestType = 2
	ResolutionRequestType_Custom                       ResolutionRequestType = 3
)

// Enum value maps for ResolutionRequestType.
var (
	ResolutionRequestType_name = map[int32]string{
		-1: "UnknownResolutionRequestType",
		0:  "ApprovementRequest",
		1:  "SignatureRequest",
		2:  "ApprovementSignatureRequest",
		3:  "Custom",
	}
	ResolutionRequestType_value = map[string]int32{
		"UnknownResolutionRequestType": -1,
		"ApprovementRequest":           0,
		"SignatureRequest":             1,
		"ApprovementSignatureRequest":  2,
		"Custom":                       3,
	}
)

func (x ResolutionRequestType) Enum() *ResolutionRequestType {
	p := new(ResolutionRequestType)
	*p = x
	return p
}

func (x ResolutionRequestType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ResolutionRequestType) Descriptor() protoreflect.EnumDescriptor {
	return file_Full_proto_enumTypes[15].Descriptor()
}

func (ResolutionRequestType) Type() protoreflect.EnumType {
	return &file_Full_proto_enumTypes[15]
}

func (x ResolutionRequestType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ResolutionRequestType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ResolutionRequestType(num)
	return nil
}

// Deprecated: Use ResolutionRequestType.Descriptor instead.
func (ResolutionRequestType) EnumDescriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{15}
}

type ResolutionAction int32

const (
	ResolutionAction_UnknownAction                ResolutionAction = 0
	ResolutionAction_ApproveAction                ResolutionAction = 1
	ResolutionAction_DisapproveAction             ResolutionAction = 2
	ResolutionAction_SignWithApprovementSignature ResolutionAction = 3
	ResolutionAction_SignWithPrimarySignature     ResolutionAction = 4
	ResolutionAction_DenySignatureRequest         ResolutionAction = 5
	ResolutionAction_RejectSigning                ResolutionAction = 6
)

// Enum value maps for ResolutionAction.
var (
	ResolutionAction_name = map[int32]string{
		0: "UnknownAction",
		1: "ApproveAction",
		2: "DisapproveAction",
		3: "SignWithApprovementSignature",
		4: "SignWithPrimarySignature",
		5: "DenySignatureRequest",
		6: "RejectSigning",
	}
	ResolutionAction_value = map[string]int32{
		"UnknownAction":                0,
		"ApproveAction":                1,
		"DisapproveAction":             2,
		"SignWithApprovementSignature": 3,
		"SignWithPrimarySignature":     4,
		"DenySignatureRequest":         5,
		"RejectSigning":                6,
	}
)

func (x ResolutionAction) Enum() *ResolutionAction {
	p := new(ResolutionAction)
	*p = x
	return p
}

func (x ResolutionAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ResolutionAction) Descriptor() protoreflect.EnumDescriptor {
	return file_Full_proto_enumTypes[16].Descriptor()
}

func (ResolutionAction) Type() protoreflect.EnumType {
	return &file_Full_proto_enumTypes[16]
}

func (x ResolutionAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ResolutionAction) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ResolutionAction(num)
	return nil
}

// Deprecated: Use ResolutionAction.Descriptor instead.
func (ResolutionAction) EnumDescriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{16}
}

type TemplateRefusalType int32

const (
	TemplateRefusalType_UnknownTemplateRefusalType TemplateRefusalType = 0
	TemplateRefusalType_Refusal                    TemplateRefusalType = 1
	TemplateRefusalType_Withdrawal                 TemplateRefusalType = 2
)

// Enum value maps for TemplateRefusalType.
var (
	TemplateRefusalType_name = map[int32]string{
		0: "UnknownTemplateRefusalType",
		1: "Refusal",
		2: "Withdrawal",
	}
	TemplateRefusalType_value = map[string]int32{
		"UnknownTemplateRefusalType": 0,
		"Refusal":                    1,
		"Withdrawal":                 2,
	}
)

func (x TemplateRefusalType) Enum() *TemplateRefusalType {
	p := new(TemplateRefusalType)
	*p = x
	return p
}

func (x TemplateRefusalType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TemplateRefusalType) Descriptor() protoreflect.EnumDescriptor {
	return file_Full_proto_enumTypes[17].Descriptor()
}

func (TemplateRefusalType) Type() protoreflect.EnumType {
	return &file_Full_proto_enumTypes[17]
}

func (x TemplateRefusalType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *TemplateRefusalType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = TemplateRefusalType(num)
	return nil
}

// Deprecated: Use TemplateRefusalType.Descriptor instead.
func (TemplateRefusalType) EnumDescriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{17}
}

type OuterStatusType int32

const (
	OuterStatusType_UnknownStatusType OuterStatusType = 0
	OuterStatusType_NormalType        OuterStatusType = 1
	OuterStatusType_SuccessType       OuterStatusType = 2
	OuterStatusType_WarningType       OuterStatusType = 3
	OuterStatusType_ErrorType         OuterStatusType = 4
)

// Enum value maps for OuterStatusType.
var (
	OuterStatusType_name = map[int32]string{
		0: "UnknownStatusType",
		1: "NormalType",
		2: "SuccessType",
		3: "WarningType",
		4: "ErrorType",
	}
	OuterStatusType_value = map[string]int32{
		"UnknownStatusType": 0,
		"NormalType":        1,
		"SuccessType":       2,
		"WarningType":       3,
		"ErrorType":         4,
	}
)

func (x OuterStatusType) Enum() *OuterStatusType {
	p := new(OuterStatusType)
	*p = x
	return p
}

func (x OuterStatusType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OuterStatusType) Descriptor() protoreflect.EnumDescriptor {
	return file_Full_proto_enumTypes[18].Descriptor()
}

func (OuterStatusType) Type() protoreflect.EnumType {
	return &file_Full_proto_enumTypes[18]
}

func (x OuterStatusType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *OuterStatusType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = OuterStatusType(num)
	return nil
}

// Deprecated: Use OuterStatusType.Descriptor instead.
func (OuterStatusType) EnumDescriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{18}
}

type DocumentType int32

const (
	DocumentType_UnknownDocumentTypeDT                 DocumentType = -1
	DocumentType_NonformalizedDT                       DocumentType = 0
	DocumentType_InvoiceDT                             DocumentType = 1
	DocumentType_TrustConnectionRequestDT              DocumentType = 11
	DocumentType_Torg12DT                              DocumentType = 12
	DocumentType_InvoiceRevisionDT                     DocumentType = 13
	DocumentType_InvoiceCorrectionDT                   DocumentType = 14
	DocumentType_InvoiceCorrectionRevisionDT           DocumentType = 15
	DocumentType_AcceptanceCertificateDT               DocumentType = 16
	DocumentType_ProformaInvoiceDT                     DocumentType = 18
	DocumentType_XmlTorg12DT                           DocumentType = 19
	DocumentType_XmlAcceptanceCertificateDT            DocumentType = 20
	DocumentType_PriceListDT                           DocumentType = 26
	DocumentType_PriceListAgreementDT                  DocumentType = 30
	DocumentType_CertificateRegistryDT                 DocumentType = 34
	DocumentType_ReconciliationActDT                   DocumentType = 35
	DocumentType_ContractDT                            DocumentType = 36
	DocumentType_Torg13DT                              DocumentType = 37
	DocumentType_ServiceDetailsDT                      DocumentType = 38
	DocumentType_SupplementaryAgreementDT              DocumentType = 40
	DocumentType_UniversalTransferDocumentDT           DocumentType = 41
	DocumentType_UniversalTransferDocumentRevisionDT   DocumentType = 45
	DocumentType_UniversalCorrectionDocumentDT         DocumentType = 49
	DocumentType_UniversalCorrectionDocumentRevisionDT DocumentType = 50
)

// Enum value maps for DocumentType.
var (
	DocumentType_name = map[int32]string{
		-1: "UnknownDocumentTypeDT",
		0:  "NonformalizedDT",
		1:  "InvoiceDT",
		11: "TrustConnectionRequestDT",
		12: "Torg12DT",
		13: "InvoiceRevisionDT",
		14: "InvoiceCorrectionDT",
		15: "InvoiceCorrectionRevisionDT",
		16: "AcceptanceCertificateDT",
		18: "ProformaInvoiceDT",
		19: "XmlTorg12DT",
		20: "XmlAcceptanceCertificateDT",
		26: "PriceListDT",
		30: "PriceListAgreementDT",
		34: "CertificateRegistryDT",
		35: "ReconciliationActDT",
		36: "ContractDT",
		37: "Torg13DT",
		38: "ServiceDetailsDT",
		40: "SupplementaryAgreementDT",
		41: "UniversalTransferDocumentDT",
		45: "UniversalTransferDocumentRevisionDT",
		49: "UniversalCorrectionDocumentDT",
		50: "UniversalCorrectionDocumentRevisionDT",
	}
	DocumentType_value = map[string]int32{
		"UnknownDocumentTypeDT":                 -1,
		"NonformalizedDT":                       0,
		"InvoiceDT":                             1,
		"TrustConnectionRequestDT":              11,
		"Torg12DT":                              12,
		"InvoiceRevisionDT":                     13,
		"InvoiceCorrectionDT":                   14,
		"InvoiceCorrectionRevisionDT":           15,
		"AcceptanceCertificateDT":               16,
		"ProformaInvoiceDT":                     18,
		"XmlTorg12DT":                           19,
		"XmlAcceptanceCertificateDT":            20,
		"PriceListDT":                           26,
		"PriceListAgreementDT":                  30,
		"CertificateRegistryDT":                 34,
		"ReconciliationActDT":                   35,
		"ContractDT":                            36,
		"Torg13DT":                              37,
		"ServiceDetailsDT":                      38,
		"SupplementaryAgreementDT":              40,
		"UniversalTransferDocumentDT":           41,
		"UniversalTransferDocumentRevisionDT":   45,
		"UniversalCorrectionDocumentDT":         49,
		"UniversalCorrectionDocumentRevisionDT": 50,
	}
)

func (x DocumentType) Enum() *DocumentType {
	p := new(DocumentType)
	*p = x
	return p
}

func (x DocumentType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DocumentType) Descriptor() protoreflect.EnumDescriptor {
	return file_Full_proto_enumTypes[19].Descriptor()
}

func (DocumentType) Type() protoreflect.EnumType {
	return &file_Full_proto_enumTypes[19]
}

func (x DocumentType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *DocumentType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = DocumentType(num)
	return nil
}

// Deprecated: Use DocumentType.Descriptor instead.
func (DocumentType) EnumDescriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{19}
}

type NonformalizedDocumentStatus int32

const (
	NonformalizedDocumentStatus_UnknownNonformalizedDocumentStatus                      NonformalizedDocumentStatus = 0
	NonformalizedDocumentStatus_OutboundNoRecipientSignatureRequestDocumentStatus       NonformalizedDocumentStatus = 1
	NonformalizedDocumentStatus_OutboundWaitingForRecipientSignatureDocumentStatus      NonformalizedDocumentStatus = 2
	NonformalizedDocumentStatus_OutboundWithRecipientSignatureDocumentStatus            NonformalizedDocumentStatus = 3
	NonformalizedDocumentStatus_OutboundRecipientSignatureRequestRejectedDocumentStatus NonformalizedDocumentStatus = 4
	NonformalizedDocumentStatus_OutboundWaitingForSenderSignatureDocumentStatus         NonformalizedDocumentStatus = 13
	NonformalizedDocumentStatus_OutboundInvalidSenderSignatureDocumentStatus            NonformalizedDocumentStatus = 14
	NonformalizedDocumentStatus_InboundNoRecipientSignatureRequestDocumentStatus        NonformalizedDocumentStatus = 5
	NonformalizedDocumentStatus_InboundWaitingForRecipientSignatureDocumentStatus       NonformalizedDocumentStatus = 6
	NonformalizedDocumentStatus_InboundWithRecipientSignatureDocumentStatus             NonformalizedDocumentStatus = 7
	NonformalizedDocumentStatus_InboundRecipientSignatureRequestRejectedDocumentStatus  NonformalizedDocumentStatus = 8
	NonformalizedDocumentStatus_InboundInvalidRecipientSignatureDocumentStatus          NonformalizedDocumentStatus = 15
	NonformalizedDocumentStatus_InternalNoRecipientSignatureRequestDocumentStatus       NonformalizedDocumentStatus = 9
	NonformalizedDocumentStatus_InternalWaitingForRecipientSignatureDocumentStatus      NonformalizedDocumentStatus = 10
	NonformalizedDocumentStatus_InternalWithRecipientSignatureDocumentStatus            NonformalizedDocumentStatus = 11
	NonformalizedDocumentStatus_InternalRecipientSignatureRequestRejectedDocumentStatus NonformalizedDocumentStatus = 12
	NonformalizedDocumentStatus_InternalWaitingForSenderSignatureDocumentStatus         NonformalizedDocumentStatus = 16
	NonformalizedDocumentStatus_InternalInvalidSenderSignatureDocumentStatus            NonformalizedDocumentStatus = 17
	NonformalizedDocumentStatus_InternalInvalidRecipientSignatureDocumentStatus         NonformalizedDocumentStatus = 18
)

// Enum value maps for NonformalizedDocumentStatus.
var (
	NonformalizedDocumentStatus_name = map[int32]string{
		0:  "UnknownNonformalizedDocumentStatus",
		1:  "OutboundNoRecipientSignatureRequestDocumentStatus",
		2:  "OutboundWaitingForRecipientSignatureDocumentStatus",
		3:  "OutboundWithRecipientSignatureDocumentStatus",
		4:  "OutboundRecipientSignatureRequestRejectedDocumentStatus",
		13: "OutboundWaitingForSenderSignatureDocumentStatus",
		14: "OutboundInvalidSenderSignatureDocumentStatus",
		5:  "InboundNoRecipientSignatureRequestDocumentStatus",
		6:  "InboundWaitingForRecipientSignatureDocumentStatus",
		7:  "InboundWithRecipientSignatureDocumentStatus",
		8:  "InboundRecipientSignatureRequestRejectedDocumentStatus",
		15: "InboundInvalidRecipientSignatureDocumentStatus",
		9:  "InternalNoRecipientSignatureRequestDocumentStatus",
		10: "InternalWaitingForRecipientSignatureDocumentStatus",
		11: "InternalWithRecipientSignatureDocumentStatus",
		12: "InternalRecipientSignatureRequestRejectedDocumentStatus",
		16: "InternalWaitingForSenderSignatureDocumentStatus",
		17: "InternalInvalidSenderSignatureDocumentStatus",
		18: "InternalInvalidRecipientSignatureDocumentStatus",
	}
	NonformalizedDocumentStatus_value = map[string]int32{
		"UnknownNonformalizedDocumentStatus":                      0,
		"OutboundNoRecipientSignatureRequestDocumentStatus":       1,
		"OutboundWaitingForRecipientSignatureDocumentStatus":      2,
		"OutboundWithRecipientSignatureDocumentStatus":            3,
		"OutboundRecipientSignatureRequestRejectedDocumentStatus": 4,
		"OutboundWaitingForSenderSignatureDocumentStatus":         13,
		"OutboundInvalidSenderSignatureDocumentStatus":            14,
		"InboundNoRecipientSignatureRequestDocumentStatus":        5,
		"InboundWaitingForRecipientSignatureDocumentStatus":       6,
		"InboundWithRecipientSignatureDocumentStatus":             7,
		"InboundRecipientSignatureRequestRejectedDocumentStatus":  8,
		"InboundInvalidRecipientSignatureDocumentStatus":          15,
		"InternalNoRecipientSignatureRequestDocumentStatus":       9,
		"InternalWaitingForRecipientSignatureDocumentStatus":      10,
		"InternalWithRecipientSignatureDocumentStatus":            11,
		"InternalRecipientSignatureRequestRejectedDocumentStatus": 12,
		"InternalWaitingForSenderSignatureDocumentStatus":         16,
		"InternalInvalidSenderSignatureDocumentStatus":            17,
		"InternalInvalidRecipientSignatureDocumentStatus":         18,
	}
)

func (x NonformalizedDocumentStatus) Enum() *NonformalizedDocumentStatus {
	p := new(NonformalizedDocumentStatus)
	*p = x
	return p
}

func (x NonformalizedDocumentStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NonformalizedDocumentStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_Full_proto_enumTypes[20].Descriptor()
}

func (NonformalizedDocumentStatus) Type() protoreflect.EnumType {
	return &file_Full_proto_enumTypes[20]
}

func (x NonformalizedDocumentStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *NonformalizedDocumentStatus) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = NonformalizedDocumentStatus(num)
	return nil
}

// Deprecated: Use NonformalizedDocumentStatus.Descriptor instead.
func (NonformalizedDocumentStatus) EnumDescriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{20}
}

type InvoiceStatus int32

const (
	InvoiceStatus_UnknownInvoiceStatus              InvoiceStatus = 0
	InvoiceStatus_OutboundWaitingForInvoiceReceipt  InvoiceStatus = 1
	InvoiceStatus_OutboundNotFinished               InvoiceStatus = 2
	InvoiceStatus_OutboundFinished                  InvoiceStatus = 3
	InvoiceStatus_OutboundWaitingForSenderSignature InvoiceStatus = 6
	InvoiceStatus_OutboundInvalidSenderSignature    InvoiceStatus = 7
	InvoiceStatus_InboundNotFinished                InvoiceStatus = 4
	InvoiceStatus_InboundFinished                   InvoiceStatus = 5
)

// Enum value maps for InvoiceStatus.
var (
	InvoiceStatus_name = map[int32]string{
		0: "UnknownInvoiceStatus",
		1: "OutboundWaitingForInvoiceReceipt",
		2: "OutboundNotFinished",
		3: "OutboundFinished",
		6: "OutboundWaitingForSenderSignature",
		7: "OutboundInvalidSenderSignature",
		4: "InboundNotFinished",
		5: "InboundFinished",
	}
	InvoiceStatus_value = map[string]int32{
		"UnknownInvoiceStatus":              0,
		"OutboundWaitingForInvoiceReceipt":  1,
		"OutboundNotFinished":               2,
		"OutboundFinished":                  3,
		"OutboundWaitingForSenderSignature": 6,
		"OutboundInvalidSenderSignature":    7,
		"InboundNotFinished":                4,
		"InboundFinished":                   5,
	}
)

func (x InvoiceStatus) Enum() *InvoiceStatus {
	p := new(InvoiceStatus)
	*p = x
	return p
}

func (x InvoiceStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InvoiceStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_Full_proto_enumTypes[21].Descriptor()
}

func (InvoiceStatus) Type() protoreflect.EnumType {
	return &file_Full_proto_enumTypes[21]
}

func (x InvoiceStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *InvoiceStatus) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = InvoiceStatus(num)
	return nil
}

// Deprecated: Use InvoiceStatus.Descriptor instead.
func (InvoiceStatus) EnumDescriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{21}
}

type BilateralDocumentStatus int32

const (
	BilateralDocumentStatus_UnknownBilateralDocumentStatusBilateralDocumentStatus            BilateralDocumentStatus = 0
	BilateralDocumentStatus_OutboundWaitingForRecipientSignatureBilateralDocumentStatus      BilateralDocumentStatus = 1
	BilateralDocumentStatus_OutboundWithRecipientSignatureBilateralDocumentStatus            BilateralDocumentStatus = 2
	BilateralDocumentStatus_OutboundRecipientSignatureRequestRejectedBilateralDocumentStatus BilateralDocumentStatus = 3
	BilateralDocumentStatus_OutboundWaitingForSenderSignatureBilateralDocumentStatus         BilateralDocumentStatus = 10
	BilateralDocumentStatus_OutboundInvalidSenderSignatureBilateralDocumentStatus            BilateralDocumentStatus = 11
	BilateralDocumentStatus_InboundWaitingForRecipientSignatureBilateralDocumentStatus       BilateralDocumentStatus = 4
	BilateralDocumentStatus_InboundWithRecipientSignatureBilateralDocumentStatus             BilateralDocumentStatus = 5
	BilateralDocumentStatus_InboundRecipientSignatureRequestRejectedBilateralDocumentStatus  BilateralDocumentStatus = 6
	BilateralDocumentStatus_InboundInvalidRecipientSignatureBilateralDocumentStatus          BilateralDocumentStatus = 12
	BilateralDocumentStatus_InternalWaitingForRecipientSignatureBilateralDocumentStatus      BilateralDocumentStatus = 7
	BilateralDocumentStatus_InternalWithRecipientSignatureBilateralDocumentStatus            BilateralDocumentStatus = 8
	BilateralDocumentStatus_InternalRecipientSignatureRequestRejectedBilateralDocumentStatus BilateralDocumentStatus = 9
	BilateralDocumentStatus_InternalWaitingForSenderSignatureBilateralDocumentStatus         BilateralDocumentStatus = 13
	BilateralDocumentStatus_InternalInvalidSenderSignatureBilateralDocumentStatus            BilateralDocumentStatus = 14
	BilateralDocumentStatus_InternalInvalidRecipientSignatureBilateralDocumentStatus         BilateralDocumentStatus = 15
)

// Enum value maps for BilateralDocumentStatus.
var (
	BilateralDocumentStatus_name = map[int32]string{
		0:  "UnknownBilateralDocumentStatusBilateralDocumentStatus",
		1:  "OutboundWaitingForRecipientSignatureBilateralDocumentStatus",
		2:  "OutboundWithRecipientSignatureBilateralDocumentStatus",
		3:  "OutboundRecipientSignatureRequestRejectedBilateralDocumentStatus",
		10: "OutboundWaitingForSenderSignatureBilateralDocumentStatus",
		11: "OutboundInvalidSenderSignatureBilateralDocumentStatus",
		4:  "InboundWaitingForRecipientSignatureBilateralDocumentStatus",
		5:  "InboundWithRecipientSignatureBilateralDocumentStatus",
		6:  "InboundRecipientSignatureRequestRejectedBilateralDocumentStatus",
		12: "InboundInvalidRecipientSignatureBilateralDocumentStatus",
		7:  "InternalWaitingForRecipientSignatureBilateralDocumentStatus",
		8:  "InternalWithRecipientSignatureBilateralDocumentStatus",
		9:  "InternalRecipientSignatureRequestRejectedBilateralDocumentStatus",
		13: "InternalWaitingForSenderSignatureBilateralDocumentStatus",
		14: "InternalInvalidSenderSignatureBilateralDocumentStatus",
		15: "InternalInvalidRecipientSignatureBilateralDocumentStatus",
	}
	BilateralDocumentStatus_value = map[string]int32{
		"UnknownBilateralDocumentStatusBilateralDocumentStatus":            0,
		"OutboundWaitingForRecipientSignatureBilateralDocumentStatus":      1,
		"OutboundWithRecipientSignatureBilateralDocumentStatus":            2,
		"OutboundRecipientSignatureRequestRejectedBilateralDocumentStatus": 3,
		"OutboundWaitingForSenderSignatureBilateralDocumentStatus":         10,
		"OutboundInvalidSenderSignatureBilateralDocumentStatus":            11,
		"InboundWaitingForRecipientSignatureBilateralDocumentStatus":       4,
		"InboundWithRecipientSignatureBilateralDocumentStatus":             5,
		"InboundRecipientSignatureRequestRejectedBilateralDocumentStatus":  6,
		"InboundInvalidRecipientSignatureBilateralDocumentStatus":          12,
		"InternalWaitingForRecipientSignatureBilateralDocumentStatus":      7,
		"InternalWithRecipientSignatureBilateralDocumentStatus":            8,
		"InternalRecipientSignatureRequestRejectedBilateralDocumentStatus": 9,
		"InternalWaitingForSenderSignatureBilateralDocumentStatus":         13,
		"InternalInvalidSenderSignatureBilateralDocumentStatus":            14,
		"InternalInvalidRecipientSignatureBilateralDocumentStatus":         15,
	}
)

func (x BilateralDocumentStatus) Enum() *BilateralDocumentStatus {
	p := new(BilateralDocumentStatus)
	*p = x
	return p
}

func (x BilateralDocumentStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BilateralDocumentStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_Full_proto_enumTypes[22].Descriptor()
}

func (BilateralDocumentStatus) Type() protoreflect.EnumType {
	return &file_Full_proto_enumTypes[22]
}

func (x BilateralDocumentStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *BilateralDocumentStatus) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = BilateralDocumentStatus(num)
	return nil
}

// Deprecated: Use BilateralDocumentStatus.Descriptor instead.
func (BilateralDocumentStatus) EnumDescriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{22}
}

type ReceiptStatus int32

const (
	ReceiptStatus_UnknownReceiptStatusReceiptStatus             ReceiptStatus = 0 // Reserved state to report to legacy client for new statuses
	ReceiptStatus_ReceiptStatusNoneReceiptStatus                ReceiptStatus = 1
	ReceiptStatus_ReceiptStatusFinishedReceiptStatus            ReceiptStatus = 2
	ReceiptStatus_ReceiptStatusHaveToCreateReceiptReceiptStatus ReceiptStatus = 3
	ReceiptStatus_ReceiptStatusWaitingForReceiptReceiptStatus   ReceiptStatus = 4
)

// Enum value maps for ReceiptStatus.
var (
	ReceiptStatus_name = map[int32]string{
		0: "UnknownReceiptStatusReceiptStatus",
		1: "ReceiptStatusNoneReceiptStatus",
		2: "ReceiptStatusFinishedReceiptStatus",
		3: "ReceiptStatusHaveToCreateReceiptReceiptStatus",
		4: "ReceiptStatusWaitingForReceiptReceiptStatus",
	}
	ReceiptStatus_value = map[string]int32{
		"UnknownReceiptStatusReceiptStatus":             0,
		"ReceiptStatusNoneReceiptStatus":                1,
		"ReceiptStatusFinishedReceiptStatus":            2,
		"ReceiptStatusHaveToCreateReceiptReceiptStatus": 3,
		"ReceiptStatusWaitingForReceiptReceiptStatus":   4,
	}
)

func (x ReceiptStatus) Enum() *ReceiptStatus {
	p := new(ReceiptStatus)
	*p = x
	return p
}

func (x ReceiptStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReceiptStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_Full_proto_enumTypes[23].Descriptor()
}

func (ReceiptStatus) Type() protoreflect.EnumType {
	return &file_Full_proto_enumTypes[23]
}

func (x ReceiptStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ReceiptStatus) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ReceiptStatus(num)
	return nil
}

// Deprecated: Use ReceiptStatus.Descriptor instead.
func (ReceiptStatus) EnumDescriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{23}
}

type AcceptanceCertificateDocumentStatus int32

const (
	AcceptanceCertificateDocumentStatus_UnknownAcceptanceCertificateDocumentStatusAcceptanceCertificateDocumentStatus AcceptanceCertificateDocumentStatus = 0 // Reserved status to report to legacy clients for newly introduced statuses
	AcceptanceCertificateDocumentStatus_OutboundWaitingForRecipientSignatureAcceptanceCertificateDocumentStatus       AcceptanceCertificateDocumentStatus = 1
	AcceptanceCertificateDocumentStatus_OutboundWithRecipientSignatureAcceptanceCertificateDocumentStatus             AcceptanceCertificateDocumentStatus = 2
	AcceptanceCertificateDocumentStatus_OutboundRecipientSignatureRequestRejectedAcceptanceCertificateDocumentStatus  AcceptanceCertificateDocumentStatus = 3
	AcceptanceCertificateDocumentStatus_OutboundWaitingForSenderSignatureAcceptanceCertificateDocumentStatus          AcceptanceCertificateDocumentStatus = 10
	AcceptanceCertificateDocumentStatus_OutboundInvalidSenderSignatureAcceptanceCertificateDocumentStatus             AcceptanceCertificateDocumentStatus = 11
	AcceptanceCertificateDocumentStatus_OutboundNoRecipientSignatureRequestAcceptanceCertificateDocumentStatus        AcceptanceCertificateDocumentStatus = 16
	AcceptanceCertificateDocumentStatus_InboundWaitingForRecipientSignatureAcceptanceCertificateDocumentStatus        AcceptanceCertificateDocumentStatus = 4
	AcceptanceCertificateDocumentStatus_InboundWithRecipientSignatureAcceptanceCertificateDocumentStatus              AcceptanceCertificateDocumentStatus = 5
	AcceptanceCertificateDocumentStatus_InboundRecipientSignatureRequestRejectedAcceptanceCertificateDocumentStatus   AcceptanceCertificateDocumentStatus = 6
	AcceptanceCertificateDocumentStatus_InboundInvalidRecipientSignatureAcceptanceCertificateDocumentStatus           AcceptanceCertificateDocumentStatus = 12
	AcceptanceCertificateDocumentStatus_InboundNoRecipientSignatureRequestAcceptanceCertificateDocumentStatus         AcceptanceCertificateDocumentStatus = 17
	AcceptanceCertificateDocumentStatus_InternalWaitingForRecipientSignatureAcceptanceCertificateDocumentStatus       AcceptanceCertificateDocumentStatus = 7
	AcceptanceCertificateDocumentStatus_InternalWithRecipientSignatureAcceptanceCertificateDocumentStatus             AcceptanceCertificateDocumentStatus = 8
	AcceptanceCertificateDocumentStatus_InternalRecipientSignatureRequestRejectedAcceptanceCertificateDocumentStatus  AcceptanceCertificateDocumentStatus = 9
	AcceptanceCertificateDocumentStatus_InternalWaitingForSenderSignatureAcceptanceCertificateDocumentStatus          AcceptanceCertificateDocumentStatus = 13
	AcceptanceCertificateDocumentStatus_InternalInvalidSenderSignatureAcceptanceCertificateDocumentStatus             AcceptanceCertificateDocumentStatus = 14
	AcceptanceCertificateDocumentStatus_InternalInvalidRecipientSignatureAcceptanceCertificateDocumentStatus          AcceptanceCertificateDocumentStatus = 15
	AcceptanceCertificateDocumentStatus_InternalNoRecipientSignatureRequestAcceptanceCertificateDocumentStatus        AcceptanceCertificateDocumentStatus = 18
)

// Enum value maps for AcceptanceCertificateDocumentStatus.
var (
	AcceptanceCertificateDocumentStatus_name = map[int32]string{
		0:  "UnknownAcceptanceCertificateDocumentStatusAcceptanceCertificateDocumentStatus",
		1:  "OutboundWaitingForRecipientSignatureAcceptanceCertificateDocumentStatus",
		2:  "OutboundWithRecipientSignatureAcceptanceCertificateDocumentStatus",
		3:  "OutboundRecipientSignatureRequestRejectedAcceptanceCertificateDocumentStatus",
		10: "OutboundWaitingForSenderSignatureAcceptanceCertificateDocumentStatus",
		11: "OutboundInvalidSenderSignatureAcceptanceCertificateDocumentStatus",
		16: "OutboundNoRecipientSignatureRequestAcceptanceCertificateDocumentStatus",
		4:  "InboundWaitingForRecipientSignatureAcceptanceCertificateDocumentStatus",
		5:  "InboundWithRecipientSignatureAcceptanceCertificateDocumentStatus",
		6:  "InboundRecipientSignatureRequestRejectedAcceptanceCertificateDocumentStatus",
		12: "InboundInvalidRecipientSignatureAcceptanceCertificateDocumentStatus",
		17: "InboundNoRecipientSignatureRequestAcceptanceCertificateDocumentStatus",
		7:  "InternalWaitingForRecipientSignatureAcceptanceCertificateDocumentStatus",
		8:  "InternalWithRecipientSignatureAcceptanceCertificateDocumentStatus",
		9:  "InternalRecipientSignatureRequestRejectedAcceptanceCertificateDocumentStatus",
		13: "InternalWaitingForSenderSignatureAcceptanceCertificateDocumentStatus",
		14: "InternalInvalidSenderSignatureAcceptanceCertificateDocumentStatus",
		15: "InternalInvalidRecipientSignatureAcceptanceCertificateDocumentStatus",
		18: "InternalNoRecipientSignatureRequestAcceptanceCertificateDocumentStatus",
	}
	AcceptanceCertificateDocumentStatus_value = map[string]int32{
		"UnknownAcceptanceCertificateDocumentStatusAcceptanceCertificateDocumentStatus": 0,
		"OutboundWaitingForRecipientSignatureAcceptanceCertificateDocumentStatus":       1,
		"OutboundWithRecipientSignatureAcceptanceCertificateDocumentStatus":             2,
		"OutboundRecipientSignatureRequestRejectedAcceptanceCertificateDocumentStatus":  3,
		"OutboundWaitingForSenderSignatureAcceptanceCertificateDocumentStatus":          10,
		"OutboundInvalidSenderSignatureAcceptanceCertificateDocumentStatus":             11,
		"OutboundNoRecipientSignatureRequestAcceptanceCertificateDocumentStatus":        16,
		"InboundWaitingForRecipientSignatureAcceptanceCertificateDocumentStatus":        4,
		"InboundWithRecipientSignatureAcceptanceCertificateDocumentStatus":              5,
		"InboundRecipientSignatureRequestRejectedAcceptanceCertificateDocumentStatus":   6,
		"InboundInvalidRecipientSignatureAcceptanceCertificateDocumentStatus":           12,
		"InboundNoRecipientSignatureRequestAcceptanceCertificateDocumentStatus":         17,
		"InternalWaitingForRecipientSignatureAcceptanceCertificateDocumentStatus":       7,
		"InternalWithRecipientSignatureAcceptanceCertificateDocumentStatus":             8,
		"InternalRecipientSignatureRequestRejectedAcceptanceCertificateDocumentStatus":  9,
		"InternalWaitingForSenderSignatureAcceptanceCertificateDocumentStatus":          13,
		"InternalInvalidSenderSignatureAcceptanceCertificateDocumentStatus":             14,
		"InternalInvalidRecipientSignatureAcceptanceCertificateDocumentStatus":          15,
		"InternalNoRecipientSignatureRequestAcceptanceCertificateDocumentStatus":        18,
	}
)

func (x AcceptanceCertificateDocumentStatus) Enum() *AcceptanceCertificateDocumentStatus {
	p := new(AcceptanceCertificateDocumentStatus)
	*p = x
	return p
}

func (x AcceptanceCertificateDocumentStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AcceptanceCertificateDocumentStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_Full_proto_enumTypes[24].Descriptor()
}

func (AcceptanceCertificateDocumentStatus) Type() protoreflect.EnumType {
	return &file_Full_proto_enumTypes[24]
}

func (x AcceptanceCertificateDocumentStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *AcceptanceCertificateDocumentStatus) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = AcceptanceCertificateDocumentStatus(num)
	return nil
}

// Deprecated: Use AcceptanceCertificateDocumentStatus.Descriptor instead.
func (AcceptanceCertificateDocumentStatus) EnumDescriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{24}
}

type UniversalTransferDocumentStatus int32

const (
	UniversalTransferDocumentStatus_UnknownDocumentStatusUniversalTransferDocumentStatus                                 UniversalTransferDocumentStatus = 0
	UniversalTransferDocumentStatus_OutboundWaitingForSenderSignatureUniversalTransferDocumentStatus                     UniversalTransferDocumentStatus = 1
	UniversalTransferDocumentStatus_OutboundWaitingForInvoiceReceiptAndRecipientSignatureUniversalTransferDocumentStatus UniversalTransferDocumentStatus = 2
	UniversalTransferDocumentStatus_OutboundWaitingForInvoiceReceiptUniversalTransferDocumentStatus                      UniversalTransferDocumentStatus = 3
	UniversalTransferDocumentStatus_OutboundWaitingForRecipientSignatureUniversalTransferDocumentStatus                  UniversalTransferDocumentStatus = 4
	UniversalTransferDocumentStatus_OutboundInvalidSenderSignatureUniversalTransferDocumentStatus                        UniversalTransferDocumentStatus = 5
	UniversalTransferDocumentStatus_InboundWaitingForInvoiceReceiptAndRecipientSignatureUniversalTransferDocumentStatus  UniversalTransferDocumentStatus = 6
	UniversalTransferDocumentStatus_InboundWaitingForRecipientSignatureUniversalTransferDocumentStatus                   UniversalTransferDocumentStatus = 7
	UniversalTransferDocumentStatus_InboundWaitingForInvoiceReceiptUniversalTransferDocumentStatus                       UniversalTransferDocumentStatus = 8
	UniversalTransferDocumentStatus_InboundWithRecipientSignatureUniversalTransferDocumentStatus                         UniversalTransferDocumentStatus = 9
	UniversalTransferDocumentStatus_InboundInvalidRecipientSignatureUniversalTransferDocumentStatus                      UniversalTransferDocumentStatus = 10
)

// Enum value maps for UniversalTransferDocumentStatus.
var (
	UniversalTransferDocumentStatus_name = map[int32]string{
		0:  "UnknownDocumentStatusUniversalTransferDocumentStatus",
		1:  "OutboundWaitingForSenderSignatureUniversalTransferDocumentStatus",
		2:  "OutboundWaitingForInvoiceReceiptAndRecipientSignatureUniversalTransferDocumentStatus",
		3:  "OutboundWaitingForInvoiceReceiptUniversalTransferDocumentStatus",
		4:  "OutboundWaitingForRecipientSignatureUniversalTransferDocumentStatus",
		5:  "OutboundInvalidSenderSignatureUniversalTransferDocumentStatus",
		6:  "InboundWaitingForInvoiceReceiptAndRecipientSignatureUniversalTransferDocumentStatus",
		7:  "InboundWaitingForRecipientSignatureUniversalTransferDocumentStatus",
		8:  "InboundWaitingForInvoiceReceiptUniversalTransferDocumentStatus",
		9:  "InboundWithRecipientSignatureUniversalTransferDocumentStatus",
		10: "InboundInvalidRecipientSignatureUniversalTransferDocumentStatus",
	}
	UniversalTransferDocumentStatus_value = map[string]int32{
		"UnknownDocumentStatusUniversalTransferDocumentStatus":                                 0,
		"OutboundWaitingForSenderSignatureUniversalTransferDocumentStatus":                     1,
		"OutboundWaitingForInvoiceReceiptAndRecipientSignatureUniversalTransferDocumentStatus": 2,
		"OutboundWaitingForInvoiceReceiptUniversalTransferDocumentStatus":                      3,
		"OutboundWaitingForRecipientSignatureUniversalTransferDocumentStatus":                  4,
		"OutboundInvalidSenderSignatureUniversalTransferDocumentStatus":                        5,
		"InboundWaitingForInvoiceReceiptAndRecipientSignatureUniversalTransferDocumentStatus":  6,
		"InboundWaitingForRecipientSignatureUniversalTransferDocumentStatus":                   7,
		"InboundWaitingForInvoiceReceiptUniversalTransferDocumentStatus":                       8,
		"InboundWithRecipientSignatureUniversalTransferDocumentStatus":                         9,
		"InboundInvalidRecipientSignatureUniversalTransferDocumentStatus":                      10,
	}
)

func (x UniversalTransferDocumentStatus) Enum() *UniversalTransferDocumentStatus {
	p := new(UniversalTransferDocumentStatus)
	*p = x
	return p
}

func (x UniversalTransferDocumentStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UniversalTransferDocumentStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_Full_proto_enumTypes[25].Descriptor()
}

func (UniversalTransferDocumentStatus) Type() protoreflect.EnumType {
	return &file_Full_proto_enumTypes[25]
}

func (x UniversalTransferDocumentStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *UniversalTransferDocumentStatus) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = UniversalTransferDocumentStatus(num)
	return nil
}

// Deprecated: Use UniversalTransferDocumentStatus.Descriptor instead.
func (UniversalTransferDocumentStatus) EnumDescriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{25}
}

type UnilateralDocumentStatus int32

const (
	UnilateralDocumentStatus_UnknownUnilateralDocumentStatusUnilateralDocumentStatus   UnilateralDocumentStatus = 0
	UnilateralDocumentStatus_OutboundUnilateralDocumentStatus                          UnilateralDocumentStatus = 1
	UnilateralDocumentStatus_OutboundWaitingForSenderSignatureUnilateralDocumentStatus UnilateralDocumentStatus = 4
	UnilateralDocumentStatus_OutboundInvalidSenderSignatureUnilateralDocumentStatus    UnilateralDocumentStatus = 5
	UnilateralDocumentStatus_InboundUnilateralDocumentStatus                           UnilateralDocumentStatus = 2
	UnilateralDocumentStatus_InternalUnilateralDocumentStatus                          UnilateralDocumentStatus = 3
	UnilateralDocumentStatus_InternalWaitingForSenderSignatureUnilateralDocumentStatus UnilateralDocumentStatus = 6
	UnilateralDocumentStatus_InternalInvalidSenderSignatureUnilateralDocumentStatus    UnilateralDocumentStatus = 7
)

// Enum value maps for UnilateralDocumentStatus.
var (
	UnilateralDocumentStatus_name = map[int32]string{
		0: "UnknownUnilateralDocumentStatusUnilateralDocumentStatus",
		1: "OutboundUnilateralDocumentStatus",
		4: "OutboundWaitingForSenderSignatureUnilateralDocumentStatus",
		5: "OutboundInvalidSenderSignatureUnilateralDocumentStatus",
		2: "InboundUnilateralDocumentStatus",
		3: "InternalUnilateralDocumentStatus",
		6: "InternalWaitingForSenderSignatureUnilateralDocumentStatus",
		7: "InternalInvalidSenderSignatureUnilateralDocumentStatus",
	}
	UnilateralDocumentStatus_value = map[string]int32{
		"UnknownUnilateralDocumentStatusUnilateralDocumentStatus":   0,
		"OutboundUnilateralDocumentStatus":                          1,
		"OutboundWaitingForSenderSignatureUnilateralDocumentStatus": 4,
		"OutboundInvalidSenderSignatureUnilateralDocumentStatus":    5,
		"InboundUnilateralDocumentStatus":                           2,
		"InternalUnilateralDocumentStatus":                          3,
		"InternalWaitingForSenderSignatureUnilateralDocumentStatus": 6,
		"InternalInvalidSenderSignatureUnilateralDocumentStatus":    7,
	}
)

func (x UnilateralDocumentStatus) Enum() *UnilateralDocumentStatus {
	p := new(UnilateralDocumentStatus)
	*p = x
	return p
}

func (x UnilateralDocumentStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UnilateralDocumentStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_Full_proto_enumTypes[26].Descriptor()
}

func (UnilateralDocumentStatus) Type() protoreflect.EnumType {
	return &file_Full_proto_enumTypes[26]
}

func (x UnilateralDocumentStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *UnilateralDocumentStatus) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = UnilateralDocumentStatus(num)
	return nil
}

// Deprecated: Use UnilateralDocumentStatus.Descriptor instead.
func (UnilateralDocumentStatus) EnumDescriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{26}
}

type ResolutionStatusType int32

const (
	ResolutionStatusType_NoneResolutionStatusType                 ResolutionStatusType = 0
	ResolutionStatusType_ApprovedResolutionStatusType             ResolutionStatusType = 1
	ResolutionStatusType_DisapprovedResolutionStatusType          ResolutionStatusType = 2
	ResolutionStatusType_ApprovementRequestedResolutionStatusType ResolutionStatusType = 3
	ResolutionStatusType_SignatureRequestedResolutionStatusType   ResolutionStatusType = 4
	ResolutionStatusType_SignatureDeniedResolutionStatusType      ResolutionStatusType = 5
	ResolutionStatusType_ActionsRequestedResolutionStatusType     ResolutionStatusType = 6
)

// Enum value maps for ResolutionStatusType.
var (
	ResolutionStatusType_name = map[int32]string{
		0: "NoneResolutionStatusType",
		1: "ApprovedResolutionStatusType",
		2: "DisapprovedResolutionStatusType",
		3: "ApprovementRequestedResolutionStatusType",
		4: "SignatureRequestedResolutionStatusType",
		5: "SignatureDeniedResolutionStatusType",
		6: "ActionsRequestedResolutionStatusType",
	}
	ResolutionStatusType_value = map[string]int32{
		"NoneResolutionStatusType":                 0,
		"ApprovedResolutionStatusType":             1,
		"DisapprovedResolutionStatusType":          2,
		"ApprovementRequestedResolutionStatusType": 3,
		"SignatureRequestedResolutionStatusType":   4,
		"SignatureDeniedResolutionStatusType":      5,
		"ActionsRequestedResolutionStatusType":     6,
	}
)

func (x ResolutionStatusType) Enum() *ResolutionStatusType {
	p := new(ResolutionStatusType)
	*p = x
	return p
}

func (x ResolutionStatusType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ResolutionStatusType) Descriptor() protoreflect.EnumDescriptor {
	return file_Full_proto_enumTypes[27].Descriptor()
}

func (ResolutionStatusType) Type() protoreflect.EnumType {
	return &file_Full_proto_enumTypes[27]
}

func (x ResolutionStatusType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ResolutionStatusType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ResolutionStatusType(num)
	return nil
}

// Deprecated: Use ResolutionStatusType.Descriptor instead.
func (ResolutionStatusType) EnumDescriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{27}
}

type RevocationStatus int32

const (
	RevocationStatus_UnknownRevocationStatus   RevocationStatus = 0
	RevocationStatus_RevocationStatusNone      RevocationStatus = 1
	RevocationStatus_RevocationIsRequestedByMe RevocationStatus = 2
	RevocationStatus_RequestsMyRevocation      RevocationStatus = 3
	RevocationStatus_RevocationAccepted        RevocationStatus = 4
	RevocationStatus_RevocationRejected        RevocationStatus = 5
)

// Enum value maps for RevocationStatus.
var (
	RevocationStatus_name = map[int32]string{
		0: "UnknownRevocationStatus",
		1: "RevocationStatusNone",
		2: "RevocationIsRequestedByMe",
		3: "RequestsMyRevocation",
		4: "RevocationAccepted",
		5: "RevocationRejected",
	}
	RevocationStatus_value = map[string]int32{
		"UnknownRevocationStatus":   0,
		"RevocationStatusNone":      1,
		"RevocationIsRequestedByMe": 2,
		"RequestsMyRevocation":      3,
		"RevocationAccepted":        4,
		"RevocationRejected":        5,
	}
)

func (x RevocationStatus) Enum() *RevocationStatus {
	p := new(RevocationStatus)
	*p = x
	return p
}

func (x RevocationStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RevocationStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_Full_proto_enumTypes[28].Descriptor()
}

func (RevocationStatus) Type() protoreflect.EnumType {
	return &file_Full_proto_enumTypes[28]
}

func (x RevocationStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *RevocationStatus) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = RevocationStatus(num)
	return nil
}

// Deprecated: Use RevocationStatus.Descriptor instead.
func (RevocationStatus) EnumDescriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{28}
}

type DocumentDirection int32

const (
	DocumentDirection_UnknownDocumentDirection DocumentDirection = 0
	DocumentDirection_Inbound                  DocumentDirection = 1
	DocumentDirection_Outbound                 DocumentDirection = 2
	DocumentDirection_Internal                 DocumentDirection = 3
)

// Enum value maps for DocumentDirection.
var (
	DocumentDirection_name = map[int32]string{
		0: "UnknownDocumentDirection",
		1: "Inbound",
		2: "Outbound",
		3: "Internal",
	}
	DocumentDirection_value = map[string]int32{
		"UnknownDocumentDirection": 0,
		"Inbound":                  1,
		"Outbound":                 2,
		"Internal":                 3,
	}
)

func (x DocumentDirection) Enum() *DocumentDirection {
	p := new(DocumentDirection)
	*p = x
	return p
}

func (x DocumentDirection) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DocumentDirection) Descriptor() protoreflect.EnumDescriptor {
	return file_Full_proto_enumTypes[29].Descriptor()
}

func (DocumentDirection) Type() protoreflect.EnumType {
	return &file_Full_proto_enumTypes[29]
}

func (x DocumentDirection) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *DocumentDirection) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = DocumentDirection(num)
	return nil
}

// Deprecated: Use DocumentDirection.Descriptor instead.
func (DocumentDirection) EnumDescriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{29}
}

type SenderSignatureStatus int32

const (
	SenderSignatureStatus_UnknownSenderSignatureStatus     SenderSignatureStatus = 0
	SenderSignatureStatus_WaitingForSenderSignature        SenderSignatureStatus = 1
	SenderSignatureStatus_SenderSignatureUnchecked         SenderSignatureStatus = 2
	SenderSignatureStatus_SenderSignatureCheckedAndValid   SenderSignatureStatus = 3
	SenderSignatureStatus_SenderSignatureCheckedAndInvalid SenderSignatureStatus = 4
)

// Enum value maps for SenderSignatureStatus.
var (
	SenderSignatureStatus_name = map[int32]string{
		0: "UnknownSenderSignatureStatus",
		1: "WaitingForSenderSignature",
		2: "SenderSignatureUnchecked",
		3: "SenderSignatureCheckedAndValid",
		4: "SenderSignatureCheckedAndInvalid",
	}
	SenderSignatureStatus_value = map[string]int32{
		"UnknownSenderSignatureStatus":     0,
		"WaitingForSenderSignature":        1,
		"SenderSignatureUnchecked":         2,
		"SenderSignatureCheckedAndValid":   3,
		"SenderSignatureCheckedAndInvalid": 4,
	}
)

func (x SenderSignatureStatus) Enum() *SenderSignatureStatus {
	p := new(SenderSignatureStatus)
	*p = x
	return p
}

func (x SenderSignatureStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SenderSignatureStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_Full_proto_enumTypes[30].Descriptor()
}

func (SenderSignatureStatus) Type() protoreflect.EnumType {
	return &file_Full_proto_enumTypes[30]
}

func (x SenderSignatureStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *SenderSignatureStatus) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = SenderSignatureStatus(num)
	return nil
}

// Deprecated: Use SenderSignatureStatus.Descriptor instead.
func (SenderSignatureStatus) EnumDescriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{30}
}

type ProxySignatureStatus int32

const (
	ProxySignatureStatus_UnknownProxySignatureStatus ProxySignatureStatus = 0
	ProxySignatureStatus_ProxySignatureStatusNone    ProxySignatureStatus = 1
	ProxySignatureStatus_WaitingForProxySignature    ProxySignatureStatus = 2
	ProxySignatureStatus_WithProxySignature          ProxySignatureStatus = 3
	ProxySignatureStatus_ProxySignatureRejected      ProxySignatureStatus = 4
	ProxySignatureStatus_InvalidProxySignature       ProxySignatureStatus = 5
)

// Enum value maps for ProxySignatureStatus.
var (
	ProxySignatureStatus_name = map[int32]string{
		0: "UnknownProxySignatureStatus",
		1: "ProxySignatureStatusNone",
		2: "WaitingForProxySignature",
		3: "WithProxySignature",
		4: "ProxySignatureRejected",
		5: "InvalidProxySignature",
	}
	ProxySignatureStatus_value = map[string]int32{
		"UnknownProxySignatureStatus": 0,
		"ProxySignatureStatusNone":    1,
		"WaitingForProxySignature":    2,
		"WithProxySignature":          3,
		"ProxySignatureRejected":      4,
		"InvalidProxySignature":       5,
	}
)

func (x ProxySignatureStatus) Enum() *ProxySignatureStatus {
	p := new(ProxySignatureStatus)
	*p = x
	return p
}

func (x ProxySignatureStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProxySignatureStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_Full_proto_enumTypes[31].Descriptor()
}

func (ProxySignatureStatus) Type() protoreflect.EnumType {
	return &file_Full_proto_enumTypes[31]
}

func (x ProxySignatureStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ProxySignatureStatus) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ProxySignatureStatus(num)
	return nil
}

// Deprecated: Use ProxySignatureStatus.Descriptor instead.
func (ProxySignatureStatus) EnumDescriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{31}
}

type GeneralReceiptStatus int32

const (
	GeneralReceiptStatus_GeneralReceiptStatusUnknown       GeneralReceiptStatus = 0
	GeneralReceiptStatus_GeneralReceiptStatusNotAcceptable GeneralReceiptStatus = 1
	GeneralReceiptStatus_HaveToCreateReceipt               GeneralReceiptStatus = 2
	GeneralReceiptStatus_WaitingForReceipt                 GeneralReceiptStatus = 3
	GeneralReceiptStatus_Finished                          GeneralReceiptStatus = 4
)

// Enum value maps for GeneralReceiptStatus.
var (
	GeneralReceiptStatus_name = map[int32]string{
		0: "GeneralReceiptStatusUnknown",
		1: "GeneralReceiptStatusNotAcceptable",
		2: "HaveToCreateReceipt",
		3: "WaitingForReceipt",
		4: "Finished",
	}
	GeneralReceiptStatus_value = map[string]int32{
		"GeneralReceiptStatusUnknown":       0,
		"GeneralReceiptStatusNotAcceptable": 1,
		"HaveToCreateReceipt":               2,
		"WaitingForReceipt":                 3,
		"Finished":                          4,
	}
)

func (x GeneralReceiptStatus) Enum() *GeneralReceiptStatus {
	p := new(GeneralReceiptStatus)
	*p = x
	return p
}

func (x GeneralReceiptStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GeneralReceiptStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_Full_proto_enumTypes[32].Descriptor()
}

func (GeneralReceiptStatus) Type() protoreflect.EnumType {
	return &file_Full_proto_enumTypes[32]
}

func (x GeneralReceiptStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *GeneralReceiptStatus) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = GeneralReceiptStatus(num)
	return nil
}

// Deprecated: Use GeneralReceiptStatus.Descriptor instead.
func (GeneralReceiptStatus) EnumDescriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{32}
}

type RecipientResponseStatus int32

const (
	RecipientResponseStatus_RecipientResponseStatusUnknown       RecipientResponseStatus = 0
	RecipientResponseStatus_RecipientResponseStatusNotAcceptable RecipientResponseStatus = 1
	RecipientResponseStatus_WaitingForRecipientSignature         RecipientResponseStatus = 2
	RecipientResponseStatus_WithRecipientSignature               RecipientResponseStatus = 3
	RecipientResponseStatus_RecipientSignatureRequestRejected    RecipientResponseStatus = 4
	RecipientResponseStatus_InvalidRecipientSignature            RecipientResponseStatus = 5
	RecipientResponseStatus_WithRecipientPartiallySignature      RecipientResponseStatus = 6
)

// Enum value maps for RecipientResponseStatus.
var (
	RecipientResponseStatus_name = map[int32]string{
		0: "RecipientResponseStatusUnknown",
		1: "RecipientResponseStatusNotAcceptable",
		2: "WaitingForRecipientSignature",
		3: "WithRecipientSignature",
		4: "RecipientSignatureRequestRejected",
		5: "InvalidRecipientSignature",
		6: "WithRecipientPartiallySignature",
	}
	RecipientResponseStatus_value = map[string]int32{
		"RecipientResponseStatusUnknown":       0,
		"RecipientResponseStatusNotAcceptable": 1,
		"WaitingForRecipientSignature":         2,
		"WithRecipientSignature":               3,
		"RecipientSignatureRequestRejected":    4,
		"InvalidRecipientSignature":            5,
		"WithRecipientPartiallySignature":      6,
	}
)

func (x RecipientResponseStatus) Enum() *RecipientResponseStatus {
	p := new(RecipientResponseStatus)
	*p = x
	return p
}

func (x RecipientResponseStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RecipientResponseStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_Full_proto_enumTypes[33].Descriptor()
}

func (RecipientResponseStatus) Type() protoreflect.EnumType {
	return &file_Full_proto_enumTypes[33]
}

func (x RecipientResponseStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *RecipientResponseStatus) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = RecipientResponseStatus(num)
	return nil
}

// Deprecated: Use RecipientResponseStatus.Descriptor instead.
func (RecipientResponseStatus) EnumDescriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{33}
}

type CustomDataPatchOperation int32

const (
	CustomDataPatchOperation_SetOperation    CustomDataPatchOperation = 0
	CustomDataPatchOperation_RemoveOperation CustomDataPatchOperation = 1
)

// Enum value maps for CustomDataPatchOperation.
var (
	CustomDataPatchOperation_name = map[int32]string{
		0: "SetOperation",
		1: "RemoveOperation",
	}
	CustomDataPatchOperation_value = map[string]int32{
		"SetOperation":    0,
		"RemoveOperation": 1,
	}
)

func (x CustomDataPatchOperation) Enum() *CustomDataPatchOperation {
	p := new(CustomDataPatchOperation)
	*p = x
	return p
}

func (x CustomDataPatchOperation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CustomDataPatchOperation) Descriptor() protoreflect.EnumDescriptor {
	return file_Full_proto_enumTypes[34].Descriptor()
}

func (CustomDataPatchOperation) Type() protoreflect.EnumType {
	return &file_Full_proto_enumTypes[34]
}

func (x CustomDataPatchOperation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CustomDataPatchOperation) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CustomDataPatchOperation(num)
	return nil
}

// Deprecated: Use CustomDataPatchOperation.Descriptor instead.
func (CustomDataPatchOperation) EnumDescriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{34}
}

type SearchScope int32

const (
	SearchScope_SearchScopeAny      SearchScope = 0
	SearchScope_SearchScopeIncoming SearchScope = 1
	SearchScope_SearchScopeOutgoing SearchScope = 2
	SearchScope_SearchScopeDeleted  SearchScope = 3
	SearchScope_SearchScopeInternal SearchScope = 4
)

// Enum value maps for SearchScope.
var (
	SearchScope_name = map[int32]string{
		0: "SearchScopeAny",
		1: "SearchScopeIncoming",
		2: "SearchScopeOutgoing",
		3: "SearchScopeDeleted",
		4: "SearchScopeInternal",
	}
	SearchScope_value = map[string]int32{
		"SearchScopeAny":      0,
		"SearchScopeIncoming": 1,
		"SearchScopeOutgoing": 2,
		"SearchScopeDeleted":  3,
		"SearchScopeInternal": 4,
	}
)

func (x SearchScope) Enum() *SearchScope {
	p := new(SearchScope)
	*p = x
	return p
}

func (x SearchScope) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SearchScope) Descriptor() protoreflect.EnumDescriptor {
	return file_Full_proto_enumTypes[35].Descriptor()
}

func (SearchScope) Type() protoreflect.EnumType {
	return &file_Full_proto_enumTypes[35]
}

func (x SearchScope) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *SearchScope) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = SearchScope(num)
	return nil
}

// Deprecated: Use SearchScope.Descriptor instead.
func (SearchScope) EnumDescriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{35}
}

type SortDirection int32

const (
	SortDirection_UnknownSortDirection SortDirection = 0
	SortDirection_Ascending            SortDirection = 1
	SortDirection_Descending           SortDirection = 2
)

// Enum value maps for SortDirection.
var (
	SortDirection_name = map[int32]string{
		0: "UnknownSortDirection",
		1: "Ascending",
		2: "Descending",
	}
	SortDirection_value = map[string]int32{
		"UnknownSortDirection": 0,
		"Ascending":            1,
		"Descending":           2,
	}
)

func (x SortDirection) Enum() *SortDirection {
	p := new(SortDirection)
	*p = x
	return p
}

func (x SortDirection) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SortDirection) Descriptor() protoreflect.EnumDescriptor {
	return file_Full_proto_enumTypes[36].Descriptor()
}

func (SortDirection) Type() protoreflect.EnumType {
	return &file_Full_proto_enumTypes[36]
}

func (x SortDirection) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *SortDirection) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = SortDirection(num)
	return nil
}

// Deprecated: Use SortDirection.Descriptor instead.
func (SortDirection) EnumDescriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{36}
}

type DocflowStatusSeverity int32

const (
	DocflowStatusSeverity_UnknownDocflowStatusSeverityDocflowStatusSeverity DocflowStatusSeverity = 0
	DocflowStatusSeverity_InfoDocflowStatusSeverity                         DocflowStatusSeverity = 1
	DocflowStatusSeverity_SuccessDocflowStatusSeverity                      DocflowStatusSeverity = 2
	DocflowStatusSeverity_WarningDocflowStatusSeverity                      DocflowStatusSeverity = 3
	DocflowStatusSeverity_ErrorDocflowStatusSeverity                        DocflowStatusSeverity = 4
)

// Enum value maps for DocflowStatusSeverity.
var (
	DocflowStatusSeverity_name = map[int32]string{
		0: "UnknownDocflowStatusSeverityDocflowStatusSeverity",
		1: "InfoDocflowStatusSeverity",
		2: "SuccessDocflowStatusSeverity",
		3: "WarningDocflowStatusSeverity",
		4: "ErrorDocflowStatusSeverity",
	}
	DocflowStatusSeverity_value = map[string]int32{
		"UnknownDocflowStatusSeverityDocflowStatusSeverity": 0,
		"InfoDocflowStatusSeverity":                         1,
		"SuccessDocflowStatusSeverity":                      2,
		"WarningDocflowStatusSeverity":                      3,
		"ErrorDocflowStatusSeverity":                        4,
	}
)

func (x DocflowStatusSeverity) Enum() *DocflowStatusSeverity {
	p := new(DocflowStatusSeverity)
	*p = x
	return p
}

func (x DocflowStatusSeverity) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DocflowStatusSeverity) Descriptor() protoreflect.EnumDescriptor {
	return file_Full_proto_enumTypes[37].Descriptor()
}

func (DocflowStatusSeverity) Type() protoreflect.EnumType {
	return &file_Full_proto_enumTypes[37]
}

func (x DocflowStatusSeverity) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *DocflowStatusSeverity) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = DocflowStatusSeverity(num)
	return nil
}

// Deprecated: Use DocflowStatusSeverity.Descriptor instead.
func (DocflowStatusSeverity) EnumDescriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{37}
}

type SignerType int32

const (
	SignerType_LegalEntitySignerType      SignerType = 1 // Представитель юридического лица
	SignerType_IndividualEntitySignerType SignerType = 2 // Индивидуальный предприниматель
	SignerType_PhysicalPersonSignerType   SignerType = 3 // Физическое лицо
)

// Enum value maps for SignerType.
var (
	SignerType_name = map[int32]string{
		1: "LegalEntitySignerType",
		2: "IndividualEntitySignerType",
		3: "PhysicalPersonSignerType",
	}
	SignerType_value = map[string]int32{
		"LegalEntitySignerType":      1,
		"IndividualEntitySignerType": 2,
		"PhysicalPersonSignerType":   3,
	}
)

func (x SignerType) Enum() *SignerType {
	p := new(SignerType)
	*p = x
	return p
}

func (x SignerType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SignerType) Descriptor() protoreflect.EnumDescriptor {
	return file_Full_proto_enumTypes[38].Descriptor()
}

func (SignerType) Type() protoreflect.EnumType {
	return &file_Full_proto_enumTypes[38]
}

func (x SignerType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *SignerType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = SignerType(num)
	return nil
}

// Deprecated: Use SignerType.Descriptor instead.
func (SignerType) EnumDescriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{38}
}

type SignerPowers int32

const (
	SignerPowers_InvoiceSigner                                  SignerPowers = 0  // лицо, ответственное за подписание счетов-фактур
	SignerPowers_PersonMadeOperation                            SignerPowers = 1  // лицо, совершившее сделку, операцию
	SignerPowers_MadeAndSignOperation                           SignerPowers = 2  // лицо, совершившее сделку, операцию и ответственное за её оформление;
	SignerPowers_PersonDocumentedOperation                      SignerPowers = 3  // лицо, ответственное за оформление свершившегося события;
	SignerPowers_MadeOperationAndSignedInvoice                  SignerPowers = 4  // лицо, совершившее сделку, операцию и ответственное за подписание счетов-фактур;
	SignerPowers_MadeAndResponsibleForOperationAndSignedInvoice SignerPowers = 5  // лицо, совершившее сделку, операцию и ответственное за её оформление и за подписание счетов-фактур;
	SignerPowers_ResponsibleForOperationAndSignerForInvoice     SignerPowers = 6  // лицо, ответственное за оформление свершившегося события и за подписание счетов-фактур;
	SignerPowers_ChairmanCommission                             SignerPowers = 7  // председатель комиссии
	SignerPowers_MemberCommission                               SignerPowers = 8  // член комиссии
	SignerPowers_PersonApprovedDocument                         SignerPowers = 21 // лицо, в полномочия которого входит утверждение документа, оформляющего событие (факт хозяйственной жизни)
	SignerPowers_PersonConfirmedDocument                        SignerPowers = 22 // лицо, в полномочия которого входит подтверждение оформленного события (факта хозяйственной жизни)
	SignerPowers_PersonAgreedOnDocument                         SignerPowers = 23 // лицо, в полномочия которого входит согласование документа, оформляющего событие (факт хозяйственной жизни)
	SignerPowers_PersonOtherPower                               SignerPowers = 29 // лицо с иными полномочиями
)

// Enum value maps for SignerPowers.
var (
	SignerPowers_name = map[int32]string{
		0:  "InvoiceSigner",
		1:  "PersonMadeOperation",
		2:  "MadeAndSignOperation",
		3:  "PersonDocumentedOperation",
		4:  "MadeOperationAndSignedInvoice",
		5:  "MadeAndResponsibleForOperationAndSignedInvoice",
		6:  "ResponsibleForOperationAndSignerForInvoice",
		7:  "ChairmanCommission",
		8:  "MemberCommission",
		21: "PersonApprovedDocument",
		22: "PersonConfirmedDocument",
		23: "PersonAgreedOnDocument",
		29: "PersonOtherPower",
	}
	SignerPowers_value = map[string]int32{
		"InvoiceSigner":                                  0,
		"PersonMadeOperation":                            1,
		"MadeAndSignOperation":                           2,
		"PersonDocumentedOperation":                      3,
		"MadeOperationAndSignedInvoice":                  4,
		"MadeAndResponsibleForOperationAndSignedInvoice": 5,
		"ResponsibleForOperationAndSignerForInvoice":     6,
		"ChairmanCommission":                             7,
		"MemberCommission":                               8,
		"PersonApprovedDocument":                         21,
		"PersonConfirmedDocument":                        22,
		"PersonAgreedOnDocument":                         23,
		"PersonOtherPower":                               29,
	}
)

func (x SignerPowers) Enum() *SignerPowers {
	p := new(SignerPowers)
	*p = x
	return p
}

func (x SignerPowers) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SignerPowers) Descriptor() protoreflect.EnumDescriptor {
	return file_Full_proto_enumTypes[39].Descriptor()
}

func (SignerPowers) Type() protoreflect.EnumType {
	return &file_Full_proto_enumTypes[39]
}

func (x SignerPowers) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *SignerPowers) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = SignerPowers(num)
	return nil
}

// Deprecated: Use SignerPowers.Descriptor instead.
func (SignerPowers) EnumDescriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{39}
}

type SignerStatus int32

const (
	SignerStatus_SellerEmployee                  SignerStatus = 1 // Работник организации продавца товаров (работ, услуг, имущественных прав);
	SignerStatus_InformationCreatorEmployee      SignerStatus = 2 // Работник организации - составителя информации продавца;
	SignerStatus_OtherOrganizationEmployee       SignerStatus = 3 // Работник иной уполномоченной организации;
	SignerStatus_AuthorizedPerson                SignerStatus = 4 // Уполномоченное физическое лицо (в том числе индивидуальный предприниматель)
	SignerStatus_BuyerEmployee                   SignerStatus = 5 // Работник организации - покупателя (для документов в формате приказа №820);
	SignerStatus_InformationCreatorBuyerEmployee SignerStatus = 6 // Работник организации - составителя файла обмена информации покупателя, если составитель файла обмена информации покупателя не является покупателем (для документов в формате приказа №820 и №423)
)

// Enum value maps for SignerStatus.
var (
	SignerStatus_name = map[int32]string{
		1: "SellerEmployee",
		2: "InformationCreatorEmployee",
		3: "OtherOrganizationEmployee",
		4: "AuthorizedPerson",
		5: "BuyerEmployee",
		6: "InformationCreatorBuyerEmployee",
	}
	SignerStatus_value = map[string]int32{
		"SellerEmployee":                  1,
		"InformationCreatorEmployee":      2,
		"OtherOrganizationEmployee":       3,
		"AuthorizedPerson":                4,
		"BuyerEmployee":                   5,
		"InformationCreatorBuyerEmployee": 6,
	}
)

func (x SignerStatus) Enum() *SignerStatus {
	p := new(SignerStatus)
	*p = x
	return p
}

func (x SignerStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SignerStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_Full_proto_enumTypes[40].Descriptor()
}

func (SignerStatus) Type() protoreflect.EnumType {
	return &file_Full_proto_enumTypes[40]
}

func (x SignerStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *SignerStatus) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = SignerStatus(num)
	return nil
}

// Deprecated: Use SignerStatus.Descriptor instead.
func (SignerStatus) EnumDescriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{40}
}

type FunctionType int32

const (
	FunctionType_Invoice         FunctionType = 0 // СЧФ
	FunctionType_Basic           FunctionType = 1 // ДОП
	FunctionType_InvoiceAndBasic FunctionType = 2 // СЧФДОП
)

// Enum value maps for FunctionType.
var (
	FunctionType_name = map[int32]string{
		0: "Invoice",
		1: "Basic",
		2: "InvoiceAndBasic",
	}
	FunctionType_value = map[string]int32{
		"Invoice":         0,
		"Basic":           1,
		"InvoiceAndBasic": 2,
	}
)

func (x FunctionType) Enum() *FunctionType {
	p := new(FunctionType)
	*p = x
	return p
}

func (x FunctionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FunctionType) Descriptor() protoreflect.EnumDescriptor {
	return file_Full_proto_enumTypes[41].Descriptor()
}

func (FunctionType) Type() protoreflect.EnumType {
	return &file_Full_proto_enumTypes[41]
}

func (x FunctionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *FunctionType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = FunctionType(num)
	return nil
}

// Deprecated: Use FunctionType.Descriptor instead.
func (FunctionType) EnumDescriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{41}
}

type TaxRate int32

const (
	TaxRate_NoVat           TaxRate = 0 //без НДС
	TaxRate_Percent_0       TaxRate = 1 //ставка налога 0%
	TaxRate_Percent_10      TaxRate = 2 //ставка налога 10%
	TaxRate_Percent_18      TaxRate = 3 //ставка налога 18%
	TaxRate_Percent_20      TaxRate = 4 //ставка налога 20%
	TaxRate_Fraction_10_110 TaxRate = 5 //ставка налога 10/110 (дробь)
	TaxRate_Fraction_18_118 TaxRate = 6 //ставка налога 18/118 (дробь)
	TaxRate_TaxedByAgent    TaxRate = 7 //ставка налога "НДС исчисляется налоговым агентом"
	TaxRate_Fraction_20_120 TaxRate = 8 //ставка налога 20/120 (дробь)
)

// Enum value maps for TaxRate.
var (
	TaxRate_name = map[int32]string{
		0: "NoVat",
		1: "Percent_0",
		2: "Percent_10",
		3: "Percent_18",
		4: "Percent_20",
		5: "Fraction_10_110",
		6: "Fraction_18_118",
		7: "TaxedByAgent",
		8: "Fraction_20_120",
	}
	TaxRate_value = map[string]int32{
		"NoVat":           0,
		"Percent_0":       1,
		"Percent_10":      2,
		"Percent_18":      3,
		"Percent_20":      4,
		"Fraction_10_110": 5,
		"Fraction_18_118": 6,
		"TaxedByAgent":    7,
		"Fraction_20_120": 8,
	}
)

func (x TaxRate) Enum() *TaxRate {
	p := new(TaxRate)
	*p = x
	return p
}

func (x TaxRate) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TaxRate) Descriptor() protoreflect.EnumDescriptor {
	return file_Full_proto_enumTypes[42].Descriptor()
}

func (TaxRate) Type() protoreflect.EnumType {
	return &file_Full_proto_enumTypes[42]
}

func (x TaxRate) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *TaxRate) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = TaxRate(num)
	return nil
}

// Deprecated: Use TaxRate.Descriptor instead.
func (TaxRate) EnumDescriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{42}
}

type ItemMark int32

const (
	ItemMark_NotSpecified   ItemMark = 0 // не указано
	ItemMark_Property       ItemMark = 1 // имущество
	ItemMark_Job            ItemMark = 2 // работа
	ItemMark_Service        ItemMark = 3 // услуга
	ItemMark_PropertyRights ItemMark = 4 // имущественные права
	ItemMark_Other          ItemMark = 5 // иное
)

// Enum value maps for ItemMark.
var (
	ItemMark_name = map[int32]string{
		0: "NotSpecified",
		1: "Property",
		2: "Job",
		3: "Service",
		4: "PropertyRights",
		5: "Other",
	}
	ItemMark_value = map[string]int32{
		"NotSpecified":   0,
		"Property":       1,
		"Job":            2,
		"Service":        3,
		"PropertyRights": 4,
		"Other":          5,
	}
)

func (x ItemMark) Enum() *ItemMark {
	p := new(ItemMark)
	*p = x
	return p
}

func (x ItemMark) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ItemMark) Descriptor() protoreflect.EnumDescriptor {
	return file_Full_proto_enumTypes[43].Descriptor()
}

func (ItemMark) Type() protoreflect.EnumType {
	return &file_Full_proto_enumTypes[43]
}

func (x ItemMark) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ItemMark) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ItemMark(num)
	return nil
}

// Deprecated: Use ItemMark.Descriptor instead.
func (ItemMark) EnumDescriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{43}
}

type OrgType int32

const (
	OrgType_LegalEntityOrgType      OrgType = 1 // Сведения о юридическом лице, состоящем на учете в налоговых органах
	OrgType_IndividualEntityOrgType OrgType = 2 // Сведения об индивидуальном предпринимателе//
	OrgType_ForeignEntityOrgType    OrgType = 3 // Сведения об иностранном лице, не состоящем на учете в налоговых органах //
)

// Enum value maps for OrgType.
var (
	OrgType_name = map[int32]string{
		1: "LegalEntityOrgType",
		2: "IndividualEntityOrgType",
		3: "ForeignEntityOrgType",
	}
	OrgType_value = map[string]int32{
		"LegalEntityOrgType":      1,
		"IndividualEntityOrgType": 2,
		"ForeignEntityOrgType":    3,
	}
)

func (x OrgType) Enum() *OrgType {
	p := new(OrgType)
	*p = x
	return p
}

func (x OrgType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OrgType) Descriptor() protoreflect.EnumDescriptor {
	return file_Full_proto_enumTypes[44].Descriptor()
}

func (OrgType) Type() protoreflect.EnumType {
	return &file_Full_proto_enumTypes[44]
}

func (x OrgType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *OrgType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = OrgType(num)
	return nil
}

// Deprecated: Use OrgType.Descriptor instead.
func (OrgType) EnumDescriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{44}
}

type Address struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RussianAddress *RussianAddress `protobuf:"bytes,1,opt,name=RussianAddress" json:"RussianAddress,omitempty"`
	ForeignAddress *ForeignAddress `protobuf:"bytes,2,opt,name=ForeignAddress" json:"ForeignAddress,omitempty"`
	AddressCode    *string         `protobuf:"bytes,3,opt,name=AddressCode" json:"AddressCode,omitempty"`
}

func (x *Address) Reset() {
	*x = Address{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Address) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Address) ProtoMessage() {}

func (x *Address) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Address.ProtoReflect.Descriptor instead.
func (*Address) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{0}
}

func (x *Address) GetRussianAddress() *RussianAddress {
	if x != nil {
		return x.RussianAddress
	}
	return nil
}

func (x *Address) GetForeignAddress() *ForeignAddress {
	if x != nil {
		return x.ForeignAddress
	}
	return nil
}

func (x *Address) GetAddressCode() string {
	if x != nil && x.AddressCode != nil {
		return *x.AddressCode
	}
	return ""
}

type RussianAddress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ZipCode   *string `protobuf:"bytes,1,opt,name=ZipCode" json:"ZipCode,omitempty"`
	Region    *string `protobuf:"bytes,2,req,name=Region" json:"Region,omitempty"`
	Territory *string `protobuf:"bytes,3,opt,name=Territory" json:"Territory,omitempty"`
	City      *string `protobuf:"bytes,4,opt,name=City" json:"City,omitempty"`
	Locality  *string `protobuf:"bytes,5,opt,name=Locality" json:"Locality,omitempty"`
	Street    *string `protobuf:"bytes,6,opt,name=Street" json:"Street,omitempty"`
	Building  *string `protobuf:"bytes,7,opt,name=Building" json:"Building,omitempty"`
	Block     *string `protobuf:"bytes,8,opt,name=Block" json:"Block,omitempty"`
	Apartment *string `protobuf:"bytes,9,opt,name=Apartment" json:"Apartment,omitempty"`
}

func (x *RussianAddress) Reset() {
	*x = RussianAddress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RussianAddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RussianAddress) ProtoMessage() {}

func (x *RussianAddress) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RussianAddress.ProtoReflect.Descriptor instead.
func (*RussianAddress) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{1}
}

func (x *RussianAddress) GetZipCode() string {
	if x != nil && x.ZipCode != nil {
		return *x.ZipCode
	}
	return ""
}

func (x *RussianAddress) GetRegion() string {
	if x != nil && x.Region != nil {
		return *x.Region
	}
	return ""
}

func (x *RussianAddress) GetTerritory() string {
	if x != nil && x.Territory != nil {
		return *x.Territory
	}
	return ""
}

func (x *RussianAddress) GetCity() string {
	if x != nil && x.City != nil {
		return *x.City
	}
	return ""
}

func (x *RussianAddress) GetLocality() string {
	if x != nil && x.Locality != nil {
		return *x.Locality
	}
	return ""
}

func (x *RussianAddress) GetStreet() string {
	if x != nil && x.Street != nil {
		return *x.Street
	}
	return ""
}

func (x *RussianAddress) GetBuilding() string {
	if x != nil && x.Building != nil {
		return *x.Building
	}
	return ""
}

func (x *RussianAddress) GetBlock() string {
	if x != nil && x.Block != nil {
		return *x.Block
	}
	return ""
}

func (x *RussianAddress) GetApartment() string {
	if x != nil && x.Apartment != nil {
		return *x.Apartment
	}
	return ""
}

type ForeignAddress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Country *string `protobuf:"bytes,1,req,name=Country" json:"Country,omitempty"`
	Address *string `protobuf:"bytes,2,req,name=Address" json:"Address,omitempty"`
}

func (x *ForeignAddress) Reset() {
	*x = ForeignAddress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ForeignAddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ForeignAddress) ProtoMessage() {}

func (x *ForeignAddress) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ForeignAddress.ProtoReflect.Descriptor instead.
func (*ForeignAddress) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{2}
}

func (x *ForeignAddress) GetCountry() string {
	if x != nil && x.Country != nil {
		return *x.Country
	}
	return ""
}

func (x *ForeignAddress) GetAddress() string {
	if x != nil && x.Address != nil {
		return *x.Address
	}
	return ""
}

type CounteragentList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalCount     *int32          `protobuf:"varint,1,req,name=TotalCount" json:"TotalCount,omitempty"`
	Counteragents  []*Counteragent `protobuf:"bytes,2,rep,name=Counteragents" json:"Counteragents,omitempty"`
	TotalCountType *TotalCountType `protobuf:"varint,3,req,name=TotalCountType,enum=TotalCountType" json:"TotalCountType,omitempty"`
}

func (x *CounteragentList) Reset() {
	*x = CounteragentList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CounteragentList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CounteragentList) ProtoMessage() {}

func (x *CounteragentList) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CounteragentList.ProtoReflect.Descriptor instead.
func (*CounteragentList) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{3}
}

func (x *CounteragentList) GetTotalCount() int32 {
	if x != nil && x.TotalCount != nil {
		return *x.TotalCount
	}
	return 0
}

func (x *CounteragentList) GetCounteragents() []*Counteragent {
	if x != nil {
		return x.Counteragents
	}
	return nil
}

func (x *CounteragentList) GetTotalCountType() TotalCountType {
	if x != nil && x.TotalCountType != nil {
		return *x.TotalCountType
	}
	return TotalCountType_UnknownCountType
}

type Counteragent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IndexKey                *string             `protobuf:"bytes,1,opt,name=IndexKey" json:"IndexKey,omitempty"`
	Organization            *Organization       `protobuf:"bytes,2,req,name=Organization" json:"Organization,omitempty"`
	CurrentStatus           *CounteragentStatus `protobuf:"varint,3,opt,name=CurrentStatus,enum=CounteragentStatus,def=0" json:"CurrentStatus,omitempty"`
	LastEventTimestampTicks *int64              `protobuf:"fixed64,4,req,name=LastEventTimestampTicks" json:"LastEventTimestampTicks,omitempty"`
	MessageFromCounteragent *string             `protobuf:"bytes,6,opt,name=MessageFromCounteragent" json:"MessageFromCounteragent,omitempty"`
	MessageToCounteragent   *string             `protobuf:"bytes,7,opt,name=MessageToCounteragent" json:"MessageToCounteragent,omitempty"`
	InvitationDocumentId    *DocumentId         `protobuf:"bytes,8,opt,name=InvitationDocumentId" json:"InvitationDocumentId,omitempty"`
}

// Default values for Counteragent fields.
const (
	Default_Counteragent_CurrentStatus = CounteragentStatus_UnknownCounteragentStatus
)

func (x *Counteragent) Reset() {
	*x = Counteragent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Counteragent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Counteragent) ProtoMessage() {}

func (x *Counteragent) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Counteragent.ProtoReflect.Descriptor instead.
func (*Counteragent) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{4}
}

func (x *Counteragent) GetIndexKey() string {
	if x != nil && x.IndexKey != nil {
		return *x.IndexKey
	}
	return ""
}

func (x *Counteragent) GetOrganization() *Organization {
	if x != nil {
		return x.Organization
	}
	return nil
}

func (x *Counteragent) GetCurrentStatus() CounteragentStatus {
	if x != nil && x.CurrentStatus != nil {
		return *x.CurrentStatus
	}
	return Default_Counteragent_CurrentStatus
}

func (x *Counteragent) GetLastEventTimestampTicks() int64 {
	if x != nil && x.LastEventTimestampTicks != nil {
		return *x.LastEventTimestampTicks
	}
	return 0
}

func (x *Counteragent) GetMessageFromCounteragent() string {
	if x != nil && x.MessageFromCounteragent != nil {
		return *x.MessageFromCounteragent
	}
	return ""
}

func (x *Counteragent) GetMessageToCounteragent() string {
	if x != nil && x.MessageToCounteragent != nil {
		return *x.MessageToCounteragent
	}
	return ""
}

func (x *Counteragent) GetInvitationDocumentId() *DocumentId {
	if x != nil {
		return x.InvitationDocumentId
	}
	return nil
}

type CounteragentCertificateList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Certificates []*Certificate `protobuf:"bytes,1,rep,name=Certificates" json:"Certificates,omitempty"`
}

func (x *CounteragentCertificateList) Reset() {
	*x = CounteragentCertificateList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CounteragentCertificateList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CounteragentCertificateList) ProtoMessage() {}

func (x *CounteragentCertificateList) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CounteragentCertificateList.ProtoReflect.Descriptor instead.
func (*CounteragentCertificateList) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{5}
}

func (x *CounteragentCertificateList) GetCertificates() []*Certificate {
	if x != nil {
		return x.Certificates
	}
	return nil
}

type Certificate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RawCertificateData []byte `protobuf:"bytes,1,req,name=RawCertificateData" json:"RawCertificateData,omitempty"`
}

func (x *Certificate) Reset() {
	*x = Certificate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Certificate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Certificate) ProtoMessage() {}

func (x *Certificate) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Certificate.ProtoReflect.Descriptor instead.
func (*Certificate) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{6}
}

func (x *Certificate) GetRawCertificateData() []byte {
	if x != nil {
		return x.RawCertificateData
	}
	return nil
}

type AcquireCounteragentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgId                 *string             `protobuf:"bytes,1,opt,name=OrgId" json:"OrgId,omitempty"`
	Inn                   *string             `protobuf:"bytes,2,opt,name=Inn" json:"Inn,omitempty"`
	MessageToCounteragent *string             `protobuf:"bytes,3,opt,name=MessageToCounteragent" json:"MessageToCounteragent,omitempty"`
	InvitationDocument    *InvitationDocument `protobuf:"bytes,4,opt,name=InvitationDocument" json:"InvitationDocument,omitempty"`
}

func (x *AcquireCounteragentRequest) Reset() {
	*x = AcquireCounteragentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AcquireCounteragentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcquireCounteragentRequest) ProtoMessage() {}

func (x *AcquireCounteragentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcquireCounteragentRequest.ProtoReflect.Descriptor instead.
func (*AcquireCounteragentRequest) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{7}
}

func (x *AcquireCounteragentRequest) GetOrgId() string {
	if x != nil && x.OrgId != nil {
		return *x.OrgId
	}
	return ""
}

func (x *AcquireCounteragentRequest) GetInn() string {
	if x != nil && x.Inn != nil {
		return *x.Inn
	}
	return ""
}

func (x *AcquireCounteragentRequest) GetMessageToCounteragent() string {
	if x != nil && x.MessageToCounteragent != nil {
		return *x.MessageToCounteragent
	}
	return ""
}

func (x *AcquireCounteragentRequest) GetInvitationDocument() *InvitationDocument {
	if x != nil {
		return x.InvitationDocument
	}
	return nil
}

type InvitationDocument struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SignedContent      *SignedContent `protobuf:"bytes,1,req,name=SignedContent" json:"SignedContent,omitempty"`
	FileName           *string        `protobuf:"bytes,2,req,name=FileName" json:"FileName,omitempty"`
	SignatureRequested *bool          `protobuf:"varint,3,opt,name=SignatureRequested,def=0" json:"SignatureRequested,omitempty"`
}

// Default values for InvitationDocument fields.
const (
	Default_InvitationDocument_SignatureRequested = bool(false)
)

func (x *InvitationDocument) Reset() {
	*x = InvitationDocument{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InvitationDocument) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InvitationDocument) ProtoMessage() {}

func (x *InvitationDocument) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InvitationDocument.ProtoReflect.Descriptor instead.
func (*InvitationDocument) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{8}
}

func (x *InvitationDocument) GetSignedContent() *SignedContent {
	if x != nil {
		return x.SignedContent
	}
	return nil
}

func (x *InvitationDocument) GetFileName() string {
	if x != nil && x.FileName != nil {
		return *x.FileName
	}
	return ""
}

func (x *InvitationDocument) GetSignatureRequested() bool {
	if x != nil && x.SignatureRequested != nil {
		return *x.SignatureRequested
	}
	return Default_InvitationDocument_SignatureRequested
}

type Department struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DepartmentId       *string  `protobuf:"bytes,1,req,name=DepartmentId" json:"DepartmentId,omitempty"`
	ParentDepartmentId *string  `protobuf:"bytes,2,req,name=ParentDepartmentId" json:"ParentDepartmentId,omitempty"`
	Name               *string  `protobuf:"bytes,3,req,name=Name" json:"Name,omitempty"`
	Abbreviation       *string  `protobuf:"bytes,4,opt,name=Abbreviation" json:"Abbreviation,omitempty"`
	Kpp                *string  `protobuf:"bytes,5,opt,name=Kpp" json:"Kpp,omitempty"`
	Address            *Address `protobuf:"bytes,6,opt,name=Address" json:"Address,omitempty"`
}

func (x *Department) Reset() {
	*x = Department{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Department) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Department) ProtoMessage() {}

func (x *Department) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Department.ProtoReflect.Descriptor instead.
func (*Department) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{9}
}

func (x *Department) GetDepartmentId() string {
	if x != nil && x.DepartmentId != nil {
		return *x.DepartmentId
	}
	return ""
}

func (x *Department) GetParentDepartmentId() string {
	if x != nil && x.ParentDepartmentId != nil {
		return *x.ParentDepartmentId
	}
	return ""
}

func (x *Department) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *Department) GetAbbreviation() string {
	if x != nil && x.Abbreviation != nil {
		return *x.Abbreviation
	}
	return ""
}

func (x *Department) GetKpp() string {
	if x != nil && x.Kpp != nil {
		return *x.Kpp
	}
	return ""
}

func (x *Department) GetAddress() *Address {
	if x != nil {
		return x.Address
	}
	return nil
}

type DepartmentAdmin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                 *string    `protobuf:"bytes,1,req,name=Id" json:"Id,omitempty"`
	ParentDepartmentId *string    `protobuf:"bytes,2,opt,name=ParentDepartmentId" json:"ParentDepartmentId,omitempty"`
	Name               *string    `protobuf:"bytes,3,req,name=Name" json:"Name,omitempty"`
	Abbreviation       *string    `protobuf:"bytes,4,req,name=Abbreviation" json:"Abbreviation,omitempty"`
	Kpp                *string    `protobuf:"bytes,5,opt,name=Kpp" json:"Kpp,omitempty"`
	Address            *Address   `protobuf:"bytes,6,opt,name=Address" json:"Address,omitempty"`
	Routing            *Routing   `protobuf:"bytes,7,req,name=Routing" json:"Routing,omitempty"`
	CreationTimestamp  *Timestamp `protobuf:"bytes,8,req,name=CreationTimestamp" json:"CreationTimestamp,omitempty"`
}

func (x *DepartmentAdmin) Reset() {
	*x = DepartmentAdmin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DepartmentAdmin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DepartmentAdmin) ProtoMessage() {}

func (x *DepartmentAdmin) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DepartmentAdmin.ProtoReflect.Descriptor instead.
func (*DepartmentAdmin) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{10}
}

func (x *DepartmentAdmin) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *DepartmentAdmin) GetParentDepartmentId() string {
	if x != nil && x.ParentDepartmentId != nil {
		return *x.ParentDepartmentId
	}
	return ""
}

func (x *DepartmentAdmin) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *DepartmentAdmin) GetAbbreviation() string {
	if x != nil && x.Abbreviation != nil {
		return *x.Abbreviation
	}
	return ""
}

func (x *DepartmentAdmin) GetKpp() string {
	if x != nil && x.Kpp != nil {
		return *x.Kpp
	}
	return ""
}

func (x *DepartmentAdmin) GetAddress() *Address {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *DepartmentAdmin) GetRouting() *Routing {
	if x != nil {
		return x.Routing
	}
	return nil
}

func (x *DepartmentAdmin) GetCreationTimestamp() *Timestamp {
	if x != nil {
		return x.CreationTimestamp
	}
	return nil
}

type DepartmentList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Departments []*DepartmentAdmin `protobuf:"bytes,1,rep,name=Departments" json:"Departments,omitempty"`
	TotalCount  *int32             `protobuf:"varint,2,req,name=TotalCount" json:"TotalCount,omitempty"` // Общее кол-во подразделений
}

func (x *DepartmentList) Reset() {
	*x = DepartmentList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DepartmentList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DepartmentList) ProtoMessage() {}

func (x *DepartmentList) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DepartmentList.ProtoReflect.Descriptor instead.
func (*DepartmentList) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{11}
}

func (x *DepartmentList) GetDepartments() []*DepartmentAdmin {
	if x != nil {
		return x.Departments
	}
	return nil
}

func (x *DepartmentList) GetTotalCount() int32 {
	if x != nil && x.TotalCount != nil {
		return *x.TotalCount
	}
	return 0
}

type Routing struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Kpp     *bool `protobuf:"varint,1,req,name=Kpp" json:"Kpp,omitempty"`
	Address *bool `protobuf:"varint,2,req,name=Address" json:"Address,omitempty"`
}

func (x *Routing) Reset() {
	*x = Routing{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Routing) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Routing) ProtoMessage() {}

func (x *Routing) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Routing.ProtoReflect.Descriptor instead.
func (*Routing) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{12}
}

func (x *Routing) GetKpp() bool {
	if x != nil && x.Kpp != nil {
		return *x.Kpp
	}
	return false
}

func (x *Routing) GetAddress() bool {
	if x != nil && x.Address != nil {
		return *x.Address
	}
	return false
}

type DepartmentToCreate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ParentDepartmentId *string  `protobuf:"bytes,1,opt,name=ParentDepartmentId" json:"ParentDepartmentId,omitempty"`
	Name               *string  `protobuf:"bytes,2,req,name=Name" json:"Name,omitempty"`
	Abbreviation       *string  `protobuf:"bytes,3,req,name=Abbreviation" json:"Abbreviation,omitempty"`
	Kpp                *string  `protobuf:"bytes,4,opt,name=Kpp" json:"Kpp,omitempty"`
	Address            *Address `protobuf:"bytes,5,opt,name=Address" json:"Address,omitempty"`
	Routing            *Routing `protobuf:"bytes,6,req,name=Routing" json:"Routing,omitempty"`
}

func (x *DepartmentToCreate) Reset() {
	*x = DepartmentToCreate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DepartmentToCreate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DepartmentToCreate) ProtoMessage() {}

func (x *DepartmentToCreate) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DepartmentToCreate.ProtoReflect.Descriptor instead.
func (*DepartmentToCreate) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{13}
}

func (x *DepartmentToCreate) GetParentDepartmentId() string {
	if x != nil && x.ParentDepartmentId != nil {
		return *x.ParentDepartmentId
	}
	return ""
}

func (x *DepartmentToCreate) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *DepartmentToCreate) GetAbbreviation() string {
	if x != nil && x.Abbreviation != nil {
		return *x.Abbreviation
	}
	return ""
}

func (x *DepartmentToCreate) GetKpp() string {
	if x != nil && x.Kpp != nil {
		return *x.Kpp
	}
	return ""
}

func (x *DepartmentToCreate) GetAddress() *Address {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *DepartmentToCreate) GetRouting() *Routing {
	if x != nil {
		return x.Routing
	}
	return nil
}

type DepartmentToUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ParentDepartment *ParentDepartmentPatch  `protobuf:"bytes,1,opt,name=ParentDepartment" json:"ParentDepartment,omitempty"`
	DepartmentNaming *DepartmentNamingPatch  `protobuf:"bytes,2,opt,name=DepartmentNaming" json:"DepartmentNaming,omitempty"`
	Kpp              *DepartmentKppPatch     `protobuf:"bytes,3,opt,name=Kpp" json:"Kpp,omitempty"`
	Address          *DepartmentAddressPatch `protobuf:"bytes,4,opt,name=Address" json:"Address,omitempty"`
	Routing          *DepartmentRoutingPatch `protobuf:"bytes,5,opt,name=Routing" json:"Routing,omitempty"`
}

func (x *DepartmentToUpdate) Reset() {
	*x = DepartmentToUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DepartmentToUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DepartmentToUpdate) ProtoMessage() {}

func (x *DepartmentToUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DepartmentToUpdate.ProtoReflect.Descriptor instead.
func (*DepartmentToUpdate) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{14}
}

func (x *DepartmentToUpdate) GetParentDepartment() *ParentDepartmentPatch {
	if x != nil {
		return x.ParentDepartment
	}
	return nil
}

func (x *DepartmentToUpdate) GetDepartmentNaming() *DepartmentNamingPatch {
	if x != nil {
		return x.DepartmentNaming
	}
	return nil
}

func (x *DepartmentToUpdate) GetKpp() *DepartmentKppPatch {
	if x != nil {
		return x.Kpp
	}
	return nil
}

func (x *DepartmentToUpdate) GetAddress() *DepartmentAddressPatch {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *DepartmentToUpdate) GetRouting() *DepartmentRoutingPatch {
	if x != nil {
		return x.Routing
	}
	return nil
}

type ParentDepartmentPatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ParentDepartmentId *string `protobuf:"bytes,1,req,name=ParentDepartmentId" json:"ParentDepartmentId,omitempty"`
}

func (x *ParentDepartmentPatch) Reset() {
	*x = ParentDepartmentPatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParentDepartmentPatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParentDepartmentPatch) ProtoMessage() {}

func (x *ParentDepartmentPatch) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParentDepartmentPatch.ProtoReflect.Descriptor instead.
func (*ParentDepartmentPatch) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{15}
}

func (x *ParentDepartmentPatch) GetParentDepartmentId() string {
	if x != nil && x.ParentDepartmentId != nil {
		return *x.ParentDepartmentId
	}
	return ""
}

type DepartmentNamingPatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name         *string `protobuf:"bytes,1,req,name=Name" json:"Name,omitempty"`
	Abbreviation *string `protobuf:"bytes,2,req,name=Abbreviation" json:"Abbreviation,omitempty"`
}

func (x *DepartmentNamingPatch) Reset() {
	*x = DepartmentNamingPatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DepartmentNamingPatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DepartmentNamingPatch) ProtoMessage() {}

func (x *DepartmentNamingPatch) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DepartmentNamingPatch.ProtoReflect.Descriptor instead.
func (*DepartmentNamingPatch) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{16}
}

func (x *DepartmentNamingPatch) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *DepartmentNamingPatch) GetAbbreviation() string {
	if x != nil && x.Abbreviation != nil {
		return *x.Abbreviation
	}
	return ""
}

type DepartmentKppPatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Kpp *string `protobuf:"bytes,1,opt,name=Kpp" json:"Kpp,omitempty"`
}

func (x *DepartmentKppPatch) Reset() {
	*x = DepartmentKppPatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DepartmentKppPatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DepartmentKppPatch) ProtoMessage() {}

func (x *DepartmentKppPatch) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DepartmentKppPatch.ProtoReflect.Descriptor instead.
func (*DepartmentKppPatch) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{17}
}

func (x *DepartmentKppPatch) GetKpp() string {
	if x != nil && x.Kpp != nil {
		return *x.Kpp
	}
	return ""
}

type DepartmentAddressPatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address *Address `protobuf:"bytes,1,opt,name=Address" json:"Address,omitempty"`
}

func (x *DepartmentAddressPatch) Reset() {
	*x = DepartmentAddressPatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DepartmentAddressPatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DepartmentAddressPatch) ProtoMessage() {}

func (x *DepartmentAddressPatch) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DepartmentAddressPatch.ProtoReflect.Descriptor instead.
func (*DepartmentAddressPatch) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{18}
}

func (x *DepartmentAddressPatch) GetAddress() *Address {
	if x != nil {
		return x.Address
	}
	return nil
}

type DepartmentRoutingPatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Kpp     *bool `protobuf:"varint,1,req,name=Kpp" json:"Kpp,omitempty"`
	Address *bool `protobuf:"varint,2,req,name=Address" json:"Address,omitempty"`
}

func (x *DepartmentRoutingPatch) Reset() {
	*x = DepartmentRoutingPatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DepartmentRoutingPatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DepartmentRoutingPatch) ProtoMessage() {}

func (x *DepartmentRoutingPatch) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DepartmentRoutingPatch.ProtoReflect.Descriptor instead.
func (*DepartmentRoutingPatch) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{19}
}

func (x *DepartmentRoutingPatch) GetKpp() bool {
	if x != nil && x.Kpp != nil {
		return *x.Kpp
	}
	return false
}

func (x *DepartmentRoutingPatch) GetAddress() bool {
	if x != nil && x.Address != nil {
		return *x.Address
	}
	return false
}

type DocumentId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MessageId *string `protobuf:"bytes,1,req,name=MessageId" json:"MessageId,omitempty"`
	EntityId  *string `protobuf:"bytes,2,req,name=EntityId" json:"EntityId,omitempty"`
}

func (x *DocumentId) Reset() {
	*x = DocumentId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DocumentId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DocumentId) ProtoMessage() {}

func (x *DocumentId) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DocumentId.ProtoReflect.Descriptor instead.
func (*DocumentId) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{20}
}

func (x *DocumentId) GetMessageId() string {
	if x != nil && x.MessageId != nil {
		return *x.MessageId
	}
	return ""
}

func (x *DocumentId) GetEntityId() string {
	if x != nil && x.EntityId != nil {
		return *x.EntityId
	}
	return ""
}

type Employee struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User                *UserV2              `protobuf:"bytes,1,req,name=User" json:"User,omitempty"`
	Permissions         *EmployeePermissions `protobuf:"bytes,2,req,name=Permissions" json:"Permissions,omitempty"`
	Position            *string              `protobuf:"bytes,3,req,name=Position" json:"Position,omitempty"`
	CanBeInvitedForChat *bool                `protobuf:"varint,4,req,name=CanBeInvitedForChat" json:"CanBeInvitedForChat,omitempty"`
	CreationTimestamp   *Timestamp           `protobuf:"bytes,5,opt,name=CreationTimestamp" json:"CreationTimestamp,omitempty"`
}

func (x *Employee) Reset() {
	*x = Employee{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Employee) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Employee) ProtoMessage() {}

func (x *Employee) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Employee.ProtoReflect.Descriptor instead.
func (*Employee) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{21}
}

func (x *Employee) GetUser() *UserV2 {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *Employee) GetPermissions() *EmployeePermissions {
	if x != nil {
		return x.Permissions
	}
	return nil
}

func (x *Employee) GetPosition() string {
	if x != nil && x.Position != nil {
		return *x.Position
	}
	return ""
}

func (x *Employee) GetCanBeInvitedForChat() bool {
	if x != nil && x.CanBeInvitedForChat != nil {
		return *x.CanBeInvitedForChat
	}
	return false
}

func (x *Employee) GetCreationTimestamp() *Timestamp {
	if x != nil {
		return x.CreationTimestamp
	}
	return nil
}

type EmployeePermissions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserDepartmentId        *string                  `protobuf:"bytes,1,req,name=UserDepartmentId" json:"UserDepartmentId,omitempty"`
	IsAdministrator         *bool                    `protobuf:"varint,2,req,name=IsAdministrator" json:"IsAdministrator,omitempty"`
	DocumentAccessLevel     *DocumentAccessLevel     `protobuf:"varint,3,req,name=DocumentAccessLevel,enum=DocumentAccessLevel,def=-1" json:"DocumentAccessLevel,omitempty"`
	SelectedDepartmentIds   []string                 `protobuf:"bytes,4,rep,name=SelectedDepartmentIds" json:"SelectedDepartmentIds,omitempty"`
	Actions                 []*EmployeeAction        `protobuf:"bytes,5,rep,name=Actions" json:"Actions,omitempty"`
	AuthorizationPermission *AuthorizationPermission `protobuf:"bytes,6,opt,name=AuthorizationPermission" json:"AuthorizationPermission,omitempty"`
}

// Default values for EmployeePermissions fields.
const (
	Default_EmployeePermissions_DocumentAccessLevel = DocumentAccessLevel_UnknownDocumentAccessLevel
)

func (x *EmployeePermissions) Reset() {
	*x = EmployeePermissions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmployeePermissions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmployeePermissions) ProtoMessage() {}

func (x *EmployeePermissions) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmployeePermissions.ProtoReflect.Descriptor instead.
func (*EmployeePermissions) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{22}
}

func (x *EmployeePermissions) GetUserDepartmentId() string {
	if x != nil && x.UserDepartmentId != nil {
		return *x.UserDepartmentId
	}
	return ""
}

func (x *EmployeePermissions) GetIsAdministrator() bool {
	if x != nil && x.IsAdministrator != nil {
		return *x.IsAdministrator
	}
	return false
}

func (x *EmployeePermissions) GetDocumentAccessLevel() DocumentAccessLevel {
	if x != nil && x.DocumentAccessLevel != nil {
		return *x.DocumentAccessLevel
	}
	return Default_EmployeePermissions_DocumentAccessLevel
}

func (x *EmployeePermissions) GetSelectedDepartmentIds() []string {
	if x != nil {
		return x.SelectedDepartmentIds
	}
	return nil
}

func (x *EmployeePermissions) GetActions() []*EmployeeAction {
	if x != nil {
		return x.Actions
	}
	return nil
}

func (x *EmployeePermissions) GetAuthorizationPermission() *AuthorizationPermission {
	if x != nil {
		return x.AuthorizationPermission
	}
	return nil
}

type EmployeeAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name      *string `protobuf:"bytes,1,req,name=Name" json:"Name,omitempty"`
	IsAllowed *bool   `protobuf:"varint,2,req,name=IsAllowed" json:"IsAllowed,omitempty"`
}

func (x *EmployeeAction) Reset() {
	*x = EmployeeAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmployeeAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmployeeAction) ProtoMessage() {}

func (x *EmployeeAction) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmployeeAction.ProtoReflect.Descriptor instead.
func (*EmployeeAction) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{23}
}

func (x *EmployeeAction) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *EmployeeAction) GetIsAllowed() bool {
	if x != nil && x.IsAllowed != nil {
		return *x.IsAllowed
	}
	return false
}

type AuthorizationPermission struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsBlocked *bool   `protobuf:"varint,1,req,name=IsBlocked" json:"IsBlocked,omitempty"`
	Comment   *string `protobuf:"bytes,2,opt,name=Comment" json:"Comment,omitempty"`
}

func (x *AuthorizationPermission) Reset() {
	*x = AuthorizationPermission{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthorizationPermission) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthorizationPermission) ProtoMessage() {}

func (x *AuthorizationPermission) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthorizationPermission.ProtoReflect.Descriptor instead.
func (*AuthorizationPermission) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{24}
}

func (x *AuthorizationPermission) GetIsBlocked() bool {
	if x != nil && x.IsBlocked != nil {
		return *x.IsBlocked
	}
	return false
}

func (x *AuthorizationPermission) GetComment() string {
	if x != nil && x.Comment != nil {
		return *x.Comment
	}
	return ""
}

type UserV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId       *string   `protobuf:"bytes,1,req,name=UserId" json:"UserId,omitempty"`
	Login        *string   `protobuf:"bytes,2,opt,name=Login" json:"Login,omitempty"`
	FullName     *FullName `protobuf:"bytes,3,opt,name=FullName" json:"FullName,omitempty"`
	IsRegistered *bool     `protobuf:"varint,4,req,name=IsRegistered" json:"IsRegistered,omitempty"`
}

func (x *UserV2) Reset() {
	*x = UserV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserV2) ProtoMessage() {}

func (x *UserV2) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserV2.ProtoReflect.Descriptor instead.
func (*UserV2) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{25}
}

func (x *UserV2) GetUserId() string {
	if x != nil && x.UserId != nil {
		return *x.UserId
	}
	return ""
}

func (x *UserV2) GetLogin() string {
	if x != nil && x.Login != nil {
		return *x.Login
	}
	return ""
}

func (x *UserV2) GetFullName() *FullName {
	if x != nil {
		return x.FullName
	}
	return nil
}

func (x *UserV2) GetIsRegistered() bool {
	if x != nil && x.IsRegistered != nil {
		return *x.IsRegistered
	}
	return false
}

type FullName struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LastName   *string `protobuf:"bytes,1,req,name=LastName" json:"LastName,omitempty"`
	FirstName  *string `protobuf:"bytes,2,req,name=FirstName" json:"FirstName,omitempty"`
	MiddleName *string `protobuf:"bytes,3,opt,name=MiddleName" json:"MiddleName,omitempty"`
}

func (x *FullName) Reset() {
	*x = FullName{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FullName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FullName) ProtoMessage() {}

func (x *FullName) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FullName.ProtoReflect.Descriptor instead.
func (*FullName) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{26}
}

func (x *FullName) GetLastName() string {
	if x != nil && x.LastName != nil {
		return *x.LastName
	}
	return ""
}

func (x *FullName) GetFirstName() string {
	if x != nil && x.FirstName != nil {
		return *x.FirstName
	}
	return ""
}

func (x *FullName) GetMiddleName() string {
	if x != nil && x.MiddleName != nil {
		return *x.MiddleName
	}
	return ""
}

type EmployeeList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Employees  []*Employee `protobuf:"bytes,1,rep,name=Employees" json:"Employees,omitempty"`
	TotalCount *int32      `protobuf:"varint,2,req,name=TotalCount" json:"TotalCount,omitempty"`
}

func (x *EmployeeList) Reset() {
	*x = EmployeeList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmployeeList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmployeeList) ProtoMessage() {}

func (x *EmployeeList) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmployeeList.ProtoReflect.Descriptor instead.
func (*EmployeeList) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{27}
}

func (x *EmployeeList) GetEmployees() []*Employee {
	if x != nil {
		return x.Employees
	}
	return nil
}

func (x *EmployeeList) GetTotalCount() int32 {
	if x != nil && x.TotalCount != nil {
		return *x.TotalCount
	}
	return 0
}

type User struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                *string            `protobuf:"bytes,1,opt,name=Id" json:"Id,omitempty"`
	LastName          *string            `protobuf:"bytes,2,opt,name=LastName" json:"LastName,omitempty"`
	FirstName         *string            `protobuf:"bytes,3,opt,name=FirstName" json:"FirstName,omitempty"`
	MiddleName        *string            `protobuf:"bytes,4,opt,name=MiddleName" json:"MiddleName,omitempty"`
	CloudCertificates []*CertificateInfo `protobuf:"bytes,5,rep,name=CloudCertificates" json:"CloudCertificates,omitempty"`
}

func (x *User) Reset() {
	*x = User{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *User) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User) ProtoMessage() {}

func (x *User) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User.ProtoReflect.Descriptor instead.
func (*User) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{28}
}

func (x *User) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *User) GetLastName() string {
	if x != nil && x.LastName != nil {
		return *x.LastName
	}
	return ""
}

func (x *User) GetFirstName() string {
	if x != nil && x.FirstName != nil {
		return *x.FirstName
	}
	return ""
}

func (x *User) GetMiddleName() string {
	if x != nil && x.MiddleName != nil {
		return *x.MiddleName
	}
	return ""
}

func (x *User) GetCloudCertificates() []*CertificateInfo {
	if x != nil {
		return x.CloudCertificates
	}
	return nil
}

type CertificateInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Thumbprint       *string `protobuf:"bytes,1,opt,name=Thumbprint" json:"Thumbprint,omitempty"`
	ValidFrom        *int64  `protobuf:"fixed64,2,opt,name=ValidFrom" json:"ValidFrom,omitempty"`
	ValidTo          *int64  `protobuf:"fixed64,3,opt,name=ValidTo" json:"ValidTo,omitempty"`
	OrganizationName *string `protobuf:"bytes,4,opt,name=OrganizationName" json:"OrganizationName,omitempty"`
	Inn              *string `protobuf:"bytes,5,opt,name=Inn" json:"Inn,omitempty"`
}

func (x *CertificateInfo) Reset() {
	*x = CertificateInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CertificateInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CertificateInfo) ProtoMessage() {}

func (x *CertificateInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CertificateInfo.ProtoReflect.Descriptor instead.
func (*CertificateInfo) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{29}
}

func (x *CertificateInfo) GetThumbprint() string {
	if x != nil && x.Thumbprint != nil {
		return *x.Thumbprint
	}
	return ""
}

func (x *CertificateInfo) GetValidFrom() int64 {
	if x != nil && x.ValidFrom != nil {
		return *x.ValidFrom
	}
	return 0
}

func (x *CertificateInfo) GetValidTo() int64 {
	if x != nil && x.ValidTo != nil {
		return *x.ValidTo
	}
	return 0
}

func (x *CertificateInfo) GetOrganizationName() string {
	if x != nil && x.OrganizationName != nil {
		return *x.OrganizationName
	}
	return ""
}

func (x *CertificateInfo) GetInn() string {
	if x != nil && x.Inn != nil {
		return *x.Inn
	}
	return ""
}

type OrganizationUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          *string                      `protobuf:"bytes,1,req,name=Id" json:"Id,omitempty"`
	Name        *string                      `protobuf:"bytes,2,req,name=Name" json:"Name,omitempty"` // ФИО сотрудника
	Permissions *OrganizationUserPermissions `protobuf:"bytes,3,req,name=Permissions" json:"Permissions,omitempty"`
	Position    *string                      `protobuf:"bytes,4,req,name=Position" json:"Position,omitempty"`
}

func (x *OrganizationUser) Reset() {
	*x = OrganizationUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrganizationUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrganizationUser) ProtoMessage() {}

func (x *OrganizationUser) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrganizationUser.ProtoReflect.Descriptor instead.
func (*OrganizationUser) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{30}
}

func (x *OrganizationUser) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *OrganizationUser) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *OrganizationUser) GetPermissions() *OrganizationUserPermissions {
	if x != nil {
		return x.Permissions
	}
	return nil
}

func (x *OrganizationUser) GetPosition() string {
	if x != nil && x.Position != nil {
		return *x.Position
	}
	return ""
}

type OrganizationUsersList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Users []*OrganizationUser `protobuf:"bytes,1,rep,name=Users" json:"Users,omitempty"`
}

func (x *OrganizationUsersList) Reset() {
	*x = OrganizationUsersList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrganizationUsersList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrganizationUsersList) ProtoMessage() {}

func (x *OrganizationUsersList) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrganizationUsersList.ProtoReflect.Descriptor instead.
func (*OrganizationUsersList) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{31}
}

func (x *OrganizationUsersList) GetUsers() []*OrganizationUser {
	if x != nil {
		return x.Users
	}
	return nil
}

type OrganizationUserPermissions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserDepartmentId          *string                  `protobuf:"bytes,1,req,name=UserDepartmentId" json:"UserDepartmentId,omitempty"`
	IsAdministrator           *bool                    `protobuf:"varint,2,req,name=IsAdministrator" json:"IsAdministrator,omitempty"`
	DocumentAccessLevel       *DocumentAccessLevel     `protobuf:"varint,3,opt,name=DocumentAccessLevel,enum=DocumentAccessLevel,def=-1" json:"DocumentAccessLevel,omitempty"`
	CanSignDocuments          *bool                    `protobuf:"varint,4,req,name=CanSignDocuments" json:"CanSignDocuments,omitempty"`
	CanManageCounteragents    *bool                    `protobuf:"varint,6,req,name=CanManageCounteragents" json:"CanManageCounteragents,omitempty"`
	CanAddResolutions         *bool                    `protobuf:"varint,7,req,name=CanAddResolutions" json:"CanAddResolutions,omitempty"`
	CanRequestResolutions     *bool                    `protobuf:"varint,8,req,name=CanRequestResolutions" json:"CanRequestResolutions,omitempty"`
	SelectedDepartmentIds     []string                 `protobuf:"bytes,9,rep,name=SelectedDepartmentIds" json:"SelectedDepartmentIds,omitempty"`
	JobTitle                  *string                  `protobuf:"bytes,10,opt,name=JobTitle" json:"JobTitle,omitempty"`
	CanCreateDocuments        *bool                    `protobuf:"varint,11,req,name=CanCreateDocuments" json:"CanCreateDocuments,omitempty"`
	AuthorizationPermission   *AuthorizationPermission `protobuf:"bytes,12,req,name=AuthorizationPermission" json:"AuthorizationPermission,omitempty"`
	CanDeleteRestoreDocuments *bool                    `protobuf:"varint,13,req,name=CanDeleteRestoreDocuments" json:"CanDeleteRestoreDocuments,omitempty"`
}

// Default values for OrganizationUserPermissions fields.
const (
	Default_OrganizationUserPermissions_DocumentAccessLevel = DocumentAccessLevel_UnknownDocumentAccessLevel
)

func (x *OrganizationUserPermissions) Reset() {
	*x = OrganizationUserPermissions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrganizationUserPermissions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrganizationUserPermissions) ProtoMessage() {}

func (x *OrganizationUserPermissions) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrganizationUserPermissions.ProtoReflect.Descriptor instead.
func (*OrganizationUserPermissions) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{32}
}

func (x *OrganizationUserPermissions) GetUserDepartmentId() string {
	if x != nil && x.UserDepartmentId != nil {
		return *x.UserDepartmentId
	}
	return ""
}

func (x *OrganizationUserPermissions) GetIsAdministrator() bool {
	if x != nil && x.IsAdministrator != nil {
		return *x.IsAdministrator
	}
	return false
}

func (x *OrganizationUserPermissions) GetDocumentAccessLevel() DocumentAccessLevel {
	if x != nil && x.DocumentAccessLevel != nil {
		return *x.DocumentAccessLevel
	}
	return Default_OrganizationUserPermissions_DocumentAccessLevel
}

func (x *OrganizationUserPermissions) GetCanSignDocuments() bool {
	if x != nil && x.CanSignDocuments != nil {
		return *x.CanSignDocuments
	}
	return false
}

func (x *OrganizationUserPermissions) GetCanManageCounteragents() bool {
	if x != nil && x.CanManageCounteragents != nil {
		return *x.CanManageCounteragents
	}
	return false
}

func (x *OrganizationUserPermissions) GetCanAddResolutions() bool {
	if x != nil && x.CanAddResolutions != nil {
		return *x.CanAddResolutions
	}
	return false
}

func (x *OrganizationUserPermissions) GetCanRequestResolutions() bool {
	if x != nil && x.CanRequestResolutions != nil {
		return *x.CanRequestResolutions
	}
	return false
}

func (x *OrganizationUserPermissions) GetSelectedDepartmentIds() []string {
	if x != nil {
		return x.SelectedDepartmentIds
	}
	return nil
}

func (x *OrganizationUserPermissions) GetJobTitle() string {
	if x != nil && x.JobTitle != nil {
		return *x.JobTitle
	}
	return ""
}

func (x *OrganizationUserPermissions) GetCanCreateDocuments() bool {
	if x != nil && x.CanCreateDocuments != nil {
		return *x.CanCreateDocuments
	}
	return false
}

func (x *OrganizationUserPermissions) GetAuthorizationPermission() *AuthorizationPermission {
	if x != nil {
		return x.AuthorizationPermission
	}
	return nil
}

func (x *OrganizationUserPermissions) GetCanDeleteRestoreDocuments() bool {
	if x != nil && x.CanDeleteRestoreDocuments != nil {
		return *x.CanDeleteRestoreDocuments
	}
	return false
}

type EmployeeSubscriptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Subscriptions []*Subscription `protobuf:"bytes,1,rep,name=Subscriptions" json:"Subscriptions,omitempty"`
}

func (x *EmployeeSubscriptions) Reset() {
	*x = EmployeeSubscriptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmployeeSubscriptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmployeeSubscriptions) ProtoMessage() {}

func (x *EmployeeSubscriptions) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmployeeSubscriptions.ProtoReflect.Descriptor instead.
func (*EmployeeSubscriptions) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{33}
}

func (x *EmployeeSubscriptions) GetSubscriptions() []*Subscription {
	if x != nil {
		return x.Subscriptions
	}
	return nil
}

type Subscription struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           *string `protobuf:"bytes,1,req,name=Id" json:"Id,omitempty"`
	IsSubscribed *bool   `protobuf:"varint,2,req,name=IsSubscribed" json:"IsSubscribed,omitempty"`
}

func (x *Subscription) Reset() {
	*x = Subscription{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Subscription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Subscription) ProtoMessage() {}

func (x *Subscription) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Subscription.ProtoReflect.Descriptor instead.
func (*Subscription) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{34}
}

func (x *Subscription) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *Subscription) GetIsSubscribed() bool {
	if x != nil && x.IsSubscribed != nil {
		return *x.IsSubscribed
	}
	return false
}

type SubscriptionsToUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Subscriptions []*Subscription `protobuf:"bytes,1,rep,name=Subscriptions" json:"Subscriptions,omitempty"`
}

func (x *SubscriptionsToUpdate) Reset() {
	*x = SubscriptionsToUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscriptionsToUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscriptionsToUpdate) ProtoMessage() {}

func (x *SubscriptionsToUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscriptionsToUpdate.ProtoReflect.Descriptor instead.
func (*SubscriptionsToUpdate) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{35}
}

func (x *SubscriptionsToUpdate) GetSubscriptions() []*Subscription {
	if x != nil {
		return x.Subscriptions
	}
	return nil
}

type CertificateList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Certificates []*CertificateInfoV2 `protobuf:"bytes,1,rep,name=Certificates" json:"Certificates,omitempty"`
}

func (x *CertificateList) Reset() {
	*x = CertificateList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CertificateList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CertificateList) ProtoMessage() {}

func (x *CertificateList) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CertificateList.ProtoReflect.Descriptor instead.
func (*CertificateList) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{36}
}

func (x *CertificateList) GetCertificates() []*CertificateInfoV2 {
	if x != nil {
		return x.Certificates
	}
	return nil
}

type CertificateInfoV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Thumbprint          *string                 `protobuf:"bytes,1,req,name=Thumbprint" json:"Thumbprint,omitempty"`
	Type                *CertificateType        `protobuf:"varint,2,req,name=Type,enum=CertificateType" json:"Type,omitempty"`
	ValidFrom           *int64                  `protobuf:"fixed64,3,opt,name=ValidFrom" json:"ValidFrom,omitempty"`
	ValidTo             *int64                  `protobuf:"fixed64,4,opt,name=ValidTo" json:"ValidTo,omitempty"`
	PrivateKeyValidFrom *int64                  `protobuf:"fixed64,5,opt,name=PrivateKeyValidFrom" json:"PrivateKeyValidFrom,omitempty"`
	PrivateKeyValidTo   *int64                  `protobuf:"fixed64,6,opt,name=PrivateKeyValidTo" json:"PrivateKeyValidTo,omitempty"`
	OrganizationName    *string                 `protobuf:"bytes,7,opt,name=OrganizationName" json:"OrganizationName,omitempty"`
	Inn                 *string                 `protobuf:"bytes,8,opt,name=Inn" json:"Inn,omitempty"`
	UserFirstName       *string                 `protobuf:"bytes,9,opt,name=UserFirstName" json:"UserFirstName,omitempty"`
	UserMiddleName      *string                 `protobuf:"bytes,10,opt,name=UserMiddleName" json:"UserMiddleName,omitempty"`
	UserLastName        *string                 `protobuf:"bytes,11,opt,name=UserLastName" json:"UserLastName,omitempty"`
	UserShortName       *string                 `protobuf:"bytes,12,opt,name=UserShortName" json:"UserShortName,omitempty"`
	IsDefault           *bool                   `protobuf:"varint,13,opt,name=IsDefault" json:"IsDefault,omitempty"`
	SubjectType         *CertificateSubjectType `protobuf:"varint,14,opt,name=SubjectType,enum=CertificateSubjectType" json:"SubjectType,omitempty"`
}

func (x *CertificateInfoV2) Reset() {
	*x = CertificateInfoV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CertificateInfoV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CertificateInfoV2) ProtoMessage() {}

func (x *CertificateInfoV2) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CertificateInfoV2.ProtoReflect.Descriptor instead.
func (*CertificateInfoV2) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{37}
}

func (x *CertificateInfoV2) GetThumbprint() string {
	if x != nil && x.Thumbprint != nil {
		return *x.Thumbprint
	}
	return ""
}

func (x *CertificateInfoV2) GetType() CertificateType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return CertificateType_Unknown
}

func (x *CertificateInfoV2) GetValidFrom() int64 {
	if x != nil && x.ValidFrom != nil {
		return *x.ValidFrom
	}
	return 0
}

func (x *CertificateInfoV2) GetValidTo() int64 {
	if x != nil && x.ValidTo != nil {
		return *x.ValidTo
	}
	return 0
}

func (x *CertificateInfoV2) GetPrivateKeyValidFrom() int64 {
	if x != nil && x.PrivateKeyValidFrom != nil {
		return *x.PrivateKeyValidFrom
	}
	return 0
}

func (x *CertificateInfoV2) GetPrivateKeyValidTo() int64 {
	if x != nil && x.PrivateKeyValidTo != nil {
		return *x.PrivateKeyValidTo
	}
	return 0
}

func (x *CertificateInfoV2) GetOrganizationName() string {
	if x != nil && x.OrganizationName != nil {
		return *x.OrganizationName
	}
	return ""
}

func (x *CertificateInfoV2) GetInn() string {
	if x != nil && x.Inn != nil {
		return *x.Inn
	}
	return ""
}

func (x *CertificateInfoV2) GetUserFirstName() string {
	if x != nil && x.UserFirstName != nil {
		return *x.UserFirstName
	}
	return ""
}

func (x *CertificateInfoV2) GetUserMiddleName() string {
	if x != nil && x.UserMiddleName != nil {
		return *x.UserMiddleName
	}
	return ""
}

func (x *CertificateInfoV2) GetUserLastName() string {
	if x != nil && x.UserLastName != nil {
		return *x.UserLastName
	}
	return ""
}

func (x *CertificateInfoV2) GetUserShortName() string {
	if x != nil && x.UserShortName != nil {
		return *x.UserShortName
	}
	return ""
}

func (x *CertificateInfoV2) GetIsDefault() bool {
	if x != nil && x.IsDefault != nil {
		return *x.IsDefault
	}
	return false
}

func (x *CertificateInfoV2) GetSubjectType() CertificateSubjectType {
	if x != nil && x.SubjectType != nil {
		return *x.SubjectType
	}
	return CertificateSubjectType_UnknownCertificateSubjectType
}

type EmployeeToCreate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Credentials         *EmployeeToCreateCredentials `protobuf:"bytes,1,req,name=Credentials" json:"Credentials,omitempty"`
	Position            *string                      `protobuf:"bytes,2,opt,name=Position" json:"Position,omitempty"`
	CanBeInvitedForChat *bool                        `protobuf:"varint,3,req,name=CanBeInvitedForChat" json:"CanBeInvitedForChat,omitempty"`
	Permissions         *EmployeePermissions         `protobuf:"bytes,4,req,name=Permissions" json:"Permissions,omitempty"`
}

func (x *EmployeeToCreate) Reset() {
	*x = EmployeeToCreate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmployeeToCreate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmployeeToCreate) ProtoMessage() {}

func (x *EmployeeToCreate) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmployeeToCreate.ProtoReflect.Descriptor instead.
func (*EmployeeToCreate) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{38}
}

func (x *EmployeeToCreate) GetCredentials() *EmployeeToCreateCredentials {
	if x != nil {
		return x.Credentials
	}
	return nil
}

func (x *EmployeeToCreate) GetPosition() string {
	if x != nil && x.Position != nil {
		return *x.Position
	}
	return ""
}

func (x *EmployeeToCreate) GetCanBeInvitedForChat() bool {
	if x != nil && x.CanBeInvitedForChat != nil {
		return *x.CanBeInvitedForChat
	}
	return false
}

func (x *EmployeeToCreate) GetPermissions() *EmployeePermissions {
	if x != nil {
		return x.Permissions
	}
	return nil
}

type EmployeeToCreateCredentials struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Login       *EmployeeToCreateByLogin       `protobuf:"bytes,1,opt,name=Login" json:"Login,omitempty"`
	Certificate *EmployeeToCreateByCertificate `protobuf:"bytes,2,opt,name=Certificate" json:"Certificate,omitempty"`
}

func (x *EmployeeToCreateCredentials) Reset() {
	*x = EmployeeToCreateCredentials{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmployeeToCreateCredentials) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmployeeToCreateCredentials) ProtoMessage() {}

func (x *EmployeeToCreateCredentials) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmployeeToCreateCredentials.ProtoReflect.Descriptor instead.
func (*EmployeeToCreateCredentials) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{39}
}

func (x *EmployeeToCreateCredentials) GetLogin() *EmployeeToCreateByLogin {
	if x != nil {
		return x.Login
	}
	return nil
}

func (x *EmployeeToCreateCredentials) GetCertificate() *EmployeeToCreateByCertificate {
	if x != nil {
		return x.Certificate
	}
	return nil
}

type EmployeeToCreateByLogin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Login    *string   `protobuf:"bytes,1,req,name=Login" json:"Login,omitempty"`
	FullName *FullName `protobuf:"bytes,2,opt,name=FullName" json:"FullName,omitempty"`
}

func (x *EmployeeToCreateByLogin) Reset() {
	*x = EmployeeToCreateByLogin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmployeeToCreateByLogin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmployeeToCreateByLogin) ProtoMessage() {}

func (x *EmployeeToCreateByLogin) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmployeeToCreateByLogin.ProtoReflect.Descriptor instead.
func (*EmployeeToCreateByLogin) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{40}
}

func (x *EmployeeToCreateByLogin) GetLogin() string {
	if x != nil && x.Login != nil {
		return *x.Login
	}
	return ""
}

func (x *EmployeeToCreateByLogin) GetFullName() *FullName {
	if x != nil {
		return x.FullName
	}
	return nil
}

type EmployeeToCreateByCertificate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Content     []byte  `protobuf:"bytes,1,req,name=Content" json:"Content,omitempty"`
	AccessBasis *string `protobuf:"bytes,2,opt,name=AccessBasis" json:"AccessBasis,omitempty"`
	Email       *string `protobuf:"bytes,3,opt,name=Email" json:"Email,omitempty"`
}

func (x *EmployeeToCreateByCertificate) Reset() {
	*x = EmployeeToCreateByCertificate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmployeeToCreateByCertificate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmployeeToCreateByCertificate) ProtoMessage() {}

func (x *EmployeeToCreateByCertificate) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmployeeToCreateByCertificate.ProtoReflect.Descriptor instead.
func (*EmployeeToCreateByCertificate) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{41}
}

func (x *EmployeeToCreateByCertificate) GetContent() []byte {
	if x != nil {
		return x.Content
	}
	return nil
}

func (x *EmployeeToCreateByCertificate) GetAccessBasis() string {
	if x != nil && x.AccessBasis != nil {
		return *x.AccessBasis
	}
	return ""
}

func (x *EmployeeToCreateByCertificate) GetEmail() string {
	if x != nil && x.Email != nil {
		return *x.Email
	}
	return ""
}

type EmployeeToUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Permissions         *EmployeePermissionsPatch         `protobuf:"bytes,1,opt,name=Permissions" json:"Permissions,omitempty"`
	Position            *EmployeePositionPatch            `protobuf:"bytes,2,opt,name=Position" json:"Position,omitempty"`
	CanBeInvitedForChat *EmployeeCanBeInvitedForChatPatch `protobuf:"bytes,3,opt,name=CanBeInvitedForChat" json:"CanBeInvitedForChat,omitempty"`
}

func (x *EmployeeToUpdate) Reset() {
	*x = EmployeeToUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmployeeToUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmployeeToUpdate) ProtoMessage() {}

func (x *EmployeeToUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmployeeToUpdate.ProtoReflect.Descriptor instead.
func (*EmployeeToUpdate) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{42}
}

func (x *EmployeeToUpdate) GetPermissions() *EmployeePermissionsPatch {
	if x != nil {
		return x.Permissions
	}
	return nil
}

func (x *EmployeeToUpdate) GetPosition() *EmployeePositionPatch {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *EmployeeToUpdate) GetCanBeInvitedForChat() *EmployeeCanBeInvitedForChatPatch {
	if x != nil {
		return x.CanBeInvitedForChat
	}
	return nil
}

type EmployeePermissionsPatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Department              *EmployeeDepartmentPatch          `protobuf:"bytes,1,opt,name=Department" json:"Department,omitempty"`
	IsAdministrator         *EmployeeIsAdministratorPatch     `protobuf:"bytes,2,opt,name=IsAdministrator" json:"IsAdministrator,omitempty"`
	DocumentAccessLevel     *EmployeeDocumentAccessLevelPatch `protobuf:"bytes,3,opt,name=DocumentAccessLevel" json:"DocumentAccessLevel,omitempty"`
	SelectedDepartments     *EmployeeSelectedDepartmentsPatch `protobuf:"bytes,4,opt,name=SelectedDepartments" json:"SelectedDepartments,omitempty"`
	Actions                 []*EmployeeAction                 `protobuf:"bytes,5,rep,name=Actions" json:"Actions,omitempty"`
	AuthorizationPermission *AuthorizationPermissionPatch     `protobuf:"bytes,6,opt,name=AuthorizationPermission" json:"AuthorizationPermission,omitempty"`
}

func (x *EmployeePermissionsPatch) Reset() {
	*x = EmployeePermissionsPatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmployeePermissionsPatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmployeePermissionsPatch) ProtoMessage() {}

func (x *EmployeePermissionsPatch) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmployeePermissionsPatch.ProtoReflect.Descriptor instead.
func (*EmployeePermissionsPatch) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{43}
}

func (x *EmployeePermissionsPatch) GetDepartment() *EmployeeDepartmentPatch {
	if x != nil {
		return x.Department
	}
	return nil
}

func (x *EmployeePermissionsPatch) GetIsAdministrator() *EmployeeIsAdministratorPatch {
	if x != nil {
		return x.IsAdministrator
	}
	return nil
}

func (x *EmployeePermissionsPatch) GetDocumentAccessLevel() *EmployeeDocumentAccessLevelPatch {
	if x != nil {
		return x.DocumentAccessLevel
	}
	return nil
}

func (x *EmployeePermissionsPatch) GetSelectedDepartments() *EmployeeSelectedDepartmentsPatch {
	if x != nil {
		return x.SelectedDepartments
	}
	return nil
}

func (x *EmployeePermissionsPatch) GetActions() []*EmployeeAction {
	if x != nil {
		return x.Actions
	}
	return nil
}

func (x *EmployeePermissionsPatch) GetAuthorizationPermission() *AuthorizationPermissionPatch {
	if x != nil {
		return x.AuthorizationPermission
	}
	return nil
}

type EmployeeDepartmentPatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DepartmentId *string `protobuf:"bytes,1,req,name=DepartmentId" json:"DepartmentId,omitempty"`
}

func (x *EmployeeDepartmentPatch) Reset() {
	*x = EmployeeDepartmentPatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmployeeDepartmentPatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmployeeDepartmentPatch) ProtoMessage() {}

func (x *EmployeeDepartmentPatch) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmployeeDepartmentPatch.ProtoReflect.Descriptor instead.
func (*EmployeeDepartmentPatch) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{44}
}

func (x *EmployeeDepartmentPatch) GetDepartmentId() string {
	if x != nil && x.DepartmentId != nil {
		return *x.DepartmentId
	}
	return ""
}

type EmployeeDocumentAccessLevelPatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DocumentAccessLevel *DocumentAccessLevel `protobuf:"varint,1,req,name=DocumentAccessLevel,enum=DocumentAccessLevel" json:"DocumentAccessLevel,omitempty"`
}

func (x *EmployeeDocumentAccessLevelPatch) Reset() {
	*x = EmployeeDocumentAccessLevelPatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmployeeDocumentAccessLevelPatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmployeeDocumentAccessLevelPatch) ProtoMessage() {}

func (x *EmployeeDocumentAccessLevelPatch) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmployeeDocumentAccessLevelPatch.ProtoReflect.Descriptor instead.
func (*EmployeeDocumentAccessLevelPatch) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{45}
}

func (x *EmployeeDocumentAccessLevelPatch) GetDocumentAccessLevel() DocumentAccessLevel {
	if x != nil && x.DocumentAccessLevel != nil {
		return *x.DocumentAccessLevel
	}
	return DocumentAccessLevel_UnknownDocumentAccessLevel
}

type EmployeeSelectedDepartmentsPatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SelectedDepartmentIds []string `protobuf:"bytes,1,rep,name=SelectedDepartmentIds" json:"SelectedDepartmentIds,omitempty"`
}

func (x *EmployeeSelectedDepartmentsPatch) Reset() {
	*x = EmployeeSelectedDepartmentsPatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmployeeSelectedDepartmentsPatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmployeeSelectedDepartmentsPatch) ProtoMessage() {}

func (x *EmployeeSelectedDepartmentsPatch) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmployeeSelectedDepartmentsPatch.ProtoReflect.Descriptor instead.
func (*EmployeeSelectedDepartmentsPatch) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{46}
}

func (x *EmployeeSelectedDepartmentsPatch) GetSelectedDepartmentIds() []string {
	if x != nil {
		return x.SelectedDepartmentIds
	}
	return nil
}

type EmployeePositionPatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Position *string `protobuf:"bytes,1,opt,name=Position" json:"Position,omitempty"`
}

func (x *EmployeePositionPatch) Reset() {
	*x = EmployeePositionPatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmployeePositionPatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmployeePositionPatch) ProtoMessage() {}

func (x *EmployeePositionPatch) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmployeePositionPatch.ProtoReflect.Descriptor instead.
func (*EmployeePositionPatch) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{47}
}

func (x *EmployeePositionPatch) GetPosition() string {
	if x != nil && x.Position != nil {
		return *x.Position
	}
	return ""
}

type EmployeeCanBeInvitedForChatPatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CanBeInvitedForChat *bool `protobuf:"varint,1,req,name=CanBeInvitedForChat" json:"CanBeInvitedForChat,omitempty"`
}

func (x *EmployeeCanBeInvitedForChatPatch) Reset() {
	*x = EmployeeCanBeInvitedForChatPatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmployeeCanBeInvitedForChatPatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmployeeCanBeInvitedForChatPatch) ProtoMessage() {}

func (x *EmployeeCanBeInvitedForChatPatch) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmployeeCanBeInvitedForChatPatch.ProtoReflect.Descriptor instead.
func (*EmployeeCanBeInvitedForChatPatch) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{48}
}

func (x *EmployeeCanBeInvitedForChatPatch) GetCanBeInvitedForChat() bool {
	if x != nil && x.CanBeInvitedForChat != nil {
		return *x.CanBeInvitedForChat
	}
	return false
}

type AuthorizationPermissionPatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsBlocked *bool   `protobuf:"varint,1,req,name=IsBlocked" json:"IsBlocked,omitempty"`
	Comment   *string `protobuf:"bytes,2,opt,name=Comment" json:"Comment,omitempty"`
}

func (x *AuthorizationPermissionPatch) Reset() {
	*x = AuthorizationPermissionPatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthorizationPermissionPatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthorizationPermissionPatch) ProtoMessage() {}

func (x *AuthorizationPermissionPatch) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthorizationPermissionPatch.ProtoReflect.Descriptor instead.
func (*AuthorizationPermissionPatch) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{49}
}

func (x *AuthorizationPermissionPatch) GetIsBlocked() bool {
	if x != nil && x.IsBlocked != nil {
		return *x.IsBlocked
	}
	return false
}

func (x *AuthorizationPermissionPatch) GetComment() string {
	if x != nil && x.Comment != nil {
		return *x.Comment
	}
	return ""
}

type EmployeeIsAdministratorPatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsAdministrator *bool `protobuf:"varint,1,req,name=IsAdministrator" json:"IsAdministrator,omitempty"`
}

func (x *EmployeeIsAdministratorPatch) Reset() {
	*x = EmployeeIsAdministratorPatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmployeeIsAdministratorPatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmployeeIsAdministratorPatch) ProtoMessage() {}

func (x *EmployeeIsAdministratorPatch) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmployeeIsAdministratorPatch.ProtoReflect.Descriptor instead.
func (*EmployeeIsAdministratorPatch) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{50}
}

func (x *EmployeeIsAdministratorPatch) GetIsAdministrator() bool {
	if x != nil && x.IsAdministrator != nil {
		return *x.IsAdministrator
	}
	return false
}

type UserToUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Login    *UserLoginPatch    `protobuf:"bytes,1,opt,name=Login" json:"Login,omitempty"`
	FullName *UserFullNamePatch `protobuf:"bytes,2,opt,name=FullName" json:"FullName,omitempty"`
}

func (x *UserToUpdate) Reset() {
	*x = UserToUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserToUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserToUpdate) ProtoMessage() {}

func (x *UserToUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserToUpdate.ProtoReflect.Descriptor instead.
func (*UserToUpdate) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{51}
}

func (x *UserToUpdate) GetLogin() *UserLoginPatch {
	if x != nil {
		return x.Login
	}
	return nil
}

func (x *UserToUpdate) GetFullName() *UserFullNamePatch {
	if x != nil {
		return x.FullName
	}
	return nil
}

type UserLoginPatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Login *string `protobuf:"bytes,1,opt,name=Login" json:"Login,omitempty"`
}

func (x *UserLoginPatch) Reset() {
	*x = UserLoginPatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserLoginPatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserLoginPatch) ProtoMessage() {}

func (x *UserLoginPatch) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserLoginPatch.ProtoReflect.Descriptor instead.
func (*UserLoginPatch) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{52}
}

func (x *UserLoginPatch) GetLogin() string {
	if x != nil && x.Login != nil {
		return *x.Login
	}
	return ""
}

type UserFullNamePatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FullName *FullName `protobuf:"bytes,1,opt,name=FullName" json:"FullName,omitempty"`
}

func (x *UserFullNamePatch) Reset() {
	*x = UserFullNamePatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserFullNamePatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserFullNamePatch) ProtoMessage() {}

func (x *UserFullNamePatch) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserFullNamePatch.ProtoReflect.Descriptor instead.
func (*UserFullNamePatch) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{53}
}

func (x *UserFullNamePatch) GetFullName() *FullName {
	if x != nil {
		return x.FullName
	}
	return nil
}

type SignedContent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Content               []byte                 `protobuf:"bytes,1,opt,name=Content" json:"Content,omitempty"`
	Signature             []byte                 `protobuf:"bytes,2,opt,name=Signature" json:"Signature,omitempty"`
	NameOnShelf           *string                `protobuf:"bytes,4,opt,name=NameOnShelf" json:"NameOnShelf,omitempty"`
	SignWithTestSignature *bool                  `protobuf:"varint,5,opt,name=SignWithTestSignature,def=0" json:"SignWithTestSignature,omitempty"`
	SignatureNameOnShelf  *string                `protobuf:"bytes,6,opt,name=SignatureNameOnShelf" json:"SignatureNameOnShelf,omitempty"`
	PowerOfAttorney       *PowerOfAttorneyToPost `protobuf:"bytes,7,opt,name=PowerOfAttorney" json:"PowerOfAttorney,omitempty"`
}

// Default values for SignedContent fields.
const (
	Default_SignedContent_SignWithTestSignature = bool(false)
)

func (x *SignedContent) Reset() {
	*x = SignedContent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignedContent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignedContent) ProtoMessage() {}

func (x *SignedContent) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignedContent.ProtoReflect.Descriptor instead.
func (*SignedContent) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{54}
}

func (x *SignedContent) GetContent() []byte {
	if x != nil {
		return x.Content
	}
	return nil
}

func (x *SignedContent) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *SignedContent) GetNameOnShelf() string {
	if x != nil && x.NameOnShelf != nil {
		return *x.NameOnShelf
	}
	return ""
}

func (x *SignedContent) GetSignWithTestSignature() bool {
	if x != nil && x.SignWithTestSignature != nil {
		return *x.SignWithTestSignature
	}
	return Default_SignedContent_SignWithTestSignature
}

func (x *SignedContent) GetSignatureNameOnShelf() string {
	if x != nil && x.SignatureNameOnShelf != nil {
		return *x.SignatureNameOnShelf
	}
	return ""
}

func (x *SignedContent) GetPowerOfAttorney() *PowerOfAttorneyToPost {
	if x != nil {
		return x.PowerOfAttorney
	}
	return nil
}

type PowerOfAttorneyToPost struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FullId     *PowerOfAttorneyFullId `protobuf:"bytes,1,opt,name=FullId" json:"FullId,omitempty"`
	UseDefault *bool                  `protobuf:"varint,2,req,name=UseDefault" json:"UseDefault,omitempty"`
}

func (x *PowerOfAttorneyToPost) Reset() {
	*x = PowerOfAttorneyToPost{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PowerOfAttorneyToPost) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PowerOfAttorneyToPost) ProtoMessage() {}

func (x *PowerOfAttorneyToPost) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PowerOfAttorneyToPost.ProtoReflect.Descriptor instead.
func (*PowerOfAttorneyToPost) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{55}
}

func (x *PowerOfAttorneyToPost) GetFullId() *PowerOfAttorneyFullId {
	if x != nil {
		return x.FullId
	}
	return nil
}

func (x *PowerOfAttorneyToPost) GetUseDefault() bool {
	if x != nil && x.UseDefault != nil {
		return *x.UseDefault
	}
	return false
}

type PowerOfAttorneyFullId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RegistrationNumber *string `protobuf:"bytes,1,req,name=RegistrationNumber" json:"RegistrationNumber,omitempty"`
	IssuerInn          *string `protobuf:"bytes,2,req,name=IssuerInn" json:"IssuerInn,omitempty"`
}

func (x *PowerOfAttorneyFullId) Reset() {
	*x = PowerOfAttorneyFullId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PowerOfAttorneyFullId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PowerOfAttorneyFullId) ProtoMessage() {}

func (x *PowerOfAttorneyFullId) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PowerOfAttorneyFullId.ProtoReflect.Descriptor instead.
func (*PowerOfAttorneyFullId) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{56}
}

func (x *PowerOfAttorneyFullId) GetRegistrationNumber() string {
	if x != nil && x.RegistrationNumber != nil {
		return *x.RegistrationNumber
	}
	return ""
}

func (x *PowerOfAttorneyFullId) GetIssuerInn() string {
	if x != nil && x.IssuerInn != nil {
		return *x.IssuerInn
	}
	return ""
}

type PowerOfAttorneyValidationStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Severity      *Severity                               `protobuf:"varint,1,opt,name=Severity,enum=Severity,def=0" json:"Severity,omitempty"`
	StatusNamedId *PowerOfAttorneyValidationStatusNamedId `protobuf:"varint,2,opt,name=StatusNamedId,enum=PowerOfAttorneyValidationStatusNamedId,def=0" json:"StatusNamedId,omitempty"`
	StatusText    *string                                 `protobuf:"bytes,3,opt,name=StatusText" json:"StatusText,omitempty"`
	Errors        []*PowerOfAttorneyValidationError       `protobuf:"bytes,4,rep,name=Errors" json:"Errors,omitempty"`
}

// Default values for PowerOfAttorneyValidationStatus fields.
const (
	Default_PowerOfAttorneyValidationStatus_Severity      = Severity_UnknownSeverity
	Default_PowerOfAttorneyValidationStatus_StatusNamedId = PowerOfAttorneyValidationStatusNamedId_UnknownStatus
)

func (x *PowerOfAttorneyValidationStatus) Reset() {
	*x = PowerOfAttorneyValidationStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PowerOfAttorneyValidationStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PowerOfAttorneyValidationStatus) ProtoMessage() {}

func (x *PowerOfAttorneyValidationStatus) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PowerOfAttorneyValidationStatus.ProtoReflect.Descriptor instead.
func (*PowerOfAttorneyValidationStatus) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{57}
}

func (x *PowerOfAttorneyValidationStatus) GetSeverity() Severity {
	if x != nil && x.Severity != nil {
		return *x.Severity
	}
	return Default_PowerOfAttorneyValidationStatus_Severity
}

func (x *PowerOfAttorneyValidationStatus) GetStatusNamedId() PowerOfAttorneyValidationStatusNamedId {
	if x != nil && x.StatusNamedId != nil {
		return *x.StatusNamedId
	}
	return Default_PowerOfAttorneyValidationStatus_StatusNamedId
}

func (x *PowerOfAttorneyValidationStatus) GetStatusText() string {
	if x != nil && x.StatusText != nil {
		return *x.StatusText
	}
	return ""
}

func (x *PowerOfAttorneyValidationStatus) GetErrors() []*PowerOfAttorneyValidationError {
	if x != nil {
		return x.Errors
	}
	return nil
}

type PowerOfAttorneyValidationError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code *string `protobuf:"bytes,1,req,name=Code" json:"Code,omitempty"`
	Text *string `protobuf:"bytes,2,req,name=Text" json:"Text,omitempty"`
}

func (x *PowerOfAttorneyValidationError) Reset() {
	*x = PowerOfAttorneyValidationError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PowerOfAttorneyValidationError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PowerOfAttorneyValidationError) ProtoMessage() {}

func (x *PowerOfAttorneyValidationError) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PowerOfAttorneyValidationError.ProtoReflect.Descriptor instead.
func (*PowerOfAttorneyValidationError) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{58}
}

func (x *PowerOfAttorneyValidationError) GetCode() string {
	if x != nil && x.Code != nil {
		return *x.Code
	}
	return ""
}

func (x *PowerOfAttorneyValidationError) GetText() string {
	if x != nil && x.Text != nil {
		return *x.Text
	}
	return ""
}

type GetOrganizationsByInnListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InnList []string `protobuf:"bytes,1,rep,name=InnList" json:"InnList,omitempty"`
}

func (x *GetOrganizationsByInnListRequest) Reset() {
	*x = GetOrganizationsByInnListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOrganizationsByInnListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrganizationsByInnListRequest) ProtoMessage() {}

func (x *GetOrganizationsByInnListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrganizationsByInnListRequest.ProtoReflect.Descriptor instead.
func (*GetOrganizationsByInnListRequest) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{59}
}

func (x *GetOrganizationsByInnListRequest) GetInnList() []string {
	if x != nil {
		return x.InnList
	}
	return nil
}

type OrganizationWithCounteragentStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Organization            *Organization       `protobuf:"bytes,1,req,name=Organization" json:"Organization,omitempty"`
	CounteragentStatus      *CounteragentStatus `protobuf:"varint,2,opt,name=CounteragentStatus,enum=CounteragentStatus,def=0" json:"CounteragentStatus,omitempty"`
	LastEventTimestampTicks *int64              `protobuf:"fixed64,3,opt,name=LastEventTimestampTicks" json:"LastEventTimestampTicks,omitempty"`
	MessageFromCounteragent *string             `protobuf:"bytes,4,opt,name=MessageFromCounteragent" json:"MessageFromCounteragent,omitempty"`
	MessageToCounteragent   *string             `protobuf:"bytes,5,opt,name=MessageToCounteragent" json:"MessageToCounteragent,omitempty"`
	InvitationDocumentId    *DocumentId         `protobuf:"bytes,6,opt,name=InvitationDocumentId" json:"InvitationDocumentId,omitempty"`
}

// Default values for OrganizationWithCounteragentStatus fields.
const (
	Default_OrganizationWithCounteragentStatus_CounteragentStatus = CounteragentStatus_UnknownCounteragentStatus
)

func (x *OrganizationWithCounteragentStatus) Reset() {
	*x = OrganizationWithCounteragentStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrganizationWithCounteragentStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrganizationWithCounteragentStatus) ProtoMessage() {}

func (x *OrganizationWithCounteragentStatus) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrganizationWithCounteragentStatus.ProtoReflect.Descriptor instead.
func (*OrganizationWithCounteragentStatus) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{60}
}

func (x *OrganizationWithCounteragentStatus) GetOrganization() *Organization {
	if x != nil {
		return x.Organization
	}
	return nil
}

func (x *OrganizationWithCounteragentStatus) GetCounteragentStatus() CounteragentStatus {
	if x != nil && x.CounteragentStatus != nil {
		return *x.CounteragentStatus
	}
	return Default_OrganizationWithCounteragentStatus_CounteragentStatus
}

func (x *OrganizationWithCounteragentStatus) GetLastEventTimestampTicks() int64 {
	if x != nil && x.LastEventTimestampTicks != nil {
		return *x.LastEventTimestampTicks
	}
	return 0
}

func (x *OrganizationWithCounteragentStatus) GetMessageFromCounteragent() string {
	if x != nil && x.MessageFromCounteragent != nil {
		return *x.MessageFromCounteragent
	}
	return ""
}

func (x *OrganizationWithCounteragentStatus) GetMessageToCounteragent() string {
	if x != nil && x.MessageToCounteragent != nil {
		return *x.MessageToCounteragent
	}
	return ""
}

func (x *OrganizationWithCounteragentStatus) GetInvitationDocumentId() *DocumentId {
	if x != nil {
		return x.InvitationDocumentId
	}
	return nil
}

type GetOrganizationsByInnListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Organizations []*OrganizationWithCounteragentStatus `protobuf:"bytes,1,rep,name=Organizations" json:"Organizations,omitempty"`
}

func (x *GetOrganizationsByInnListResponse) Reset() {
	*x = GetOrganizationsByInnListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOrganizationsByInnListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrganizationsByInnListResponse) ProtoMessage() {}

func (x *GetOrganizationsByInnListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrganizationsByInnListResponse.ProtoReflect.Descriptor instead.
func (*GetOrganizationsByInnListResponse) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{61}
}

func (x *GetOrganizationsByInnListResponse) GetOrganizations() []*OrganizationWithCounteragentStatus {
	if x != nil {
		return x.Organizations
	}
	return nil
}

type LoginPassword struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Login    *string `protobuf:"bytes,1,req,name=Login" json:"Login,omitempty"`
	Password *string `protobuf:"bytes,2,req,name=Password" json:"Password,omitempty"`
}

func (x *LoginPassword) Reset() {
	*x = LoginPassword{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoginPassword) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginPassword) ProtoMessage() {}

func (x *LoginPassword) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginPassword.ProtoReflect.Descriptor instead.
func (*LoginPassword) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{62}
}

func (x *LoginPassword) GetLogin() string {
	if x != nil && x.Login != nil {
		return *x.Login
	}
	return ""
}

func (x *LoginPassword) GetPassword() string {
	if x != nil && x.Password != nil {
		return *x.Password
	}
	return ""
}

type OrganizationList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Organizations []*Organization `protobuf:"bytes,1,rep,name=Organizations" json:"Organizations,omitempty"`
}

func (x *OrganizationList) Reset() {
	*x = OrganizationList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrganizationList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrganizationList) ProtoMessage() {}

func (x *OrganizationList) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrganizationList.ProtoReflect.Descriptor instead.
func (*OrganizationList) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{63}
}

func (x *OrganizationList) GetOrganizations() []*Organization {
	if x != nil {
		return x.Organizations
	}
	return nil
}

type Organization struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgId                     *string       `protobuf:"bytes,1,req,name=OrgId" json:"OrgId,omitempty"`
	Inn                       *string       `protobuf:"bytes,2,req,name=Inn" json:"Inn,omitempty"`
	Kpp                       *string       `protobuf:"bytes,3,opt,name=Kpp" json:"Kpp,omitempty"`
	FullName                  *string       `protobuf:"bytes,4,req,name=FullName" json:"FullName,omitempty"`
	ShortName                 *string       `protobuf:"bytes,5,opt,name=ShortName" json:"ShortName,omitempty"`
	Boxes                     []*Box        `protobuf:"bytes,7,rep,name=Boxes" json:"Boxes,omitempty"`
	Ogrn                      *string       `protobuf:"bytes,8,opt,name=Ogrn" json:"Ogrn,omitempty"`
	FnsParticipantId          *string       `protobuf:"bytes,9,opt,name=FnsParticipantId" json:"FnsParticipantId,omitempty"`
	Address                   *Address      `protobuf:"bytes,10,opt,name=Address" json:"Address,omitempty"`
	FnsRegistrationDate       *string       `protobuf:"bytes,11,opt,name=FnsRegistrationDate" json:"FnsRegistrationDate,omitempty"`
	Departments               []*Department `protobuf:"bytes,12,rep,name=Departments" json:"Departments,omitempty"`
	IfnsCode                  *string       `protobuf:"bytes,13,opt,name=IfnsCode" json:"IfnsCode,omitempty"`
	IsPilot                   *bool         `protobuf:"varint,14,opt,name=IsPilot" json:"IsPilot,omitempty"`
	IsActive                  *bool         `protobuf:"varint,15,opt,name=IsActive" json:"IsActive,omitempty"`
	IsTest                    *bool         `protobuf:"varint,16,opt,name=IsTest" json:"IsTest,omitempty"`
	IsBranch                  *bool         `protobuf:"varint,17,opt,name=IsBranch" json:"IsBranch,omitempty"`
	IsRoaming                 *bool         `protobuf:"varint,18,opt,name=IsRoaming" json:"IsRoaming,omitempty"`
	IsEmployee                *bool         `protobuf:"varint,19,opt,name=IsEmployee" json:"IsEmployee,omitempty"`
	InvitationCount           *int32        `protobuf:"varint,20,opt,name=InvitationCount" json:"InvitationCount,omitempty"`
	SearchCount               *int32        `protobuf:"varint,21,opt,name=SearchCount" json:"SearchCount,omitempty"`
	Sociability               *Sociability  `protobuf:"varint,22,req,name=Sociability,enum=Sociability" json:"Sociability,omitempty"`
	LiquidationDate           *string       `protobuf:"bytes,23,opt,name=LiquidationDate" json:"LiquidationDate,omitempty"`
	CertificateOfRegistryInfo *string       `protobuf:"bytes,24,opt,name=CertificateOfRegistryInfo" json:"CertificateOfRegistryInfo,omitempty"`
	IsForeign                 *bool         `protobuf:"varint,25,opt,name=IsForeign" json:"IsForeign,omitempty"`
	HasCertificateToSign      *bool         `protobuf:"varint,26,opt,name=HasCertificateToSign" json:"HasCertificateToSign,omitempty"`
}

func (x *Organization) Reset() {
	*x = Organization{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Organization) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Organization) ProtoMessage() {}

func (x *Organization) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Organization.ProtoReflect.Descriptor instead.
func (*Organization) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{64}
}

func (x *Organization) GetOrgId() string {
	if x != nil && x.OrgId != nil {
		return *x.OrgId
	}
	return ""
}

func (x *Organization) GetInn() string {
	if x != nil && x.Inn != nil {
		return *x.Inn
	}
	return ""
}

func (x *Organization) GetKpp() string {
	if x != nil && x.Kpp != nil {
		return *x.Kpp
	}
	return ""
}

func (x *Organization) GetFullName() string {
	if x != nil && x.FullName != nil {
		return *x.FullName
	}
	return ""
}

func (x *Organization) GetShortName() string {
	if x != nil && x.ShortName != nil {
		return *x.ShortName
	}
	return ""
}

func (x *Organization) GetBoxes() []*Box {
	if x != nil {
		return x.Boxes
	}
	return nil
}

func (x *Organization) GetOgrn() string {
	if x != nil && x.Ogrn != nil {
		return *x.Ogrn
	}
	return ""
}

func (x *Organization) GetFnsParticipantId() string {
	if x != nil && x.FnsParticipantId != nil {
		return *x.FnsParticipantId
	}
	return ""
}

func (x *Organization) GetAddress() *Address {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *Organization) GetFnsRegistrationDate() string {
	if x != nil && x.FnsRegistrationDate != nil {
		return *x.FnsRegistrationDate
	}
	return ""
}

func (x *Organization) GetDepartments() []*Department {
	if x != nil {
		return x.Departments
	}
	return nil
}

func (x *Organization) GetIfnsCode() string {
	if x != nil && x.IfnsCode != nil {
		return *x.IfnsCode
	}
	return ""
}

func (x *Organization) GetIsPilot() bool {
	if x != nil && x.IsPilot != nil {
		return *x.IsPilot
	}
	return false
}

func (x *Organization) GetIsActive() bool {
	if x != nil && x.IsActive != nil {
		return *x.IsActive
	}
	return false
}

func (x *Organization) GetIsTest() bool {
	if x != nil && x.IsTest != nil {
		return *x.IsTest
	}
	return false
}

func (x *Organization) GetIsBranch() bool {
	if x != nil && x.IsBranch != nil {
		return *x.IsBranch
	}
	return false
}

func (x *Organization) GetIsRoaming() bool {
	if x != nil && x.IsRoaming != nil {
		return *x.IsRoaming
	}
	return false
}

func (x *Organization) GetIsEmployee() bool {
	if x != nil && x.IsEmployee != nil {
		return *x.IsEmployee
	}
	return false
}

func (x *Organization) GetInvitationCount() int32 {
	if x != nil && x.InvitationCount != nil {
		return *x.InvitationCount
	}
	return 0
}

func (x *Organization) GetSearchCount() int32 {
	if x != nil && x.SearchCount != nil {
		return *x.SearchCount
	}
	return 0
}

func (x *Organization) GetSociability() Sociability {
	if x != nil && x.Sociability != nil {
		return *x.Sociability
	}
	return Sociability_AllOrganizations
}

func (x *Organization) GetLiquidationDate() string {
	if x != nil && x.LiquidationDate != nil {
		return *x.LiquidationDate
	}
	return ""
}

func (x *Organization) GetCertificateOfRegistryInfo() string {
	if x != nil && x.CertificateOfRegistryInfo != nil {
		return *x.CertificateOfRegistryInfo
	}
	return ""
}

func (x *Organization) GetIsForeign() bool {
	if x != nil && x.IsForeign != nil {
		return *x.IsForeign
	}
	return false
}

func (x *Organization) GetHasCertificateToSign() bool {
	if x != nil && x.HasCertificateToSign != nil {
		return *x.HasCertificateToSign
	}
	return false
}

type Box struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BoxId                     *string                           `protobuf:"bytes,1,req,name=BoxId" json:"BoxId,omitempty"`
	Title                     *string                           `protobuf:"bytes,2,req,name=Title" json:"Title,omitempty"`
	Organization              *Organization                     `protobuf:"bytes,3,opt,name=Organization" json:"Organization,omitempty"`
	InvoiceFormatVersion      *OrganizationInvoiceFormatVersion `protobuf:"varint,4,opt,name=InvoiceFormatVersion,enum=OrganizationInvoiceFormatVersion,def=2" json:"InvoiceFormatVersion,omitempty"`
	EncryptedDocumentsAllowed *bool                             `protobuf:"varint,5,opt,name=EncryptedDocumentsAllowed" json:"EncryptedDocumentsAllowed,omitempty"`
	BoxIdGuid                 *string                           `protobuf:"bytes,6,req,name=BoxIdGuid" json:"BoxIdGuid,omitempty"`
}

// Default values for Box fields.
const (
	Default_Box_InvoiceFormatVersion = OrganizationInvoiceFormatVersion_v5_02
)

func (x *Box) Reset() {
	*x = Box{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Box) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Box) ProtoMessage() {}

func (x *Box) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Box.ProtoReflect.Descriptor instead.
func (*Box) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{65}
}

func (x *Box) GetBoxId() string {
	if x != nil && x.BoxId != nil {
		return *x.BoxId
	}
	return ""
}

func (x *Box) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *Box) GetOrganization() *Organization {
	if x != nil {
		return x.Organization
	}
	return nil
}

func (x *Box) GetInvoiceFormatVersion() OrganizationInvoiceFormatVersion {
	if x != nil && x.InvoiceFormatVersion != nil {
		return *x.InvoiceFormatVersion
	}
	return Default_Box_InvoiceFormatVersion
}

func (x *Box) GetEncryptedDocumentsAllowed() bool {
	if x != nil && x.EncryptedDocumentsAllowed != nil {
		return *x.EncryptedDocumentsAllowed
	}
	return false
}

func (x *Box) GetBoxIdGuid() string {
	if x != nil && x.BoxIdGuid != nil {
		return *x.BoxIdGuid
	}
	return ""
}

type OrganizationFeatures struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockStatus *BlockStatus `protobuf:"bytes,1,req,name=BlockStatus" json:"BlockStatus,omitempty"`
	Features    []string     `protobuf:"bytes,2,rep,name=Features" json:"Features,omitempty"`
}

func (x *OrganizationFeatures) Reset() {
	*x = OrganizationFeatures{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrganizationFeatures) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrganizationFeatures) ProtoMessage() {}

func (x *OrganizationFeatures) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrganizationFeatures.ProtoReflect.Descriptor instead.
func (*OrganizationFeatures) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{66}
}

func (x *OrganizationFeatures) GetBlockStatus() *BlockStatus {
	if x != nil {
		return x.BlockStatus
	}
	return nil
}

func (x *OrganizationFeatures) GetFeatures() []string {
	if x != nil {
		return x.Features
	}
	return nil
}

type BlockStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ManualBlockStatus *ManualBlockStatus `protobuf:"bytes,1,req,name=ManualBlockStatus" json:"ManualBlockStatus,omitempty"`
	AutoBlockStatus   *AutoBlockStatus   `protobuf:"bytes,2,req,name=AutoBlockStatus" json:"AutoBlockStatus,omitempty"`
}

func (x *BlockStatus) Reset() {
	*x = BlockStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockStatus) ProtoMessage() {}

func (x *BlockStatus) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockStatus.ProtoReflect.Descriptor instead.
func (*BlockStatus) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{67}
}

func (x *BlockStatus) GetManualBlockStatus() *ManualBlockStatus {
	if x != nil {
		return x.ManualBlockStatus
	}
	return nil
}

func (x *BlockStatus) GetAutoBlockStatus() *AutoBlockStatus {
	if x != nil {
		return x.AutoBlockStatus
	}
	return nil
}

type ManualBlockStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsBlocked      *bool  `protobuf:"varint,1,req,name=IsBlocked" json:"IsBlocked,omitempty"`
	RequestedTicks *int64 `protobuf:"fixed64,2,opt,name=RequestedTicks" json:"RequestedTicks,omitempty"`
}

func (x *ManualBlockStatus) Reset() {
	*x = ManualBlockStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ManualBlockStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManualBlockStatus) ProtoMessage() {}

func (x *ManualBlockStatus) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ManualBlockStatus.ProtoReflect.Descriptor instead.
func (*ManualBlockStatus) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{68}
}

func (x *ManualBlockStatus) GetIsBlocked() bool {
	if x != nil && x.IsBlocked != nil {
		return *x.IsBlocked
	}
	return false
}

func (x *ManualBlockStatus) GetRequestedTicks() int64 {
	if x != nil && x.RequestedTicks != nil {
		return *x.RequestedTicks
	}
	return 0
}

type AutoBlockStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsBlocked *bool `protobuf:"varint,1,req,name=IsBlocked" json:"IsBlocked,omitempty"`
}

func (x *AutoBlockStatus) Reset() {
	*x = AutoBlockStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AutoBlockStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutoBlockStatus) ProtoMessage() {}

func (x *AutoBlockStatus) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutoBlockStatus.ProtoReflect.Descriptor instead.
func (*AutoBlockStatus) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{69}
}

func (x *AutoBlockStatus) GetIsBlocked() bool {
	if x != nil && x.IsBlocked != nil {
		return *x.IsBlocked
	}
	return false
}

type Timestamp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ticks *int64 `protobuf:"fixed64,1,req,name=Ticks" json:"Ticks,omitempty"`
}

func (x *Timestamp) Reset() {
	*x = Timestamp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Timestamp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Timestamp) ProtoMessage() {}

func (x *Timestamp) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Timestamp.ProtoReflect.Descriptor instead.
func (*Timestamp) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{70}
}

func (x *Timestamp) GetTicks() int64 {
	if x != nil && x.Ticks != nil {
		return *x.Ticks
	}
	return 0
}

type AsyncMethodResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId *string `protobuf:"bytes,1,opt,name=TaskId" json:"TaskId,omitempty"`
}

func (x *AsyncMethodResult) Reset() {
	*x = AsyncMethodResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AsyncMethodResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AsyncMethodResult) ProtoMessage() {}

func (x *AsyncMethodResult) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AsyncMethodResult.ProtoReflect.Descriptor instead.
func (*AsyncMethodResult) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{71}
}

func (x *AsyncMethodResult) GetTaskId() string {
	if x != nil && x.TaskId != nil {
		return *x.TaskId
	}
	return ""
}

type AcquireCounteragentResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgId                *string     `protobuf:"bytes,1,req,name=OrgId" json:"OrgId,omitempty"`
	InvitationDocumentId *DocumentId `protobuf:"bytes,2,opt,name=InvitationDocumentId" json:"InvitationDocumentId,omitempty"`
}

func (x *AcquireCounteragentResult) Reset() {
	*x = AcquireCounteragentResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AcquireCounteragentResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcquireCounteragentResult) ProtoMessage() {}

func (x *AcquireCounteragentResult) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcquireCounteragentResult.ProtoReflect.Descriptor instead.
func (*AcquireCounteragentResult) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{72}
}

func (x *AcquireCounteragentResult) GetOrgId() string {
	if x != nil && x.OrgId != nil {
		return *x.OrgId
	}
	return ""
}

func (x *AcquireCounteragentResult) GetInvitationDocumentId() *DocumentId {
	if x != nil {
		return x.InvitationDocumentId
	}
	return nil
}

type Message struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MessageId                          *string                             `protobuf:"bytes,1,req,name=MessageId" json:"MessageId,omitempty"`
	TimestampTicks                     *int64                              `protobuf:"fixed64,2,req,name=TimestampTicks" json:"TimestampTicks,omitempty"`
	LastPatchTimestampTicks            *int64                              `protobuf:"fixed64,3,req,name=LastPatchTimestampTicks" json:"LastPatchTimestampTicks,omitempty"`
	FromBoxId                          *string                             `protobuf:"bytes,4,req,name=FromBoxId" json:"FromBoxId,omitempty"`
	FromTitle                          *string                             `protobuf:"bytes,5,req,name=FromTitle" json:"FromTitle,omitempty"`
	ToBoxId                            *string                             `protobuf:"bytes,6,opt,name=ToBoxId" json:"ToBoxId,omitempty"`
	ToTitle                            *string                             `protobuf:"bytes,7,opt,name=ToTitle" json:"ToTitle,omitempty"`
	Entities                           []*Entity                           `protobuf:"bytes,8,rep,name=Entities" json:"Entities,omitempty"`
	IsDraft                            *bool                               `protobuf:"varint,9,opt,name=IsDraft,def=0" json:"IsDraft,omitempty"`
	DraftIsLocked                      *bool                               `protobuf:"varint,10,opt,name=DraftIsLocked,def=0" json:"DraftIsLocked,omitempty"`
	DraftIsRecycled                    *bool                               `protobuf:"varint,11,opt,name=DraftIsRecycled,def=0" json:"DraftIsRecycled,omitempty"`
	CreatedFromDraftId                 *string                             `protobuf:"bytes,12,opt,name=CreatedFromDraftId" json:"CreatedFromDraftId,omitempty"`
	DraftIsTransformedToMessageIdList  []string                            `protobuf:"bytes,13,rep,name=DraftIsTransformedToMessageIdList" json:"DraftIsTransformedToMessageIdList,omitempty"`
	IsDeleted                          *bool                               `protobuf:"varint,14,opt,name=IsDeleted,def=0" json:"IsDeleted,omitempty"`
	IsTest                             *bool                               `protobuf:"varint,15,opt,name=IsTest,def=0" json:"IsTest,omitempty"`
	IsInternal                         *bool                               `protobuf:"varint,16,opt,name=IsInternal,def=0" json:"IsInternal,omitempty"`
	IsProxified                        *bool                               `protobuf:"varint,17,opt,name=IsProxified,def=0" json:"IsProxified,omitempty"`
	ProxyBoxId                         *string                             `protobuf:"bytes,18,opt,name=ProxyBoxId" json:"ProxyBoxId,omitempty"`
	ProxyTitle                         *string                             `protobuf:"bytes,19,opt,name=ProxyTitle" json:"ProxyTitle,omitempty"`
	PacketIsLocked                     *bool                               `protobuf:"varint,20,opt,name=PacketIsLocked,def=0" json:"PacketIsLocked,omitempty"`
	LockMode                           *LockMode                           `protobuf:"varint,21,req,name=LockMode,enum=LockMode" json:"LockMode,omitempty"`
	MessageType                        *MessageType                        `protobuf:"varint,22,req,name=MessageType,enum=MessageType" json:"MessageType,omitempty"`
	TemplateToLetterTransformationInfo *TemplateToLetterTransformationInfo `protobuf:"bytes,23,opt,name=TemplateToLetterTransformationInfo" json:"TemplateToLetterTransformationInfo,omitempty"`
	IsReusable                         *bool                               `protobuf:"varint,24,opt,name=IsReusable,def=0" json:"IsReusable,omitempty"`
}

// Default values for Message fields.
const (
	Default_Message_IsDraft         = bool(false)
	Default_Message_DraftIsLocked   = bool(false)
	Default_Message_DraftIsRecycled = bool(false)
	Default_Message_IsDeleted       = bool(false)
	Default_Message_IsTest          = bool(false)
	Default_Message_IsInternal      = bool(false)
	Default_Message_IsProxified     = bool(false)
	Default_Message_PacketIsLocked  = bool(false)
	Default_Message_IsReusable      = bool(false)
)

func (x *Message) Reset() {
	*x = Message{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Message) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message) ProtoMessage() {}

func (x *Message) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message.ProtoReflect.Descriptor instead.
func (*Message) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{73}
}

func (x *Message) GetMessageId() string {
	if x != nil && x.MessageId != nil {
		return *x.MessageId
	}
	return ""
}

func (x *Message) GetTimestampTicks() int64 {
	if x != nil && x.TimestampTicks != nil {
		return *x.TimestampTicks
	}
	return 0
}

func (x *Message) GetLastPatchTimestampTicks() int64 {
	if x != nil && x.LastPatchTimestampTicks != nil {
		return *x.LastPatchTimestampTicks
	}
	return 0
}

func (x *Message) GetFromBoxId() string {
	if x != nil && x.FromBoxId != nil {
		return *x.FromBoxId
	}
	return ""
}

func (x *Message) GetFromTitle() string {
	if x != nil && x.FromTitle != nil {
		return *x.FromTitle
	}
	return ""
}

func (x *Message) GetToBoxId() string {
	if x != nil && x.ToBoxId != nil {
		return *x.ToBoxId
	}
	return ""
}

func (x *Message) GetToTitle() string {
	if x != nil && x.ToTitle != nil {
		return *x.ToTitle
	}
	return ""
}

func (x *Message) GetEntities() []*Entity {
	if x != nil {
		return x.Entities
	}
	return nil
}

func (x *Message) GetIsDraft() bool {
	if x != nil && x.IsDraft != nil {
		return *x.IsDraft
	}
	return Default_Message_IsDraft
}

func (x *Message) GetDraftIsLocked() bool {
	if x != nil && x.DraftIsLocked != nil {
		return *x.DraftIsLocked
	}
	return Default_Message_DraftIsLocked
}

func (x *Message) GetDraftIsRecycled() bool {
	if x != nil && x.DraftIsRecycled != nil {
		return *x.DraftIsRecycled
	}
	return Default_Message_DraftIsRecycled
}

func (x *Message) GetCreatedFromDraftId() string {
	if x != nil && x.CreatedFromDraftId != nil {
		return *x.CreatedFromDraftId
	}
	return ""
}

func (x *Message) GetDraftIsTransformedToMessageIdList() []string {
	if x != nil {
		return x.DraftIsTransformedToMessageIdList
	}
	return nil
}

func (x *Message) GetIsDeleted() bool {
	if x != nil && x.IsDeleted != nil {
		return *x.IsDeleted
	}
	return Default_Message_IsDeleted
}

func (x *Message) GetIsTest() bool {
	if x != nil && x.IsTest != nil {
		return *x.IsTest
	}
	return Default_Message_IsTest
}

func (x *Message) GetIsInternal() bool {
	if x != nil && x.IsInternal != nil {
		return *x.IsInternal
	}
	return Default_Message_IsInternal
}

func (x *Message) GetIsProxified() bool {
	if x != nil && x.IsProxified != nil {
		return *x.IsProxified
	}
	return Default_Message_IsProxified
}

func (x *Message) GetProxyBoxId() string {
	if x != nil && x.ProxyBoxId != nil {
		return *x.ProxyBoxId
	}
	return ""
}

func (x *Message) GetProxyTitle() string {
	if x != nil && x.ProxyTitle != nil {
		return *x.ProxyTitle
	}
	return ""
}

func (x *Message) GetPacketIsLocked() bool {
	if x != nil && x.PacketIsLocked != nil {
		return *x.PacketIsLocked
	}
	return Default_Message_PacketIsLocked
}

func (x *Message) GetLockMode() LockMode {
	if x != nil && x.LockMode != nil {
		return *x.LockMode
	}
	return LockMode_None
}

func (x *Message) GetMessageType() MessageType {
	if x != nil && x.MessageType != nil {
		return *x.MessageType
	}
	return MessageType_UnknownMT
}

func (x *Message) GetTemplateToLetterTransformationInfo() *TemplateToLetterTransformationInfo {
	if x != nil {
		return x.TemplateToLetterTransformationInfo
	}
	return nil
}

func (x *Message) GetIsReusable() bool {
	if x != nil && x.IsReusable != nil {
		return *x.IsReusable
	}
	return Default_Message_IsReusable
}

type TemplateToLetterTransformationInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LetterFromBoxId         *string `protobuf:"bytes,1,req,name=LetterFromBoxId" json:"LetterFromBoxId,omitempty"`
	LetterToBoxId           *string `protobuf:"bytes,2,req,name=LetterToBoxId" json:"LetterToBoxId,omitempty"`
	LetterFromDepartmentId  *string `protobuf:"bytes,3,opt,name=LetterFromDepartmentId" json:"LetterFromDepartmentId,omitempty"`
	LetterToDepartmentId    *string `protobuf:"bytes,4,opt,name=LetterToDepartmentId" json:"LetterToDepartmentId,omitempty"`
	LetterProxyBoxId        *string `protobuf:"bytes,5,opt,name=LetterProxyBoxId" json:"LetterProxyBoxId,omitempty"`
	LetterProxyDepartmentId *string `protobuf:"bytes,6,opt,name=LetterProxyDepartmentId" json:"LetterProxyDepartmentId,omitempty"`
}

func (x *TemplateToLetterTransformationInfo) Reset() {
	*x = TemplateToLetterTransformationInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TemplateToLetterTransformationInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TemplateToLetterTransformationInfo) ProtoMessage() {}

func (x *TemplateToLetterTransformationInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TemplateToLetterTransformationInfo.ProtoReflect.Descriptor instead.
func (*TemplateToLetterTransformationInfo) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{74}
}

func (x *TemplateToLetterTransformationInfo) GetLetterFromBoxId() string {
	if x != nil && x.LetterFromBoxId != nil {
		return *x.LetterFromBoxId
	}
	return ""
}

func (x *TemplateToLetterTransformationInfo) GetLetterToBoxId() string {
	if x != nil && x.LetterToBoxId != nil {
		return *x.LetterToBoxId
	}
	return ""
}

func (x *TemplateToLetterTransformationInfo) GetLetterFromDepartmentId() string {
	if x != nil && x.LetterFromDepartmentId != nil {
		return *x.LetterFromDepartmentId
	}
	return ""
}

func (x *TemplateToLetterTransformationInfo) GetLetterToDepartmentId() string {
	if x != nil && x.LetterToDepartmentId != nil {
		return *x.LetterToDepartmentId
	}
	return ""
}

func (x *TemplateToLetterTransformationInfo) GetLetterProxyBoxId() string {
	if x != nil && x.LetterProxyBoxId != nil {
		return *x.LetterProxyBoxId
	}
	return ""
}

func (x *TemplateToLetterTransformationInfo) GetLetterProxyDepartmentId() string {
	if x != nil && x.LetterProxyDepartmentId != nil {
		return *x.LetterProxyDepartmentId
	}
	return ""
}

type Entity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EntityType                    *EntityType                    `protobuf:"varint,1,opt,name=EntityType,enum=EntityType,def=0" json:"EntityType,omitempty"`
	EntityId                      *string                        `protobuf:"bytes,2,req,name=EntityId" json:"EntityId,omitempty"`
	ParentEntityId                *string                        `protobuf:"bytes,3,opt,name=ParentEntityId" json:"ParentEntityId,omitempty"`
	Content                       *Content                       `protobuf:"bytes,4,opt,name=Content" json:"Content,omitempty"`
	AttachmentType                *AttachmentType                `protobuf:"varint,5,opt,name=AttachmentType,enum=AttachmentType,def=-1" json:"AttachmentType,omitempty"`
	FileName                      *string                        `protobuf:"bytes,6,opt,name=FileName" json:"FileName,omitempty"`
	NeedRecipientSignature        *bool                          `protobuf:"varint,7,opt,name=NeedRecipientSignature,def=0" json:"NeedRecipientSignature,omitempty"`
	SignerBoxId                   *string                        `protobuf:"bytes,8,opt,name=SignerBoxId" json:"SignerBoxId,omitempty"`
	NotDeliveredEventId           *string                        `protobuf:"bytes,10,opt,name=NotDeliveredEventId" json:"NotDeliveredEventId,omitempty"`
	DocumentInfo                  *Document                      `protobuf:"bytes,11,opt,name=DocumentInfo" json:"DocumentInfo,omitempty"`
	RawCreationDate               *int64                         `protobuf:"fixed64,12,opt,name=RawCreationDate,def=0" json:"RawCreationDate,omitempty"`
	ResolutionInfo                *ResolutionInfo                `protobuf:"bytes,13,opt,name=ResolutionInfo" json:"ResolutionInfo,omitempty"`
	SignerDepartmentId            *string                        `protobuf:"bytes,14,opt,name=SignerDepartmentId" json:"SignerDepartmentId,omitempty"`
	ResolutionRequestInfo         *ResolutionRequestInfo         `protobuf:"bytes,15,opt,name=ResolutionRequestInfo" json:"ResolutionRequestInfo,omitempty"`
	ResolutionRequestDenialInfo   *ResolutionRequestDenialInfo   `protobuf:"bytes,16,opt,name=ResolutionRequestDenialInfo" json:"ResolutionRequestDenialInfo,omitempty"`
	NeedReceipt                   *bool                          `protobuf:"varint,17,opt,name=NeedReceipt,def=0" json:"NeedReceipt,omitempty"`
	PacketId                      *string                        `protobuf:"bytes,18,opt,name=PacketId" json:"PacketId,omitempty"`
	IsApprovementSignature        *bool                          `protobuf:"varint,19,opt,name=IsApprovementSignature,def=0" json:"IsApprovementSignature,omitempty"`
	IsEncryptedContent            *bool                          `protobuf:"varint,20,opt,name=IsEncryptedContent,def=0" json:"IsEncryptedContent,omitempty"`
	AttachmentVersion             *string                        `protobuf:"bytes,21,opt,name=AttachmentVersion" json:"AttachmentVersion,omitempty"`
	ResolutionRouteAssignmentInfo *ResolutionRouteAssignmentInfo `protobuf:"bytes,22,opt,name=ResolutionRouteAssignmentInfo" json:"ResolutionRouteAssignmentInfo,omitempty"`
	ResolutionRouteRemovalInfo    *ResolutionRouteRemovalInfo    `protobuf:"bytes,23,opt,name=ResolutionRouteRemovalInfo" json:"ResolutionRouteRemovalInfo,omitempty"`
	CancellationInfo              *CancellationInfo              `protobuf:"bytes,24,opt,name=CancellationInfo" json:"CancellationInfo,omitempty"`
	Labels                        []string                       `protobuf:"bytes,25,rep,name=Labels" json:"Labels,omitempty"`
	Version                       *string                        `protobuf:"bytes,26,opt,name=Version" json:"Version,omitempty"`
	TemplateTransformationInfo    *TemplateTransformationInfo    `protobuf:"bytes,27,opt,name=TemplateTransformationInfo" json:"TemplateTransformationInfo,omitempty"`
	TemplateRefusalInfo           *TemplateRefusalInfo           `protobuf:"bytes,28,opt,name=TemplateRefusalInfo" json:"TemplateRefusalInfo,omitempty"`
	OuterDocflow                  *OuterDocflowInfo              `protobuf:"bytes,29,opt,name=OuterDocflow" json:"OuterDocflow,omitempty"`
	RevocationRequestInfo         *EntityRevocationRequestInfo   `protobuf:"bytes,30,opt,name=RevocationRequestInfo" json:"RevocationRequestInfo,omitempty"`
	ContentTypeId                 *string                        `protobuf:"bytes,31,opt,name=ContentTypeId" json:"ContentTypeId,omitempty"`
	PowerOfAttorneyInfo           *PowerOfAttorneyInfo           `protobuf:"bytes,32,opt,name=PowerOfAttorneyInfo" json:"PowerOfAttorneyInfo,omitempty"`
}

// Default values for Entity fields.
const (
	Default_Entity_EntityType             = EntityType_TypeUnknownEntity
	Default_Entity_AttachmentType         = AttachmentType_UnknownAttachmentType
	Default_Entity_NeedRecipientSignature = bool(false)
	Default_Entity_RawCreationDate        = int64(0)
	Default_Entity_NeedReceipt            = bool(false)
	Default_Entity_IsApprovementSignature = bool(false)
	Default_Entity_IsEncryptedContent     = bool(false)
)

func (x *Entity) Reset() {
	*x = Entity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Entity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Entity) ProtoMessage() {}

func (x *Entity) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Entity.ProtoReflect.Descriptor instead.
func (*Entity) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{75}
}

func (x *Entity) GetEntityType() EntityType {
	if x != nil && x.EntityType != nil {
		return *x.EntityType
	}
	return Default_Entity_EntityType
}

func (x *Entity) GetEntityId() string {
	if x != nil && x.EntityId != nil {
		return *x.EntityId
	}
	return ""
}

func (x *Entity) GetParentEntityId() string {
	if x != nil && x.ParentEntityId != nil {
		return *x.ParentEntityId
	}
	return ""
}

func (x *Entity) GetContent() *Content {
	if x != nil {
		return x.Content
	}
	return nil
}

func (x *Entity) GetAttachmentType() AttachmentType {
	if x != nil && x.AttachmentType != nil {
		return *x.AttachmentType
	}
	return Default_Entity_AttachmentType
}

func (x *Entity) GetFileName() string {
	if x != nil && x.FileName != nil {
		return *x.FileName
	}
	return ""
}

func (x *Entity) GetNeedRecipientSignature() bool {
	if x != nil && x.NeedRecipientSignature != nil {
		return *x.NeedRecipientSignature
	}
	return Default_Entity_NeedRecipientSignature
}

func (x *Entity) GetSignerBoxId() string {
	if x != nil && x.SignerBoxId != nil {
		return *x.SignerBoxId
	}
	return ""
}

func (x *Entity) GetNotDeliveredEventId() string {
	if x != nil && x.NotDeliveredEventId != nil {
		return *x.NotDeliveredEventId
	}
	return ""
}

func (x *Entity) GetDocumentInfo() *Document {
	if x != nil {
		return x.DocumentInfo
	}
	return nil
}

func (x *Entity) GetRawCreationDate() int64 {
	if x != nil && x.RawCreationDate != nil {
		return *x.RawCreationDate
	}
	return Default_Entity_RawCreationDate
}

func (x *Entity) GetResolutionInfo() *ResolutionInfo {
	if x != nil {
		return x.ResolutionInfo
	}
	return nil
}

func (x *Entity) GetSignerDepartmentId() string {
	if x != nil && x.SignerDepartmentId != nil {
		return *x.SignerDepartmentId
	}
	return ""
}

func (x *Entity) GetResolutionRequestInfo() *ResolutionRequestInfo {
	if x != nil {
		return x.ResolutionRequestInfo
	}
	return nil
}

func (x *Entity) GetResolutionRequestDenialInfo() *ResolutionRequestDenialInfo {
	if x != nil {
		return x.ResolutionRequestDenialInfo
	}
	return nil
}

func (x *Entity) GetNeedReceipt() bool {
	if x != nil && x.NeedReceipt != nil {
		return *x.NeedReceipt
	}
	return Default_Entity_NeedReceipt
}

func (x *Entity) GetPacketId() string {
	if x != nil && x.PacketId != nil {
		return *x.PacketId
	}
	return ""
}

func (x *Entity) GetIsApprovementSignature() bool {
	if x != nil && x.IsApprovementSignature != nil {
		return *x.IsApprovementSignature
	}
	return Default_Entity_IsApprovementSignature
}

func (x *Entity) GetIsEncryptedContent() bool {
	if x != nil && x.IsEncryptedContent != nil {
		return *x.IsEncryptedContent
	}
	return Default_Entity_IsEncryptedContent
}

func (x *Entity) GetAttachmentVersion() string {
	if x != nil && x.AttachmentVersion != nil {
		return *x.AttachmentVersion
	}
	return ""
}

func (x *Entity) GetResolutionRouteAssignmentInfo() *ResolutionRouteAssignmentInfo {
	if x != nil {
		return x.ResolutionRouteAssignmentInfo
	}
	return nil
}

func (x *Entity) GetResolutionRouteRemovalInfo() *ResolutionRouteRemovalInfo {
	if x != nil {
		return x.ResolutionRouteRemovalInfo
	}
	return nil
}

func (x *Entity) GetCancellationInfo() *CancellationInfo {
	if x != nil {
		return x.CancellationInfo
	}
	return nil
}

func (x *Entity) GetLabels() []string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *Entity) GetVersion() string {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return ""
}

func (x *Entity) GetTemplateTransformationInfo() *TemplateTransformationInfo {
	if x != nil {
		return x.TemplateTransformationInfo
	}
	return nil
}

func (x *Entity) GetTemplateRefusalInfo() *TemplateRefusalInfo {
	if x != nil {
		return x.TemplateRefusalInfo
	}
	return nil
}

func (x *Entity) GetOuterDocflow() *OuterDocflowInfo {
	if x != nil {
		return x.OuterDocflow
	}
	return nil
}

func (x *Entity) GetRevocationRequestInfo() *EntityRevocationRequestInfo {
	if x != nil {
		return x.RevocationRequestInfo
	}
	return nil
}

func (x *Entity) GetContentTypeId() string {
	if x != nil && x.ContentTypeId != nil {
		return *x.ContentTypeId
	}
	return ""
}

func (x *Entity) GetPowerOfAttorneyInfo() *PowerOfAttorneyInfo {
	if x != nil {
		return x.PowerOfAttorneyInfo
	}
	return nil
}

type Content struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Size *int32 `protobuf:"fixed32,1,req,name=Size" json:"Size,omitempty"`
	Data []byte `protobuf:"bytes,2,opt,name=Data" json:"Data,omitempty"`
}

func (x *Content) Reset() {
	*x = Content{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Content) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Content) ProtoMessage() {}

func (x *Content) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Content.ProtoReflect.Descriptor instead.
func (*Content) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{76}
}

func (x *Content) GetSize() int32 {
	if x != nil && x.Size != nil {
		return *x.Size
	}
	return 0
}

func (x *Content) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type Document struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IndexKey                                    *string                                      `protobuf:"bytes,1,opt,name=IndexKey" json:"IndexKey,omitempty"`
	MessageId                                   *string                                      `protobuf:"bytes,2,req,name=MessageId" json:"MessageId,omitempty"`
	EntityId                                    *string                                      `protobuf:"bytes,3,req,name=EntityId" json:"EntityId,omitempty"`
	CreationTimestampTicks                      *int64                                       `protobuf:"fixed64,4,req,name=CreationTimestampTicks" json:"CreationTimestampTicks,omitempty"`
	CounteragentBoxId                           *string                                      `protobuf:"bytes,5,opt,name=CounteragentBoxId" json:"CounteragentBoxId,omitempty"`
	DocumentType                                *DocumentType                                `protobuf:"varint,6,opt,name=DocumentType,enum=DocumentType,def=-1" json:"DocumentType,omitempty"`
	InitialDocumentIds                          []*DocumentId                                `protobuf:"bytes,7,rep,name=InitialDocumentIds" json:"InitialDocumentIds,omitempty"`
	SubordinateDocumentIds                      []*DocumentId                                `protobuf:"bytes,8,rep,name=SubordinateDocumentIds" json:"SubordinateDocumentIds,omitempty"`
	Content                                     *Content                                     `protobuf:"bytes,9,opt,name=Content" json:"Content,omitempty"`
	FileName                                    *string                                      `protobuf:"bytes,10,opt,name=FileName" json:"FileName,omitempty"`
	DocumentDate                                *string                                      `protobuf:"bytes,11,opt,name=DocumentDate" json:"DocumentDate,omitempty"`
	DocumentNumber                              *string                                      `protobuf:"bytes,12,opt,name=DocumentNumber" json:"DocumentNumber,omitempty"`
	NonformalizedDocumentMetadata               *NonformalizedDocumentMetadata               `protobuf:"bytes,13,opt,name=NonformalizedDocumentMetadata" json:"NonformalizedDocumentMetadata,omitempty"`
	InvoiceMetadata                             *InvoiceMetadata                             `protobuf:"bytes,14,opt,name=InvoiceMetadata" json:"InvoiceMetadata,omitempty"`
	TrustConnectionRequestMetadata              *TrustConnectionRequestMetadata              `protobuf:"bytes,15,opt,name=TrustConnectionRequestMetadata" json:"TrustConnectionRequestMetadata,omitempty"`
	Torg12Metadata                              *BasicDocumentMetadata                       `protobuf:"bytes,16,opt,name=Torg12Metadata" json:"Torg12Metadata,omitempty"`
	InvoiceRevisionMetadata                     *InvoiceRevisionMetadata                     `protobuf:"bytes,17,opt,name=InvoiceRevisionMetadata" json:"InvoiceRevisionMetadata,omitempty"`
	InvoiceCorrectionMetadata                   *InvoiceCorrectionMetadata                   `protobuf:"bytes,18,opt,name=InvoiceCorrectionMetadata" json:"InvoiceCorrectionMetadata,omitempty"`
	InvoiceCorrectionRevisionMetadata           *InvoiceCorrectionRevisionMetadata           `protobuf:"bytes,19,opt,name=InvoiceCorrectionRevisionMetadata" json:"InvoiceCorrectionRevisionMetadata,omitempty"`
	AcceptanceCertificateMetadata               *AcceptanceCertificateMetadata               `protobuf:"bytes,20,opt,name=AcceptanceCertificateMetadata" json:"AcceptanceCertificateMetadata,omitempty"`
	ProformaInvoiceMetadata                     *ProformaInvoiceMetadata                     `protobuf:"bytes,21,opt,name=ProformaInvoiceMetadata" json:"ProformaInvoiceMetadata,omitempty"`
	XmlTorg12Metadata                           *BasicDocumentMetadata                       `protobuf:"bytes,22,opt,name=XmlTorg12Metadata" json:"XmlTorg12Metadata,omitempty"`
	XmlAcceptanceCertificateMetadata            *BasicDocumentMetadata                       `protobuf:"bytes,23,opt,name=XmlAcceptanceCertificateMetadata" json:"XmlAcceptanceCertificateMetadata,omitempty"`
	IsDeleted                                   *bool                                        `protobuf:"varint,24,opt,name=IsDeleted,def=0" json:"IsDeleted,omitempty"`
	DepartmentId                                *string                                      `protobuf:"bytes,25,opt,name=DepartmentId" json:"DepartmentId,omitempty"`
	IsTest                                      *bool                                        `protobuf:"varint,26,opt,name=IsTest,def=0" json:"IsTest,omitempty"`
	FromDepartmentId                            *string                                      `protobuf:"bytes,27,opt,name=FromDepartmentId" json:"FromDepartmentId,omitempty"`
	ToDepartmentId                              *string                                      `protobuf:"bytes,28,opt,name=ToDepartmentId" json:"ToDepartmentId,omitempty"`
	PriceListMetadata                           *PriceListMetadata                           `protobuf:"bytes,29,opt,name=PriceListMetadata" json:"PriceListMetadata,omitempty"`
	CustomDocumentId                            *string                                      `protobuf:"bytes,30,opt,name=CustomDocumentId" json:"CustomDocumentId,omitempty"`
	ResolutionStatus                            *ResolutionStatus                            `protobuf:"bytes,31,opt,name=ResolutionStatus" json:"ResolutionStatus,omitempty"`
	RevocationStatus                            *RevocationStatus                            `protobuf:"varint,32,opt,name=RevocationStatus,enum=RevocationStatus,def=0" json:"RevocationStatus,omitempty"`
	SendTimestampTicks                          *int64                                       `protobuf:"fixed64,33,opt,name=SendTimestampTicks" json:"SendTimestampTicks,omitempty"`
	DeliveryTimestampTicks                      *int64                                       `protobuf:"fixed64,34,opt,name=DeliveryTimestampTicks" json:"DeliveryTimestampTicks,omitempty"`
	ForwardDocumentEvents                       []*ForwardDocumentEvent                      `protobuf:"bytes,35,rep,name=ForwardDocumentEvents" json:"ForwardDocumentEvents,omitempty"`
	ReconciliationActMetadata                   *BilateralDocumentMetadata                   `protobuf:"bytes,38,opt,name=ReconciliationActMetadata" json:"ReconciliationActMetadata,omitempty"`
	ContractMetadata                            *ContractMetadata                            `protobuf:"bytes,39,opt,name=ContractMetadata" json:"ContractMetadata,omitempty"`
	Torg13Metadata                              *BasicDocumentMetadata                       `protobuf:"bytes,40,opt,name=Torg13Metadata" json:"Torg13Metadata,omitempty"`
	ServiceDetailsMetadata                      *ServiceDetailsMetadata                      `protobuf:"bytes,41,opt,name=ServiceDetailsMetadata" json:"ServiceDetailsMetadata,omitempty"`
	RoamingNotificationStatus                   *RoamingNotificationStatus                   `protobuf:"varint,42,opt,name=RoamingNotificationStatus,enum=RoamingNotificationStatus,def=0" json:"RoamingNotificationStatus,omitempty"`
	HasCustomPrintForm                          *bool                                        `protobuf:"varint,43,opt,name=HasCustomPrintForm,def=0" json:"HasCustomPrintForm,omitempty"` // Deprecated
	CustomData                                  []*CustomDataItem                            `protobuf:"bytes,44,rep,name=CustomData" json:"CustomData,omitempty"`
	PacketId                                    *string                                      `protobuf:"bytes,45,opt,name=PacketId" json:"PacketId,omitempty"`
	DocumentDirection                           *DocumentDirection                           `protobuf:"varint,46,opt,name=DocumentDirection,enum=DocumentDirection,def=0" json:"DocumentDirection,omitempty"`
	LastModificationTimestampTicks              *int64                                       `protobuf:"fixed64,47,opt,name=LastModificationTimestampTicks" json:"LastModificationTimestampTicks,omitempty"`
	IsEncryptedContent                          *bool                                        `protobuf:"varint,48,opt,name=IsEncryptedContent" json:"IsEncryptedContent,omitempty"`
	SenderSignatureStatus                       *SenderSignatureStatus                       `protobuf:"varint,49,opt,name=SenderSignatureStatus,enum=SenderSignatureStatus,def=0" json:"SenderSignatureStatus,omitempty"`
	SupplementaryAgreementMetadata              *SupplementaryAgreementMetadata              `protobuf:"bytes,50,opt,name=SupplementaryAgreementMetadata" json:"SupplementaryAgreementMetadata,omitempty"`
	IsRead                                      *bool                                        `protobuf:"varint,51,opt,name=IsRead,def=0" json:"IsRead,omitempty"`
	RoamingNotificationStatusDescription        *string                                      `protobuf:"bytes,52,opt,name=RoamingNotificationStatusDescription" json:"RoamingNotificationStatusDescription,omitempty"`
	PacketIsLocked                              *bool                                        `protobuf:"varint,53,opt,name=PacketIsLocked,def=0" json:"PacketIsLocked,omitempty"`
	PriceListAgreementMetadata                  *NonformalizedDocumentMetadata               `protobuf:"bytes,54,opt,name=PriceListAgreementMetadata" json:"PriceListAgreementMetadata,omitempty"`
	CertificateRegistryMetadata                 *NonformalizedDocumentMetadata               `protobuf:"bytes,55,opt,name=CertificateRegistryMetadata" json:"CertificateRegistryMetadata,omitempty"`
	UniversalTransferDocumentMetadata           *UniversalTransferDocumentMetadata           `protobuf:"bytes,56,opt,name=UniversalTransferDocumentMetadata" json:"UniversalTransferDocumentMetadata,omitempty"`
	UniversalTransferDocumentRevisionMetadata   *UniversalTransferDocumentRevisionMetadata   `protobuf:"bytes,57,opt,name=UniversalTransferDocumentRevisionMetadata" json:"UniversalTransferDocumentRevisionMetadata,omitempty"`
	UniversalCorrectionDocumentMetadata         *UniversalCorrectionDocumentMetadata         `protobuf:"bytes,58,opt,name=UniversalCorrectionDocumentMetadata" json:"UniversalCorrectionDocumentMetadata,omitempty"`
	UniversalCorrectionDocumentRevisionMetadata *UniversalCorrectionDocumentRevisionMetadata `protobuf:"bytes,59,opt,name=UniversalCorrectionDocumentRevisionMetadata" json:"UniversalCorrectionDocumentRevisionMetadata,omitempty"`
	ResolutionRouteId                           *string                                      `protobuf:"bytes,60,opt,name=ResolutionRouteId,def=" json:"ResolutionRouteId,omitempty"`
	AttachmentVersion                           *string                                      `protobuf:"bytes,61,opt,name=AttachmentVersion" json:"AttachmentVersion,omitempty"`
	ProxySignatureStatus                        *ProxySignatureStatus                        `protobuf:"varint,62,opt,name=ProxySignatureStatus,enum=ProxySignatureStatus,def=0" json:"ProxySignatureStatus,omitempty"`
	TypeNamedId                                 *string                                      `protobuf:"bytes,63,req,name=TypeNamedId" json:"TypeNamedId,omitempty"`
	Function                                    *string                                      `protobuf:"bytes,64,req,name=Function" json:"Function,omitempty"`
	WorkflowId                                  *int32                                       `protobuf:"varint,65,req,name=WorkflowId" json:"WorkflowId,omitempty"`
	Title                                       *string                                      `protobuf:"bytes,66,req,name=Title" json:"Title,omitempty"`
	Metadata                                    []*MetadataItem                              `protobuf:"bytes,67,rep,name=Metadata" json:"Metadata,omitempty"`
	RecipientReceiptMetadata                    *RecipientReceiptMetadata                    `protobuf:"bytes,68,req,name=RecipientReceiptMetadata" json:"RecipientReceiptMetadata,omitempty"`
	ConfirmationMetadata                        *ConfirmationMetadata                        `protobuf:"bytes,69,req,name=ConfirmationMetadata" json:"ConfirmationMetadata,omitempty"`
	RecipientResponseStatus                     *RecipientResponseStatus                     `protobuf:"varint,70,req,name=RecipientResponseStatus,enum=RecipientResponseStatus,def=0" json:"RecipientResponseStatus,omitempty"`
	AmendmentRequestMetadata                    *AmendmentRequestMetadata                    `protobuf:"bytes,71,req,name=AmendmentRequestMetadata" json:"AmendmentRequestMetadata,omitempty"`
	Origin                                      *Origin                                      `protobuf:"bytes,72,opt,name=Origin" json:"Origin,omitempty"`
	EditingSettingId                            *string                                      `protobuf:"bytes,73,opt,name=EditingSettingId,def=" json:"EditingSettingId,omitempty"`
	LockMode                                    *LockMode                                    `protobuf:"varint,74,req,name=LockMode,enum=LockMode" json:"LockMode,omitempty"`
	SenderReceiptMetadata                       *SenderReceiptMetadata                       `protobuf:"bytes,75,req,name=SenderReceiptMetadata" json:"SenderReceiptMetadata,omitempty"`
	Version                                     *string                                      `protobuf:"bytes,76,req,name=Version" json:"Version,omitempty"`
	LastOuterDocflows                           []*LastOuterDocflow                          `protobuf:"bytes,77,rep,name=LastOuterDocflows" json:"LastOuterDocflows,omitempty"`
	ProxyBoxId                                  *string                                      `protobuf:"bytes,78,opt,name=ProxyBoxId" json:"ProxyBoxId,omitempty"`
	ProxyDepartmentId                           *string                                      `protobuf:"bytes,79,opt,name=ProxyDepartmentId" json:"ProxyDepartmentId,omitempty"`
	DocflowStatus                               *DocflowStatusV3                             `protobuf:"bytes,80,req,name=DocflowStatus" json:"DocflowStatus,omitempty"`
}

// Default values for Document fields.
const (
	Default_Document_DocumentType              = DocumentType_UnknownDocumentTypeDT
	Default_Document_IsDeleted                 = bool(false)
	Default_Document_IsTest                    = bool(false)
	Default_Document_RevocationStatus          = RevocationStatus_UnknownRevocationStatus
	Default_Document_RoamingNotificationStatus = RoamingNotificationStatus_UnknownRoamingNotificationStatus
	Default_Document_HasCustomPrintForm        = bool(false)
	Default_Document_DocumentDirection         = DocumentDirection_UnknownDocumentDirection
	Default_Document_SenderSignatureStatus     = SenderSignatureStatus_UnknownSenderSignatureStatus
	Default_Document_IsRead                    = bool(false)
	Default_Document_PacketIsLocked            = bool(false)
	Default_Document_ResolutionRouteId         = string("")
	Default_Document_ProxySignatureStatus      = ProxySignatureStatus_UnknownProxySignatureStatus
	Default_Document_RecipientResponseStatus   = RecipientResponseStatus_RecipientResponseStatusUnknown
	Default_Document_EditingSettingId          = string("")
)

func (x *Document) Reset() {
	*x = Document{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Document) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Document) ProtoMessage() {}

func (x *Document) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Document.ProtoReflect.Descriptor instead.
func (*Document) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{77}
}

func (x *Document) GetIndexKey() string {
	if x != nil && x.IndexKey != nil {
		return *x.IndexKey
	}
	return ""
}

func (x *Document) GetMessageId() string {
	if x != nil && x.MessageId != nil {
		return *x.MessageId
	}
	return ""
}

func (x *Document) GetEntityId() string {
	if x != nil && x.EntityId != nil {
		return *x.EntityId
	}
	return ""
}

func (x *Document) GetCreationTimestampTicks() int64 {
	if x != nil && x.CreationTimestampTicks != nil {
		return *x.CreationTimestampTicks
	}
	return 0
}

func (x *Document) GetCounteragentBoxId() string {
	if x != nil && x.CounteragentBoxId != nil {
		return *x.CounteragentBoxId
	}
	return ""
}

func (x *Document) GetDocumentType() DocumentType {
	if x != nil && x.DocumentType != nil {
		return *x.DocumentType
	}
	return Default_Document_DocumentType
}

func (x *Document) GetInitialDocumentIds() []*DocumentId {
	if x != nil {
		return x.InitialDocumentIds
	}
	return nil
}

func (x *Document) GetSubordinateDocumentIds() []*DocumentId {
	if x != nil {
		return x.SubordinateDocumentIds
	}
	return nil
}

func (x *Document) GetContent() *Content {
	if x != nil {
		return x.Content
	}
	return nil
}

func (x *Document) GetFileName() string {
	if x != nil && x.FileName != nil {
		return *x.FileName
	}
	return ""
}

func (x *Document) GetDocumentDate() string {
	if x != nil && x.DocumentDate != nil {
		return *x.DocumentDate
	}
	return ""
}

func (x *Document) GetDocumentNumber() string {
	if x != nil && x.DocumentNumber != nil {
		return *x.DocumentNumber
	}
	return ""
}

func (x *Document) GetNonformalizedDocumentMetadata() *NonformalizedDocumentMetadata {
	if x != nil {
		return x.NonformalizedDocumentMetadata
	}
	return nil
}

func (x *Document) GetInvoiceMetadata() *InvoiceMetadata {
	if x != nil {
		return x.InvoiceMetadata
	}
	return nil
}

func (x *Document) GetTrustConnectionRequestMetadata() *TrustConnectionRequestMetadata {
	if x != nil {
		return x.TrustConnectionRequestMetadata
	}
	return nil
}

func (x *Document) GetTorg12Metadata() *BasicDocumentMetadata {
	if x != nil {
		return x.Torg12Metadata
	}
	return nil
}

func (x *Document) GetInvoiceRevisionMetadata() *InvoiceRevisionMetadata {
	if x != nil {
		return x.InvoiceRevisionMetadata
	}
	return nil
}

func (x *Document) GetInvoiceCorrectionMetadata() *InvoiceCorrectionMetadata {
	if x != nil {
		return x.InvoiceCorrectionMetadata
	}
	return nil
}

func (x *Document) GetInvoiceCorrectionRevisionMetadata() *InvoiceCorrectionRevisionMetadata {
	if x != nil {
		return x.InvoiceCorrectionRevisionMetadata
	}
	return nil
}

func (x *Document) GetAcceptanceCertificateMetadata() *AcceptanceCertificateMetadata {
	if x != nil {
		return x.AcceptanceCertificateMetadata
	}
	return nil
}

func (x *Document) GetProformaInvoiceMetadata() *ProformaInvoiceMetadata {
	if x != nil {
		return x.ProformaInvoiceMetadata
	}
	return nil
}

func (x *Document) GetXmlTorg12Metadata() *BasicDocumentMetadata {
	if x != nil {
		return x.XmlTorg12Metadata
	}
	return nil
}

func (x *Document) GetXmlAcceptanceCertificateMetadata() *BasicDocumentMetadata {
	if x != nil {
		return x.XmlAcceptanceCertificateMetadata
	}
	return nil
}

func (x *Document) GetIsDeleted() bool {
	if x != nil && x.IsDeleted != nil {
		return *x.IsDeleted
	}
	return Default_Document_IsDeleted
}

func (x *Document) GetDepartmentId() string {
	if x != nil && x.DepartmentId != nil {
		return *x.DepartmentId
	}
	return ""
}

func (x *Document) GetIsTest() bool {
	if x != nil && x.IsTest != nil {
		return *x.IsTest
	}
	return Default_Document_IsTest
}

func (x *Document) GetFromDepartmentId() string {
	if x != nil && x.FromDepartmentId != nil {
		return *x.FromDepartmentId
	}
	return ""
}

func (x *Document) GetToDepartmentId() string {
	if x != nil && x.ToDepartmentId != nil {
		return *x.ToDepartmentId
	}
	return ""
}

func (x *Document) GetPriceListMetadata() *PriceListMetadata {
	if x != nil {
		return x.PriceListMetadata
	}
	return nil
}

func (x *Document) GetCustomDocumentId() string {
	if x != nil && x.CustomDocumentId != nil {
		return *x.CustomDocumentId
	}
	return ""
}

func (x *Document) GetResolutionStatus() *ResolutionStatus {
	if x != nil {
		return x.ResolutionStatus
	}
	return nil
}

func (x *Document) GetRevocationStatus() RevocationStatus {
	if x != nil && x.RevocationStatus != nil {
		return *x.RevocationStatus
	}
	return Default_Document_RevocationStatus
}

func (x *Document) GetSendTimestampTicks() int64 {
	if x != nil && x.SendTimestampTicks != nil {
		return *x.SendTimestampTicks
	}
	return 0
}

func (x *Document) GetDeliveryTimestampTicks() int64 {
	if x != nil && x.DeliveryTimestampTicks != nil {
		return *x.DeliveryTimestampTicks
	}
	return 0
}

func (x *Document) GetForwardDocumentEvents() []*ForwardDocumentEvent {
	if x != nil {
		return x.ForwardDocumentEvents
	}
	return nil
}

func (x *Document) GetReconciliationActMetadata() *BilateralDocumentMetadata {
	if x != nil {
		return x.ReconciliationActMetadata
	}
	return nil
}

func (x *Document) GetContractMetadata() *ContractMetadata {
	if x != nil {
		return x.ContractMetadata
	}
	return nil
}

func (x *Document) GetTorg13Metadata() *BasicDocumentMetadata {
	if x != nil {
		return x.Torg13Metadata
	}
	return nil
}

func (x *Document) GetServiceDetailsMetadata() *ServiceDetailsMetadata {
	if x != nil {
		return x.ServiceDetailsMetadata
	}
	return nil
}

func (x *Document) GetRoamingNotificationStatus() RoamingNotificationStatus {
	if x != nil && x.RoamingNotificationStatus != nil {
		return *x.RoamingNotificationStatus
	}
	return Default_Document_RoamingNotificationStatus
}

func (x *Document) GetHasCustomPrintForm() bool {
	if x != nil && x.HasCustomPrintForm != nil {
		return *x.HasCustomPrintForm
	}
	return Default_Document_HasCustomPrintForm
}

func (x *Document) GetCustomData() []*CustomDataItem {
	if x != nil {
		return x.CustomData
	}
	return nil
}

func (x *Document) GetPacketId() string {
	if x != nil && x.PacketId != nil {
		return *x.PacketId
	}
	return ""
}

func (x *Document) GetDocumentDirection() DocumentDirection {
	if x != nil && x.DocumentDirection != nil {
		return *x.DocumentDirection
	}
	return Default_Document_DocumentDirection
}

func (x *Document) GetLastModificationTimestampTicks() int64 {
	if x != nil && x.LastModificationTimestampTicks != nil {
		return *x.LastModificationTimestampTicks
	}
	return 0
}

func (x *Document) GetIsEncryptedContent() bool {
	if x != nil && x.IsEncryptedContent != nil {
		return *x.IsEncryptedContent
	}
	return false
}

func (x *Document) GetSenderSignatureStatus() SenderSignatureStatus {
	if x != nil && x.SenderSignatureStatus != nil {
		return *x.SenderSignatureStatus
	}
	return Default_Document_SenderSignatureStatus
}

func (x *Document) GetSupplementaryAgreementMetadata() *SupplementaryAgreementMetadata {
	if x != nil {
		return x.SupplementaryAgreementMetadata
	}
	return nil
}

func (x *Document) GetIsRead() bool {
	if x != nil && x.IsRead != nil {
		return *x.IsRead
	}
	return Default_Document_IsRead
}

func (x *Document) GetRoamingNotificationStatusDescription() string {
	if x != nil && x.RoamingNotificationStatusDescription != nil {
		return *x.RoamingNotificationStatusDescription
	}
	return ""
}

func (x *Document) GetPacketIsLocked() bool {
	if x != nil && x.PacketIsLocked != nil {
		return *x.PacketIsLocked
	}
	return Default_Document_PacketIsLocked
}

func (x *Document) GetPriceListAgreementMetadata() *NonformalizedDocumentMetadata {
	if x != nil {
		return x.PriceListAgreementMetadata
	}
	return nil
}

func (x *Document) GetCertificateRegistryMetadata() *NonformalizedDocumentMetadata {
	if x != nil {
		return x.CertificateRegistryMetadata
	}
	return nil
}

func (x *Document) GetUniversalTransferDocumentMetadata() *UniversalTransferDocumentMetadata {
	if x != nil {
		return x.UniversalTransferDocumentMetadata
	}
	return nil
}

func (x *Document) GetUniversalTransferDocumentRevisionMetadata() *UniversalTransferDocumentRevisionMetadata {
	if x != nil {
		return x.UniversalTransferDocumentRevisionMetadata
	}
	return nil
}

func (x *Document) GetUniversalCorrectionDocumentMetadata() *UniversalCorrectionDocumentMetadata {
	if x != nil {
		return x.UniversalCorrectionDocumentMetadata
	}
	return nil
}

func (x *Document) GetUniversalCorrectionDocumentRevisionMetadata() *UniversalCorrectionDocumentRevisionMetadata {
	if x != nil {
		return x.UniversalCorrectionDocumentRevisionMetadata
	}
	return nil
}

func (x *Document) GetResolutionRouteId() string {
	if x != nil && x.ResolutionRouteId != nil {
		return *x.ResolutionRouteId
	}
	return Default_Document_ResolutionRouteId
}

func (x *Document) GetAttachmentVersion() string {
	if x != nil && x.AttachmentVersion != nil {
		return *x.AttachmentVersion
	}
	return ""
}

func (x *Document) GetProxySignatureStatus() ProxySignatureStatus {
	if x != nil && x.ProxySignatureStatus != nil {
		return *x.ProxySignatureStatus
	}
	return Default_Document_ProxySignatureStatus
}

func (x *Document) GetTypeNamedId() string {
	if x != nil && x.TypeNamedId != nil {
		return *x.TypeNamedId
	}
	return ""
}

func (x *Document) GetFunction() string {
	if x != nil && x.Function != nil {
		return *x.Function
	}
	return ""
}

func (x *Document) GetWorkflowId() int32 {
	if x != nil && x.WorkflowId != nil {
		return *x.WorkflowId
	}
	return 0
}

func (x *Document) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *Document) GetMetadata() []*MetadataItem {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *Document) GetRecipientReceiptMetadata() *RecipientReceiptMetadata {
	if x != nil {
		return x.RecipientReceiptMetadata
	}
	return nil
}

func (x *Document) GetConfirmationMetadata() *ConfirmationMetadata {
	if x != nil {
		return x.ConfirmationMetadata
	}
	return nil
}

func (x *Document) GetRecipientResponseStatus() RecipientResponseStatus {
	if x != nil && x.RecipientResponseStatus != nil {
		return *x.RecipientResponseStatus
	}
	return Default_Document_RecipientResponseStatus
}

func (x *Document) GetAmendmentRequestMetadata() *AmendmentRequestMetadata {
	if x != nil {
		return x.AmendmentRequestMetadata
	}
	return nil
}

func (x *Document) GetOrigin() *Origin {
	if x != nil {
		return x.Origin
	}
	return nil
}

func (x *Document) GetEditingSettingId() string {
	if x != nil && x.EditingSettingId != nil {
		return *x.EditingSettingId
	}
	return Default_Document_EditingSettingId
}

func (x *Document) GetLockMode() LockMode {
	if x != nil && x.LockMode != nil {
		return *x.LockMode
	}
	return LockMode_None
}

func (x *Document) GetSenderReceiptMetadata() *SenderReceiptMetadata {
	if x != nil {
		return x.SenderReceiptMetadata
	}
	return nil
}

func (x *Document) GetVersion() string {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return ""
}

func (x *Document) GetLastOuterDocflows() []*LastOuterDocflow {
	if x != nil {
		return x.LastOuterDocflows
	}
	return nil
}

func (x *Document) GetProxyBoxId() string {
	if x != nil && x.ProxyBoxId != nil {
		return *x.ProxyBoxId
	}
	return ""
}

func (x *Document) GetProxyDepartmentId() string {
	if x != nil && x.ProxyDepartmentId != nil {
		return *x.ProxyDepartmentId
	}
	return ""
}

func (x *Document) GetDocflowStatus() *DocflowStatusV3 {
	if x != nil {
		return x.DocflowStatus
	}
	return nil
}

type ResolutionInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResolutionType   *ResolutionType `protobuf:"varint,1,opt,name=ResolutionType,enum=ResolutionType,def=3" json:"ResolutionType,omitempty"`
	Author           *string         `protobuf:"bytes,2,req,name=Author" json:"Author,omitempty"` // ФИО согласователя
	InitialRequestId *string         `protobuf:"bytes,3,opt,name=InitialRequestId" json:"InitialRequestId,omitempty"`
}

// Default values for ResolutionInfo fields.
const (
	Default_ResolutionInfo_ResolutionType = ResolutionType_UnknownResolutionType
)

func (x *ResolutionInfo) Reset() {
	*x = ResolutionInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResolutionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResolutionInfo) ProtoMessage() {}

func (x *ResolutionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResolutionInfo.ProtoReflect.Descriptor instead.
func (*ResolutionInfo) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{78}
}

func (x *ResolutionInfo) GetResolutionType() ResolutionType {
	if x != nil && x.ResolutionType != nil {
		return *x.ResolutionType
	}
	return Default_ResolutionInfo_ResolutionType
}

func (x *ResolutionInfo) GetAuthor() string {
	if x != nil && x.Author != nil {
		return *x.Author
	}
	return ""
}

func (x *ResolutionInfo) GetInitialRequestId() string {
	if x != nil && x.InitialRequestId != nil {
		return *x.InitialRequestId
	}
	return ""
}

type ResolutionRequestInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestType  *ResolutionRequestType `protobuf:"varint,1,opt,name=RequestType,enum=ResolutionRequestType,def=-1" json:"RequestType,omitempty"`
	Author       *string                `protobuf:"bytes,2,req,name=Author" json:"Author,omitempty"`
	Target       *ResolutionTarget      `protobuf:"bytes,3,opt,name=Target" json:"Target,omitempty"`
	ResolvedWith *string                `protobuf:"bytes,4,opt,name=ResolvedWith" json:"ResolvedWith,omitempty"`
	Actions      []ResolutionAction     `protobuf:"varint,5,rep,name=Actions,enum=ResolutionAction" json:"Actions,omitempty"`
}

// Default values for ResolutionRequestInfo fields.
const (
	Default_ResolutionRequestInfo_RequestType = ResolutionRequestType_UnknownResolutionRequestType
)

func (x *ResolutionRequestInfo) Reset() {
	*x = ResolutionRequestInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResolutionRequestInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResolutionRequestInfo) ProtoMessage() {}

func (x *ResolutionRequestInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResolutionRequestInfo.ProtoReflect.Descriptor instead.
func (*ResolutionRequestInfo) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{79}
}

func (x *ResolutionRequestInfo) GetRequestType() ResolutionRequestType {
	if x != nil && x.RequestType != nil {
		return *x.RequestType
	}
	return Default_ResolutionRequestInfo_RequestType
}

func (x *ResolutionRequestInfo) GetAuthor() string {
	if x != nil && x.Author != nil {
		return *x.Author
	}
	return ""
}

func (x *ResolutionRequestInfo) GetTarget() *ResolutionTarget {
	if x != nil {
		return x.Target
	}
	return nil
}

func (x *ResolutionRequestInfo) GetResolvedWith() string {
	if x != nil && x.ResolvedWith != nil {
		return *x.ResolvedWith
	}
	return ""
}

func (x *ResolutionRequestInfo) GetActions() []ResolutionAction {
	if x != nil {
		return x.Actions
	}
	return nil
}

type ResolutionTarget struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Department   *string `protobuf:"bytes,1,opt,name=Department" json:"Department,omitempty"`
	DepartmentId *string `protobuf:"bytes,2,opt,name=DepartmentId" json:"DepartmentId,omitempty"`
	User         *string `protobuf:"bytes,3,opt,name=User" json:"User,omitempty"`
	UserId       *string `protobuf:"bytes,4,opt,name=UserId" json:"UserId,omitempty"`
}

func (x *ResolutionTarget) Reset() {
	*x = ResolutionTarget{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResolutionTarget) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResolutionTarget) ProtoMessage() {}

func (x *ResolutionTarget) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResolutionTarget.ProtoReflect.Descriptor instead.
func (*ResolutionTarget) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{80}
}

func (x *ResolutionTarget) GetDepartment() string {
	if x != nil && x.Department != nil {
		return *x.Department
	}
	return ""
}

func (x *ResolutionTarget) GetDepartmentId() string {
	if x != nil && x.DepartmentId != nil {
		return *x.DepartmentId
	}
	return ""
}

func (x *ResolutionTarget) GetUser() string {
	if x != nil && x.User != nil {
		return *x.User
	}
	return ""
}

func (x *ResolutionTarget) GetUserId() string {
	if x != nil && x.UserId != nil {
		return *x.UserId
	}
	return ""
}

type ResolutionRequestDenialInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Author           *string `protobuf:"bytes,1,req,name=Author" json:"Author,omitempty"`
	InitialRequestId *string `protobuf:"bytes,2,opt,name=InitialRequestId" json:"InitialRequestId,omitempty"`
}

func (x *ResolutionRequestDenialInfo) Reset() {
	*x = ResolutionRequestDenialInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResolutionRequestDenialInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResolutionRequestDenialInfo) ProtoMessage() {}

func (x *ResolutionRequestDenialInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResolutionRequestDenialInfo.ProtoReflect.Descriptor instead.
func (*ResolutionRequestDenialInfo) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{81}
}

func (x *ResolutionRequestDenialInfo) GetAuthor() string {
	if x != nil && x.Author != nil {
		return *x.Author
	}
	return ""
}

func (x *ResolutionRequestDenialInfo) GetInitialRequestId() string {
	if x != nil && x.InitialRequestId != nil {
		return *x.InitialRequestId
	}
	return ""
}

type ResolutionRequestDenialAttachment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InitialResolutionRequestId *string  `protobuf:"bytes,1,req,name=InitialResolutionRequestId" json:"InitialResolutionRequestId,omitempty"`
	Comment                    *string  `protobuf:"bytes,2,opt,name=Comment" json:"Comment,omitempty"`
	Labels                     []string `protobuf:"bytes,3,rep,name=Labels" json:"Labels,omitempty"`
}

func (x *ResolutionRequestDenialAttachment) Reset() {
	*x = ResolutionRequestDenialAttachment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResolutionRequestDenialAttachment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResolutionRequestDenialAttachment) ProtoMessage() {}

func (x *ResolutionRequestDenialAttachment) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResolutionRequestDenialAttachment.ProtoReflect.Descriptor instead.
func (*ResolutionRequestDenialAttachment) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{82}
}

func (x *ResolutionRequestDenialAttachment) GetInitialResolutionRequestId() string {
	if x != nil && x.InitialResolutionRequestId != nil {
		return *x.InitialResolutionRequestId
	}
	return ""
}

func (x *ResolutionRequestDenialAttachment) GetComment() string {
	if x != nil && x.Comment != nil {
		return *x.Comment
	}
	return ""
}

func (x *ResolutionRequestDenialAttachment) GetLabels() []string {
	if x != nil {
		return x.Labels
	}
	return nil
}

type ResolutionRequestDenialCancellationAttachment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InitialResolutionRequestDenialId *string `protobuf:"bytes,1,req,name=InitialResolutionRequestDenialId" json:"InitialResolutionRequestDenialId,omitempty"`
}

func (x *ResolutionRequestDenialCancellationAttachment) Reset() {
	*x = ResolutionRequestDenialCancellationAttachment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResolutionRequestDenialCancellationAttachment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResolutionRequestDenialCancellationAttachment) ProtoMessage() {}

func (x *ResolutionRequestDenialCancellationAttachment) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResolutionRequestDenialCancellationAttachment.ProtoReflect.Descriptor instead.
func (*ResolutionRequestDenialCancellationAttachment) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{83}
}

func (x *ResolutionRequestDenialCancellationAttachment) GetInitialResolutionRequestDenialId() string {
	if x != nil && x.InitialResolutionRequestDenialId != nil {
		return *x.InitialResolutionRequestDenialId
	}
	return ""
}

type ResolutionRouteAssignmentInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RouteId *string `protobuf:"bytes,1,req,name=RouteId" json:"RouteId,omitempty"`
	Author  *string `protobuf:"bytes,2,req,name=Author" json:"Author,omitempty"`
}

func (x *ResolutionRouteAssignmentInfo) Reset() {
	*x = ResolutionRouteAssignmentInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResolutionRouteAssignmentInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResolutionRouteAssignmentInfo) ProtoMessage() {}

func (x *ResolutionRouteAssignmentInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResolutionRouteAssignmentInfo.ProtoReflect.Descriptor instead.
func (*ResolutionRouteAssignmentInfo) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{84}
}

func (x *ResolutionRouteAssignmentInfo) GetRouteId() string {
	if x != nil && x.RouteId != nil {
		return *x.RouteId
	}
	return ""
}

func (x *ResolutionRouteAssignmentInfo) GetAuthor() string {
	if x != nil && x.Author != nil {
		return *x.Author
	}
	return ""
}

type ResolutionRouteRemovalInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RouteId *string `protobuf:"bytes,1,req,name=RouteId" json:"RouteId,omitempty"`
	Author  *string `protobuf:"bytes,2,req,name=Author" json:"Author,omitempty"`
}

func (x *ResolutionRouteRemovalInfo) Reset() {
	*x = ResolutionRouteRemovalInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResolutionRouteRemovalInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResolutionRouteRemovalInfo) ProtoMessage() {}

func (x *ResolutionRouteRemovalInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResolutionRouteRemovalInfo.ProtoReflect.Descriptor instead.
func (*ResolutionRouteRemovalInfo) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{85}
}

func (x *ResolutionRouteRemovalInfo) GetRouteId() string {
	if x != nil && x.RouteId != nil {
		return *x.RouteId
	}
	return ""
}

func (x *ResolutionRouteRemovalInfo) GetAuthor() string {
	if x != nil && x.Author != nil {
		return *x.Author
	}
	return ""
}

type CancellationInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Author *string `protobuf:"bytes,1,req,name=Author" json:"Author,omitempty"`
}

func (x *CancellationInfo) Reset() {
	*x = CancellationInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancellationInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancellationInfo) ProtoMessage() {}

func (x *CancellationInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancellationInfo.ProtoReflect.Descriptor instead.
func (*CancellationInfo) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{86}
}

func (x *CancellationInfo) GetAuthor() string {
	if x != nil && x.Author != nil {
		return *x.Author
	}
	return ""
}

type TemplateTransformationInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransformedToLetterId *DocumentId `protobuf:"bytes,1,opt,name=TransformedToLetterId" json:"TransformedToLetterId,omitempty"`
	Author                *string     `protobuf:"bytes,2,opt,name=Author" json:"Author,omitempty"`
}

func (x *TemplateTransformationInfo) Reset() {
	*x = TemplateTransformationInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TemplateTransformationInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TemplateTransformationInfo) ProtoMessage() {}

func (x *TemplateTransformationInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TemplateTransformationInfo.ProtoReflect.Descriptor instead.
func (*TemplateTransformationInfo) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{87}
}

func (x *TemplateTransformationInfo) GetTransformedToLetterId() *DocumentId {
	if x != nil {
		return x.TransformedToLetterId
	}
	return nil
}

func (x *TemplateTransformationInfo) GetAuthor() string {
	if x != nil && x.Author != nil {
		return *x.Author
	}
	return ""
}

type TemplateRefusalInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type    *TemplateRefusalType `protobuf:"varint,1,req,name=Type,enum=TemplateRefusalType,def=0" json:"Type,omitempty"`
	BoxId   *string              `protobuf:"bytes,2,req,name=BoxId" json:"BoxId,omitempty"`
	Author  *string              `protobuf:"bytes,3,opt,name=Author" json:"Author,omitempty"`
	Comment *string              `protobuf:"bytes,4,opt,name=Comment" json:"Comment,omitempty"`
}

// Default values for TemplateRefusalInfo fields.
const (
	Default_TemplateRefusalInfo_Type = TemplateRefusalType_UnknownTemplateRefusalType
)

func (x *TemplateRefusalInfo) Reset() {
	*x = TemplateRefusalInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TemplateRefusalInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TemplateRefusalInfo) ProtoMessage() {}

func (x *TemplateRefusalInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TemplateRefusalInfo.ProtoReflect.Descriptor instead.
func (*TemplateRefusalInfo) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{88}
}

func (x *TemplateRefusalInfo) GetType() TemplateRefusalType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Default_TemplateRefusalInfo_Type
}

func (x *TemplateRefusalInfo) GetBoxId() string {
	if x != nil && x.BoxId != nil {
		return *x.BoxId
	}
	return ""
}

func (x *TemplateRefusalInfo) GetAuthor() string {
	if x != nil && x.Author != nil {
		return *x.Author
	}
	return ""
}

func (x *TemplateRefusalInfo) GetComment() string {
	if x != nil && x.Comment != nil {
		return *x.Comment
	}
	return ""
}

type OuterDocflowInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DocflowNamedId      *string `protobuf:"bytes,1,req,name=DocflowNamedId" json:"DocflowNamedId,omitempty"`
	DocflowFriendlyName *string `protobuf:"bytes,2,req,name=DocflowFriendlyName" json:"DocflowFriendlyName,omitempty"`
	Status              *Status `protobuf:"bytes,3,req,name=Status" json:"Status,omitempty"`
}

func (x *OuterDocflowInfo) Reset() {
	*x = OuterDocflowInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OuterDocflowInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OuterDocflowInfo) ProtoMessage() {}

func (x *OuterDocflowInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OuterDocflowInfo.ProtoReflect.Descriptor instead.
func (*OuterDocflowInfo) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{89}
}

func (x *OuterDocflowInfo) GetDocflowNamedId() string {
	if x != nil && x.DocflowNamedId != nil {
		return *x.DocflowNamedId
	}
	return ""
}

func (x *OuterDocflowInfo) GetDocflowFriendlyName() string {
	if x != nil && x.DocflowFriendlyName != nil {
		return *x.DocflowFriendlyName
	}
	return ""
}

func (x *OuterDocflowInfo) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

type Status struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NamedId      *string          `protobuf:"bytes,1,req,name=NamedId" json:"NamedId,omitempty"`
	FriendlyName *string          `protobuf:"bytes,2,req,name=FriendlyName" json:"FriendlyName,omitempty"`
	Type         *OuterStatusType `protobuf:"varint,3,req,name=Type,enum=OuterStatusType" json:"Type,omitempty"`
	Description  *string          `protobuf:"bytes,4,opt,name=Description" json:"Description,omitempty"`
	Details      []*StatusDetail  `protobuf:"bytes,5,rep,name=Details" json:"Details,omitempty"`
}

func (x *Status) Reset() {
	*x = Status{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Status) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Status) ProtoMessage() {}

func (x *Status) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Status.ProtoReflect.Descriptor instead.
func (*Status) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{90}
}

func (x *Status) GetNamedId() string {
	if x != nil && x.NamedId != nil {
		return *x.NamedId
	}
	return ""
}

func (x *Status) GetFriendlyName() string {
	if x != nil && x.FriendlyName != nil {
		return *x.FriendlyName
	}
	return ""
}

func (x *Status) GetType() OuterStatusType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return OuterStatusType_UnknownStatusType
}

func (x *Status) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *Status) GetDetails() []*StatusDetail {
	if x != nil {
		return x.Details
	}
	return nil
}

type StatusDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code *string `protobuf:"bytes,1,opt,name=Code" json:"Code,omitempty"`
	Text *string `protobuf:"bytes,2,opt,name=Text" json:"Text,omitempty"`
}

func (x *StatusDetail) Reset() {
	*x = StatusDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatusDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusDetail) ProtoMessage() {}

func (x *StatusDetail) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusDetail.ProtoReflect.Descriptor instead.
func (*StatusDetail) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{91}
}

func (x *StatusDetail) GetCode() string {
	if x != nil && x.Code != nil {
		return *x.Code
	}
	return ""
}

func (x *StatusDetail) GetText() string {
	if x != nil && x.Text != nil {
		return *x.Text
	}
	return ""
}

type EntityRevocationRequestInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InitiatorBoxId *string `protobuf:"bytes,1,req,name=InitiatorBoxId" json:"InitiatorBoxId,omitempty"`
}

func (x *EntityRevocationRequestInfo) Reset() {
	*x = EntityRevocationRequestInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EntityRevocationRequestInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntityRevocationRequestInfo) ProtoMessage() {}

func (x *EntityRevocationRequestInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntityRevocationRequestInfo.ProtoReflect.Descriptor instead.
func (*EntityRevocationRequestInfo) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{92}
}

func (x *EntityRevocationRequestInfo) GetInitiatorBoxId() string {
	if x != nil && x.InitiatorBoxId != nil {
		return *x.InitiatorBoxId
	}
	return ""
}

type PowerOfAttorneyInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FullId *PowerOfAttorneyFullId           `protobuf:"bytes,1,req,name=FullId" json:"FullId,omitempty"`
	Status *PowerOfAttorneyValidationStatus `protobuf:"bytes,2,opt,name=Status" json:"Status,omitempty"`
}

func (x *PowerOfAttorneyInfo) Reset() {
	*x = PowerOfAttorneyInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PowerOfAttorneyInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PowerOfAttorneyInfo) ProtoMessage() {}

func (x *PowerOfAttorneyInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PowerOfAttorneyInfo.ProtoReflect.Descriptor instead.
func (*PowerOfAttorneyInfo) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{93}
}

func (x *PowerOfAttorneyInfo) GetFullId() *PowerOfAttorneyFullId {
	if x != nil {
		return x.FullId
	}
	return nil
}

func (x *PowerOfAttorneyInfo) GetStatus() *PowerOfAttorneyValidationStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

type NonformalizedDocumentMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DocumentStatus *NonformalizedDocumentStatus `protobuf:"varint,1,opt,name=DocumentStatus,enum=NonformalizedDocumentStatus,def=0" json:"DocumentStatus,omitempty"`
	ReceiptStatus  *ReceiptStatus               `protobuf:"varint,2,opt,name=ReceiptStatus,enum=ReceiptStatus,def=0" json:"ReceiptStatus,omitempty"`
}

// Default values for NonformalizedDocumentMetadata fields.
const (
	Default_NonformalizedDocumentMetadata_DocumentStatus = NonformalizedDocumentStatus_UnknownNonformalizedDocumentStatus
	Default_NonformalizedDocumentMetadata_ReceiptStatus  = ReceiptStatus_UnknownReceiptStatusReceiptStatus
)

func (x *NonformalizedDocumentMetadata) Reset() {
	*x = NonformalizedDocumentMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NonformalizedDocumentMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NonformalizedDocumentMetadata) ProtoMessage() {}

func (x *NonformalizedDocumentMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NonformalizedDocumentMetadata.ProtoReflect.Descriptor instead.
func (*NonformalizedDocumentMetadata) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{94}
}

func (x *NonformalizedDocumentMetadata) GetDocumentStatus() NonformalizedDocumentStatus {
	if x != nil && x.DocumentStatus != nil {
		return *x.DocumentStatus
	}
	return Default_NonformalizedDocumentMetadata_DocumentStatus
}

func (x *NonformalizedDocumentMetadata) GetReceiptStatus() ReceiptStatus {
	if x != nil && x.ReceiptStatus != nil {
		return *x.ReceiptStatus
	}
	return Default_NonformalizedDocumentMetadata_ReceiptStatus
}

type InvoiceMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InvoiceStatus             *InvoiceStatus `protobuf:"varint,1,opt,name=InvoiceStatus,enum=InvoiceStatus,def=0" json:"InvoiceStatus,omitempty"`
	Total                     *string        `protobuf:"bytes,2,req,name=Total" json:"Total,omitempty"`
	Vat                       *string        `protobuf:"bytes,3,req,name=Vat" json:"Vat,omitempty"`
	Currency                  *int32         `protobuf:"varint,4,req,name=Currency" json:"Currency,omitempty"`
	ConfirmationDateTimeTicks *int64         `protobuf:"fixed64,5,req,name=ConfirmationDateTimeTicks" json:"ConfirmationDateTimeTicks,omitempty"`
	InvoiceAmendmentFlags     *int32         `protobuf:"varint,6,req,name=InvoiceAmendmentFlags" json:"InvoiceAmendmentFlags,omitempty"`
}

// Default values for InvoiceMetadata fields.
const (
	Default_InvoiceMetadata_InvoiceStatus = InvoiceStatus_UnknownInvoiceStatus
)

func (x *InvoiceMetadata) Reset() {
	*x = InvoiceMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InvoiceMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InvoiceMetadata) ProtoMessage() {}

func (x *InvoiceMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InvoiceMetadata.ProtoReflect.Descriptor instead.
func (*InvoiceMetadata) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{95}
}

func (x *InvoiceMetadata) GetInvoiceStatus() InvoiceStatus {
	if x != nil && x.InvoiceStatus != nil {
		return *x.InvoiceStatus
	}
	return Default_InvoiceMetadata_InvoiceStatus
}

func (x *InvoiceMetadata) GetTotal() string {
	if x != nil && x.Total != nil {
		return *x.Total
	}
	return ""
}

func (x *InvoiceMetadata) GetVat() string {
	if x != nil && x.Vat != nil {
		return *x.Vat
	}
	return ""
}

func (x *InvoiceMetadata) GetCurrency() int32 {
	if x != nil && x.Currency != nil {
		return *x.Currency
	}
	return 0
}

func (x *InvoiceMetadata) GetConfirmationDateTimeTicks() int64 {
	if x != nil && x.ConfirmationDateTimeTicks != nil {
		return *x.ConfirmationDateTimeTicks
	}
	return 0
}

func (x *InvoiceMetadata) GetInvoiceAmendmentFlags() int32 {
	if x != nil && x.InvoiceAmendmentFlags != nil {
		return *x.InvoiceAmendmentFlags
	}
	return 0
}

type InvoiceRevisionMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InvoiceRevisionStatus     *InvoiceStatus `protobuf:"varint,1,opt,name=InvoiceRevisionStatus,enum=InvoiceStatus,def=0" json:"InvoiceRevisionStatus,omitempty"`
	OriginalInvoiceNumber     *string        `protobuf:"bytes,2,req,name=OriginalInvoiceNumber" json:"OriginalInvoiceNumber,omitempty"`
	OriginalInvoiceDate       *string        `protobuf:"bytes,3,req,name=OriginalInvoiceDate" json:"OriginalInvoiceDate,omitempty"`
	Total                     *string        `protobuf:"bytes,4,req,name=Total" json:"Total,omitempty"`
	Vat                       *string        `protobuf:"bytes,5,req,name=Vat" json:"Vat,omitempty"`
	Currency                  *int32         `protobuf:"varint,6,req,name=Currency" json:"Currency,omitempty"`
	ConfirmationDateTimeTicks *int64         `protobuf:"fixed64,7,req,name=ConfirmationDateTimeTicks" json:"ConfirmationDateTimeTicks,omitempty"`
	InvoiceAmendmentFlags     *int32         `protobuf:"varint,8,req,name=InvoiceAmendmentFlags" json:"InvoiceAmendmentFlags,omitempty"`
}

// Default values for InvoiceRevisionMetadata fields.
const (
	Default_InvoiceRevisionMetadata_InvoiceRevisionStatus = InvoiceStatus_UnknownInvoiceStatus
)

func (x *InvoiceRevisionMetadata) Reset() {
	*x = InvoiceRevisionMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InvoiceRevisionMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InvoiceRevisionMetadata) ProtoMessage() {}

func (x *InvoiceRevisionMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InvoiceRevisionMetadata.ProtoReflect.Descriptor instead.
func (*InvoiceRevisionMetadata) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{96}
}

func (x *InvoiceRevisionMetadata) GetInvoiceRevisionStatus() InvoiceStatus {
	if x != nil && x.InvoiceRevisionStatus != nil {
		return *x.InvoiceRevisionStatus
	}
	return Default_InvoiceRevisionMetadata_InvoiceRevisionStatus
}

func (x *InvoiceRevisionMetadata) GetOriginalInvoiceNumber() string {
	if x != nil && x.OriginalInvoiceNumber != nil {
		return *x.OriginalInvoiceNumber
	}
	return ""
}

func (x *InvoiceRevisionMetadata) GetOriginalInvoiceDate() string {
	if x != nil && x.OriginalInvoiceDate != nil {
		return *x.OriginalInvoiceDate
	}
	return ""
}

func (x *InvoiceRevisionMetadata) GetTotal() string {
	if x != nil && x.Total != nil {
		return *x.Total
	}
	return ""
}

func (x *InvoiceRevisionMetadata) GetVat() string {
	if x != nil && x.Vat != nil {
		return *x.Vat
	}
	return ""
}

func (x *InvoiceRevisionMetadata) GetCurrency() int32 {
	if x != nil && x.Currency != nil {
		return *x.Currency
	}
	return 0
}

func (x *InvoiceRevisionMetadata) GetConfirmationDateTimeTicks() int64 {
	if x != nil && x.ConfirmationDateTimeTicks != nil {
		return *x.ConfirmationDateTimeTicks
	}
	return 0
}

func (x *InvoiceRevisionMetadata) GetInvoiceAmendmentFlags() int32 {
	if x != nil && x.InvoiceAmendmentFlags != nil {
		return *x.InvoiceAmendmentFlags
	}
	return 0
}

type InvoiceCorrectionMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InvoiceCorrectionStatus       *InvoiceStatus `protobuf:"varint,1,opt,name=InvoiceCorrectionStatus,enum=InvoiceStatus,def=0" json:"InvoiceCorrectionStatus,omitempty"`
	OriginalInvoiceNumber         *string        `protobuf:"bytes,2,req,name=OriginalInvoiceNumber" json:"OriginalInvoiceNumber,omitempty"`
	OriginalInvoiceDate           *string        `protobuf:"bytes,3,req,name=OriginalInvoiceDate" json:"OriginalInvoiceDate,omitempty"`
	OriginalInvoiceRevisionNumber *string        `protobuf:"bytes,4,opt,name=OriginalInvoiceRevisionNumber" json:"OriginalInvoiceRevisionNumber,omitempty"`
	OriginalInvoiceRevisionDate   *string        `protobuf:"bytes,5,opt,name=OriginalInvoiceRevisionDate" json:"OriginalInvoiceRevisionDate,omitempty"`
	TotalInc                      *string        `protobuf:"bytes,6,req,name=TotalInc" json:"TotalInc,omitempty"`
	TotalDec                      *string        `protobuf:"bytes,7,req,name=TotalDec" json:"TotalDec,omitempty"`
	VatInc                        *string        `protobuf:"bytes,8,req,name=VatInc" json:"VatInc,omitempty"`
	VatDec                        *string        `protobuf:"bytes,9,req,name=VatDec" json:"VatDec,omitempty"`
	Currency                      *int32         `protobuf:"varint,10,req,name=Currency" json:"Currency,omitempty"`
	ConfirmationDateTimeTicks     *int64         `protobuf:"fixed64,11,req,name=ConfirmationDateTimeTicks" json:"ConfirmationDateTimeTicks,omitempty"`
	InvoiceAmendmentFlags         *int32         `protobuf:"varint,12,req,name=InvoiceAmendmentFlags" json:"InvoiceAmendmentFlags,omitempty"`
}

// Default values for InvoiceCorrectionMetadata fields.
const (
	Default_InvoiceCorrectionMetadata_InvoiceCorrectionStatus = InvoiceStatus_UnknownInvoiceStatus
)

func (x *InvoiceCorrectionMetadata) Reset() {
	*x = InvoiceCorrectionMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InvoiceCorrectionMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InvoiceCorrectionMetadata) ProtoMessage() {}

func (x *InvoiceCorrectionMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InvoiceCorrectionMetadata.ProtoReflect.Descriptor instead.
func (*InvoiceCorrectionMetadata) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{97}
}

func (x *InvoiceCorrectionMetadata) GetInvoiceCorrectionStatus() InvoiceStatus {
	if x != nil && x.InvoiceCorrectionStatus != nil {
		return *x.InvoiceCorrectionStatus
	}
	return Default_InvoiceCorrectionMetadata_InvoiceCorrectionStatus
}

func (x *InvoiceCorrectionMetadata) GetOriginalInvoiceNumber() string {
	if x != nil && x.OriginalInvoiceNumber != nil {
		return *x.OriginalInvoiceNumber
	}
	return ""
}

func (x *InvoiceCorrectionMetadata) GetOriginalInvoiceDate() string {
	if x != nil && x.OriginalInvoiceDate != nil {
		return *x.OriginalInvoiceDate
	}
	return ""
}

func (x *InvoiceCorrectionMetadata) GetOriginalInvoiceRevisionNumber() string {
	if x != nil && x.OriginalInvoiceRevisionNumber != nil {
		return *x.OriginalInvoiceRevisionNumber
	}
	return ""
}

func (x *InvoiceCorrectionMetadata) GetOriginalInvoiceRevisionDate() string {
	if x != nil && x.OriginalInvoiceRevisionDate != nil {
		return *x.OriginalInvoiceRevisionDate
	}
	return ""
}

func (x *InvoiceCorrectionMetadata) GetTotalInc() string {
	if x != nil && x.TotalInc != nil {
		return *x.TotalInc
	}
	return ""
}

func (x *InvoiceCorrectionMetadata) GetTotalDec() string {
	if x != nil && x.TotalDec != nil {
		return *x.TotalDec
	}
	return ""
}

func (x *InvoiceCorrectionMetadata) GetVatInc() string {
	if x != nil && x.VatInc != nil {
		return *x.VatInc
	}
	return ""
}

func (x *InvoiceCorrectionMetadata) GetVatDec() string {
	if x != nil && x.VatDec != nil {
		return *x.VatDec
	}
	return ""
}

func (x *InvoiceCorrectionMetadata) GetCurrency() int32 {
	if x != nil && x.Currency != nil {
		return *x.Currency
	}
	return 0
}

func (x *InvoiceCorrectionMetadata) GetConfirmationDateTimeTicks() int64 {
	if x != nil && x.ConfirmationDateTimeTicks != nil {
		return *x.ConfirmationDateTimeTicks
	}
	return 0
}

func (x *InvoiceCorrectionMetadata) GetInvoiceAmendmentFlags() int32 {
	if x != nil && x.InvoiceAmendmentFlags != nil {
		return *x.InvoiceAmendmentFlags
	}
	return 0
}

type InvoiceCorrectionRevisionMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InvoiceCorrectionRevisionStatus *InvoiceStatus `protobuf:"varint,1,opt,name=InvoiceCorrectionRevisionStatus,enum=InvoiceStatus,def=0" json:"InvoiceCorrectionRevisionStatus,omitempty"`
	OriginalInvoiceNumber           *string        `protobuf:"bytes,2,req,name=OriginalInvoiceNumber" json:"OriginalInvoiceNumber,omitempty"`
	OriginalInvoiceDate             *string        `protobuf:"bytes,3,req,name=OriginalInvoiceDate" json:"OriginalInvoiceDate,omitempty"`
	OriginalInvoiceRevisionNumber   *string        `protobuf:"bytes,4,opt,name=OriginalInvoiceRevisionNumber" json:"OriginalInvoiceRevisionNumber,omitempty"`
	OriginalInvoiceRevisionDate     *string        `protobuf:"bytes,5,opt,name=OriginalInvoiceRevisionDate" json:"OriginalInvoiceRevisionDate,omitempty"`
	OriginalInvoiceCorrectionNumber *string        `protobuf:"bytes,6,req,name=OriginalInvoiceCorrectionNumber" json:"OriginalInvoiceCorrectionNumber,omitempty"`
	OriginalInvoiceCorrectionDate   *string        `protobuf:"bytes,7,req,name=OriginalInvoiceCorrectionDate" json:"OriginalInvoiceCorrectionDate,omitempty"`
	TotalInc                        *string        `protobuf:"bytes,8,req,name=TotalInc" json:"TotalInc,omitempty"`
	TotalDec                        *string        `protobuf:"bytes,9,req,name=TotalDec" json:"TotalDec,omitempty"`
	VatInc                          *string        `protobuf:"bytes,10,req,name=VatInc" json:"VatInc,omitempty"`
	VatDec                          *string        `protobuf:"bytes,11,req,name=VatDec" json:"VatDec,omitempty"`
	Currency                        *int32         `protobuf:"varint,12,req,name=Currency" json:"Currency,omitempty"`
	ConfirmationDateTimeTicks       *int64         `protobuf:"fixed64,13,req,name=ConfirmationDateTimeTicks" json:"ConfirmationDateTimeTicks,omitempty"`
	InvoiceAmendmentFlags           *int32         `protobuf:"varint,14,req,name=InvoiceAmendmentFlags" json:"InvoiceAmendmentFlags,omitempty"`
}

// Default values for InvoiceCorrectionRevisionMetadata fields.
const (
	Default_InvoiceCorrectionRevisionMetadata_InvoiceCorrectionRevisionStatus = InvoiceStatus_UnknownInvoiceStatus
)

func (x *InvoiceCorrectionRevisionMetadata) Reset() {
	*x = InvoiceCorrectionRevisionMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InvoiceCorrectionRevisionMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InvoiceCorrectionRevisionMetadata) ProtoMessage() {}

func (x *InvoiceCorrectionRevisionMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InvoiceCorrectionRevisionMetadata.ProtoReflect.Descriptor instead.
func (*InvoiceCorrectionRevisionMetadata) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{98}
}

func (x *InvoiceCorrectionRevisionMetadata) GetInvoiceCorrectionRevisionStatus() InvoiceStatus {
	if x != nil && x.InvoiceCorrectionRevisionStatus != nil {
		return *x.InvoiceCorrectionRevisionStatus
	}
	return Default_InvoiceCorrectionRevisionMetadata_InvoiceCorrectionRevisionStatus
}

func (x *InvoiceCorrectionRevisionMetadata) GetOriginalInvoiceNumber() string {
	if x != nil && x.OriginalInvoiceNumber != nil {
		return *x.OriginalInvoiceNumber
	}
	return ""
}

func (x *InvoiceCorrectionRevisionMetadata) GetOriginalInvoiceDate() string {
	if x != nil && x.OriginalInvoiceDate != nil {
		return *x.OriginalInvoiceDate
	}
	return ""
}

func (x *InvoiceCorrectionRevisionMetadata) GetOriginalInvoiceRevisionNumber() string {
	if x != nil && x.OriginalInvoiceRevisionNumber != nil {
		return *x.OriginalInvoiceRevisionNumber
	}
	return ""
}

func (x *InvoiceCorrectionRevisionMetadata) GetOriginalInvoiceRevisionDate() string {
	if x != nil && x.OriginalInvoiceRevisionDate != nil {
		return *x.OriginalInvoiceRevisionDate
	}
	return ""
}

func (x *InvoiceCorrectionRevisionMetadata) GetOriginalInvoiceCorrectionNumber() string {
	if x != nil && x.OriginalInvoiceCorrectionNumber != nil {
		return *x.OriginalInvoiceCorrectionNumber
	}
	return ""
}

func (x *InvoiceCorrectionRevisionMetadata) GetOriginalInvoiceCorrectionDate() string {
	if x != nil && x.OriginalInvoiceCorrectionDate != nil {
		return *x.OriginalInvoiceCorrectionDate
	}
	return ""
}

func (x *InvoiceCorrectionRevisionMetadata) GetTotalInc() string {
	if x != nil && x.TotalInc != nil {
		return *x.TotalInc
	}
	return ""
}

func (x *InvoiceCorrectionRevisionMetadata) GetTotalDec() string {
	if x != nil && x.TotalDec != nil {
		return *x.TotalDec
	}
	return ""
}

func (x *InvoiceCorrectionRevisionMetadata) GetVatInc() string {
	if x != nil && x.VatInc != nil {
		return *x.VatInc
	}
	return ""
}

func (x *InvoiceCorrectionRevisionMetadata) GetVatDec() string {
	if x != nil && x.VatDec != nil {
		return *x.VatDec
	}
	return ""
}

func (x *InvoiceCorrectionRevisionMetadata) GetCurrency() int32 {
	if x != nil && x.Currency != nil {
		return *x.Currency
	}
	return 0
}

func (x *InvoiceCorrectionRevisionMetadata) GetConfirmationDateTimeTicks() int64 {
	if x != nil && x.ConfirmationDateTimeTicks != nil {
		return *x.ConfirmationDateTimeTicks
	}
	return 0
}

func (x *InvoiceCorrectionRevisionMetadata) GetInvoiceAmendmentFlags() int32 {
	if x != nil && x.InvoiceAmendmentFlags != nil {
		return *x.InvoiceAmendmentFlags
	}
	return 0
}

type TrustConnectionRequestMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TrustConnectionRequestStatus *BilateralDocumentStatus `protobuf:"varint,1,opt,name=TrustConnectionRequestStatus,enum=BilateralDocumentStatus,def=0" json:"TrustConnectionRequestStatus,omitempty"`
}

// Default values for TrustConnectionRequestMetadata fields.
const (
	Default_TrustConnectionRequestMetadata_TrustConnectionRequestStatus = BilateralDocumentStatus_UnknownBilateralDocumentStatusBilateralDocumentStatus
)

func (x *TrustConnectionRequestMetadata) Reset() {
	*x = TrustConnectionRequestMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrustConnectionRequestMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrustConnectionRequestMetadata) ProtoMessage() {}

func (x *TrustConnectionRequestMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrustConnectionRequestMetadata.ProtoReflect.Descriptor instead.
func (*TrustConnectionRequestMetadata) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{99}
}

func (x *TrustConnectionRequestMetadata) GetTrustConnectionRequestStatus() BilateralDocumentStatus {
	if x != nil && x.TrustConnectionRequestStatus != nil {
		return *x.TrustConnectionRequestStatus
	}
	return Default_TrustConnectionRequestMetadata_TrustConnectionRequestStatus
}

type BasicDocumentMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DocumentStatus *BilateralDocumentStatus `protobuf:"varint,1,opt,name=DocumentStatus,enum=BilateralDocumentStatus,def=0" json:"DocumentStatus,omitempty"`
	Total          *string                  `protobuf:"bytes,2,req,name=Total" json:"Total,omitempty"`
	Vat            *string                  `protobuf:"bytes,3,opt,name=Vat" json:"Vat,omitempty"`
	Grounds        *string                  `protobuf:"bytes,4,opt,name=Grounds" json:"Grounds,omitempty"`
	ReceiptStatus  *ReceiptStatus           `protobuf:"varint,5,opt,name=ReceiptStatus,enum=ReceiptStatus,def=0" json:"ReceiptStatus,omitempty"`
}

// Default values for BasicDocumentMetadata fields.
const (
	Default_BasicDocumentMetadata_DocumentStatus = BilateralDocumentStatus_UnknownBilateralDocumentStatusBilateralDocumentStatus
	Default_BasicDocumentMetadata_ReceiptStatus  = ReceiptStatus_UnknownReceiptStatusReceiptStatus
)

func (x *BasicDocumentMetadata) Reset() {
	*x = BasicDocumentMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BasicDocumentMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BasicDocumentMetadata) ProtoMessage() {}

func (x *BasicDocumentMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BasicDocumentMetadata.ProtoReflect.Descriptor instead.
func (*BasicDocumentMetadata) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{100}
}

func (x *BasicDocumentMetadata) GetDocumentStatus() BilateralDocumentStatus {
	if x != nil && x.DocumentStatus != nil {
		return *x.DocumentStatus
	}
	return Default_BasicDocumentMetadata_DocumentStatus
}

func (x *BasicDocumentMetadata) GetTotal() string {
	if x != nil && x.Total != nil {
		return *x.Total
	}
	return ""
}

func (x *BasicDocumentMetadata) GetVat() string {
	if x != nil && x.Vat != nil {
		return *x.Vat
	}
	return ""
}

func (x *BasicDocumentMetadata) GetGrounds() string {
	if x != nil && x.Grounds != nil {
		return *x.Grounds
	}
	return ""
}

func (x *BasicDocumentMetadata) GetReceiptStatus() ReceiptStatus {
	if x != nil && x.ReceiptStatus != nil {
		return *x.ReceiptStatus
	}
	return Default_BasicDocumentMetadata_ReceiptStatus
}

type PriceListMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DocumentStatus         *BilateralDocumentStatus `protobuf:"varint,1,req,name=DocumentStatus,enum=BilateralDocumentStatus" json:"DocumentStatus,omitempty"`
	PriceListEffectiveDate *string                  `protobuf:"bytes,2,opt,name=PriceListEffectiveDate" json:"PriceListEffectiveDate,omitempty"`
	ContractDocumentDate   *string                  `protobuf:"bytes,3,opt,name=ContractDocumentDate" json:"ContractDocumentDate,omitempty"`
	ContractDocumentNumber *string                  `protobuf:"bytes,4,opt,name=ContractDocumentNumber" json:"ContractDocumentNumber,omitempty"`
}

func (x *PriceListMetadata) Reset() {
	*x = PriceListMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PriceListMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PriceListMetadata) ProtoMessage() {}

func (x *PriceListMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PriceListMetadata.ProtoReflect.Descriptor instead.
func (*PriceListMetadata) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{101}
}

func (x *PriceListMetadata) GetDocumentStatus() BilateralDocumentStatus {
	if x != nil && x.DocumentStatus != nil {
		return *x.DocumentStatus
	}
	return BilateralDocumentStatus_UnknownBilateralDocumentStatusBilateralDocumentStatus
}

func (x *PriceListMetadata) GetPriceListEffectiveDate() string {
	if x != nil && x.PriceListEffectiveDate != nil {
		return *x.PriceListEffectiveDate
	}
	return ""
}

func (x *PriceListMetadata) GetContractDocumentDate() string {
	if x != nil && x.ContractDocumentDate != nil {
		return *x.ContractDocumentDate
	}
	return ""
}

func (x *PriceListMetadata) GetContractDocumentNumber() string {
	if x != nil && x.ContractDocumentNumber != nil {
		return *x.ContractDocumentNumber
	}
	return ""
}

type ContractMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DocumentStatus *BilateralDocumentStatus `protobuf:"varint,1,opt,name=DocumentStatus,enum=BilateralDocumentStatus,def=0" json:"DocumentStatus,omitempty"`
	ContractPrice  *string                  `protobuf:"bytes,2,opt,name=ContractPrice" json:"ContractPrice,omitempty"`
	ContractType   *string                  `protobuf:"bytes,3,opt,name=ContractType" json:"ContractType,omitempty"`
	ReceiptStatus  *ReceiptStatus           `protobuf:"varint,4,opt,name=ReceiptStatus,enum=ReceiptStatus,def=0" json:"ReceiptStatus,omitempty"`
}

// Default values for ContractMetadata fields.
const (
	Default_ContractMetadata_DocumentStatus = BilateralDocumentStatus_UnknownBilateralDocumentStatusBilateralDocumentStatus
	Default_ContractMetadata_ReceiptStatus  = ReceiptStatus_UnknownReceiptStatusReceiptStatus
)

func (x *ContractMetadata) Reset() {
	*x = ContractMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContractMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContractMetadata) ProtoMessage() {}

func (x *ContractMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContractMetadata.ProtoReflect.Descriptor instead.
func (*ContractMetadata) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{102}
}

func (x *ContractMetadata) GetDocumentStatus() BilateralDocumentStatus {
	if x != nil && x.DocumentStatus != nil {
		return *x.DocumentStatus
	}
	return Default_ContractMetadata_DocumentStatus
}

func (x *ContractMetadata) GetContractPrice() string {
	if x != nil && x.ContractPrice != nil {
		return *x.ContractPrice
	}
	return ""
}

func (x *ContractMetadata) GetContractType() string {
	if x != nil && x.ContractType != nil {
		return *x.ContractType
	}
	return ""
}

func (x *ContractMetadata) GetReceiptStatus() ReceiptStatus {
	if x != nil && x.ReceiptStatus != nil {
		return *x.ReceiptStatus
	}
	return Default_ContractMetadata_ReceiptStatus
}

type BilateralDocumentMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DocumentStatus *BilateralDocumentStatus `protobuf:"varint,1,opt,name=DocumentStatus,enum=BilateralDocumentStatus,def=0" json:"DocumentStatus,omitempty"`
	ReceiptStatus  *ReceiptStatus           `protobuf:"varint,2,opt,name=ReceiptStatus,enum=ReceiptStatus,def=0" json:"ReceiptStatus,omitempty"` // Reserved state to report to legacy client for new statuses
}

// Default values for BilateralDocumentMetadata fields.
const (
	Default_BilateralDocumentMetadata_DocumentStatus = BilateralDocumentStatus_UnknownBilateralDocumentStatusBilateralDocumentStatus
	Default_BilateralDocumentMetadata_ReceiptStatus  = ReceiptStatus_UnknownReceiptStatusReceiptStatus
)

func (x *BilateralDocumentMetadata) Reset() {
	*x = BilateralDocumentMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BilateralDocumentMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BilateralDocumentMetadata) ProtoMessage() {}

func (x *BilateralDocumentMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BilateralDocumentMetadata.ProtoReflect.Descriptor instead.
func (*BilateralDocumentMetadata) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{103}
}

func (x *BilateralDocumentMetadata) GetDocumentStatus() BilateralDocumentStatus {
	if x != nil && x.DocumentStatus != nil {
		return *x.DocumentStatus
	}
	return Default_BilateralDocumentMetadata_DocumentStatus
}

func (x *BilateralDocumentMetadata) GetReceiptStatus() ReceiptStatus {
	if x != nil && x.ReceiptStatus != nil {
		return *x.ReceiptStatus
	}
	return Default_BilateralDocumentMetadata_ReceiptStatus
}

type AcceptanceCertificateMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DocumentStatus *AcceptanceCertificateDocumentStatus `protobuf:"varint,1,opt,name=DocumentStatus,enum=AcceptanceCertificateDocumentStatus,def=0" json:"DocumentStatus,omitempty"`
	Total          *string                              `protobuf:"bytes,2,req,name=Total" json:"Total,omitempty"`
	Vat            *string                              `protobuf:"bytes,3,opt,name=Vat" json:"Vat,omitempty"`
	Grounds        *string                              `protobuf:"bytes,4,opt,name=Grounds" json:"Grounds,omitempty"`
	ReceiptStatus  *ReceiptStatus                       `protobuf:"varint,5,opt,name=ReceiptStatus,enum=ReceiptStatus,def=0" json:"ReceiptStatus,omitempty"`
}

// Default values for AcceptanceCertificateMetadata fields.
const (
	Default_AcceptanceCertificateMetadata_DocumentStatus = AcceptanceCertificateDocumentStatus_UnknownAcceptanceCertificateDocumentStatusAcceptanceCertificateDocumentStatus
	Default_AcceptanceCertificateMetadata_ReceiptStatus  = ReceiptStatus_UnknownReceiptStatusReceiptStatus
)

func (x *AcceptanceCertificateMetadata) Reset() {
	*x = AcceptanceCertificateMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AcceptanceCertificateMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcceptanceCertificateMetadata) ProtoMessage() {}

func (x *AcceptanceCertificateMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcceptanceCertificateMetadata.ProtoReflect.Descriptor instead.
func (*AcceptanceCertificateMetadata) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{104}
}

func (x *AcceptanceCertificateMetadata) GetDocumentStatus() AcceptanceCertificateDocumentStatus {
	if x != nil && x.DocumentStatus != nil {
		return *x.DocumentStatus
	}
	return Default_AcceptanceCertificateMetadata_DocumentStatus
}

func (x *AcceptanceCertificateMetadata) GetTotal() string {
	if x != nil && x.Total != nil {
		return *x.Total
	}
	return ""
}

func (x *AcceptanceCertificateMetadata) GetVat() string {
	if x != nil && x.Vat != nil {
		return *x.Vat
	}
	return ""
}

func (x *AcceptanceCertificateMetadata) GetGrounds() string {
	if x != nil && x.Grounds != nil {
		return *x.Grounds
	}
	return ""
}

func (x *AcceptanceCertificateMetadata) GetReceiptStatus() ReceiptStatus {
	if x != nil && x.ReceiptStatus != nil {
		return *x.ReceiptStatus
	}
	return Default_AcceptanceCertificateMetadata_ReceiptStatus
}

type SupplementaryAgreementMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DocumentStatus *BilateralDocumentStatus `protobuf:"varint,1,opt,name=DocumentStatus,enum=BilateralDocumentStatus,def=0" json:"DocumentStatus,omitempty"`
	Total          *string                  `protobuf:"bytes,2,opt,name=Total" json:"Total,omitempty"`
	ContractType   *string                  `protobuf:"bytes,3,opt,name=ContractType" json:"ContractType,omitempty"`
	ContractNumber *string                  `protobuf:"bytes,4,req,name=ContractNumber" json:"ContractNumber,omitempty"`
	ContractDate   *string                  `protobuf:"bytes,5,req,name=ContractDate" json:"ContractDate,omitempty"`
	ReceiptStatus  *ReceiptStatus           `protobuf:"varint,6,opt,name=ReceiptStatus,enum=ReceiptStatus,def=0" json:"ReceiptStatus,omitempty"`
}

// Default values for SupplementaryAgreementMetadata fields.
const (
	Default_SupplementaryAgreementMetadata_DocumentStatus = BilateralDocumentStatus_UnknownBilateralDocumentStatusBilateralDocumentStatus
	Default_SupplementaryAgreementMetadata_ReceiptStatus  = ReceiptStatus_UnknownReceiptStatusReceiptStatus
)

func (x *SupplementaryAgreementMetadata) Reset() {
	*x = SupplementaryAgreementMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[105]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SupplementaryAgreementMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SupplementaryAgreementMetadata) ProtoMessage() {}

func (x *SupplementaryAgreementMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[105]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SupplementaryAgreementMetadata.ProtoReflect.Descriptor instead.
func (*SupplementaryAgreementMetadata) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{105}
}

func (x *SupplementaryAgreementMetadata) GetDocumentStatus() BilateralDocumentStatus {
	if x != nil && x.DocumentStatus != nil {
		return *x.DocumentStatus
	}
	return Default_SupplementaryAgreementMetadata_DocumentStatus
}

func (x *SupplementaryAgreementMetadata) GetTotal() string {
	if x != nil && x.Total != nil {
		return *x.Total
	}
	return ""
}

func (x *SupplementaryAgreementMetadata) GetContractType() string {
	if x != nil && x.ContractType != nil {
		return *x.ContractType
	}
	return ""
}

func (x *SupplementaryAgreementMetadata) GetContractNumber() string {
	if x != nil && x.ContractNumber != nil {
		return *x.ContractNumber
	}
	return ""
}

func (x *SupplementaryAgreementMetadata) GetContractDate() string {
	if x != nil && x.ContractDate != nil {
		return *x.ContractDate
	}
	return ""
}

func (x *SupplementaryAgreementMetadata) GetReceiptStatus() ReceiptStatus {
	if x != nil && x.ReceiptStatus != nil {
		return *x.ReceiptStatus
	}
	return Default_SupplementaryAgreementMetadata_ReceiptStatus
}

type ProformaInvoiceMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DocumentStatus *UnilateralDocumentStatus `protobuf:"varint,1,opt,name=DocumentStatus,enum=UnilateralDocumentStatus,def=0" json:"DocumentStatus,omitempty"`
	Total          *string                   `protobuf:"bytes,2,req,name=Total" json:"Total,omitempty"`
	Vat            *string                   `protobuf:"bytes,3,opt,name=Vat" json:"Vat,omitempty"`
	Grounds        *string                   `protobuf:"bytes,4,opt,name=Grounds" json:"Grounds,omitempty"`
}

// Default values for ProformaInvoiceMetadata fields.
const (
	Default_ProformaInvoiceMetadata_DocumentStatus = UnilateralDocumentStatus_UnknownUnilateralDocumentStatusUnilateralDocumentStatus
)

func (x *ProformaInvoiceMetadata) Reset() {
	*x = ProformaInvoiceMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[106]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProformaInvoiceMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProformaInvoiceMetadata) ProtoMessage() {}

func (x *ProformaInvoiceMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[106]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProformaInvoiceMetadata.ProtoReflect.Descriptor instead.
func (*ProformaInvoiceMetadata) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{106}
}

func (x *ProformaInvoiceMetadata) GetDocumentStatus() UnilateralDocumentStatus {
	if x != nil && x.DocumentStatus != nil {
		return *x.DocumentStatus
	}
	return Default_ProformaInvoiceMetadata_DocumentStatus
}

func (x *ProformaInvoiceMetadata) GetTotal() string {
	if x != nil && x.Total != nil {
		return *x.Total
	}
	return ""
}

func (x *ProformaInvoiceMetadata) GetVat() string {
	if x != nil && x.Vat != nil {
		return *x.Vat
	}
	return ""
}

func (x *ProformaInvoiceMetadata) GetGrounds() string {
	if x != nil && x.Grounds != nil {
		return *x.Grounds
	}
	return ""
}

type ServiceDetailsMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DocumentStatus *UnilateralDocumentStatus `protobuf:"varint,1,opt,name=DocumentStatus,enum=UnilateralDocumentStatus,def=0" json:"DocumentStatus,omitempty"`
}

// Default values for ServiceDetailsMetadata fields.
const (
	Default_ServiceDetailsMetadata_DocumentStatus = UnilateralDocumentStatus_UnknownUnilateralDocumentStatusUnilateralDocumentStatus
)

func (x *ServiceDetailsMetadata) Reset() {
	*x = ServiceDetailsMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[107]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceDetailsMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceDetailsMetadata) ProtoMessage() {}

func (x *ServiceDetailsMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[107]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceDetailsMetadata.ProtoReflect.Descriptor instead.
func (*ServiceDetailsMetadata) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{107}
}

func (x *ServiceDetailsMetadata) GetDocumentStatus() UnilateralDocumentStatus {
	if x != nil && x.DocumentStatus != nil {
		return *x.DocumentStatus
	}
	return Default_ServiceDetailsMetadata_DocumentStatus
}

type ResolutionStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type         *ResolutionStatusType `protobuf:"varint,1,req,name=Type,enum=ResolutionStatusType" json:"Type,omitempty"`
	Target       *ResolutionTarget     `protobuf:"bytes,2,opt,name=Target" json:"Target,omitempty"`
	AuthorUserId *string               `protobuf:"bytes,3,req,name=AuthorUserId" json:"AuthorUserId,omitempty"`
	AuthorFIO    *string               `protobuf:"bytes,4,req,name=AuthorFIO" json:"AuthorFIO,omitempty"`
}

func (x *ResolutionStatus) Reset() {
	*x = ResolutionStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[108]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResolutionStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResolutionStatus) ProtoMessage() {}

func (x *ResolutionStatus) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[108]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResolutionStatus.ProtoReflect.Descriptor instead.
func (*ResolutionStatus) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{108}
}

func (x *ResolutionStatus) GetType() ResolutionStatusType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ResolutionStatusType_NoneResolutionStatusType
}

func (x *ResolutionStatus) GetTarget() *ResolutionTarget {
	if x != nil {
		return x.Target
	}
	return nil
}

func (x *ResolutionStatus) GetAuthorUserId() string {
	if x != nil && x.AuthorUserId != nil {
		return *x.AuthorUserId
	}
	return ""
}

func (x *ResolutionStatus) GetAuthorFIO() string {
	if x != nil && x.AuthorFIO != nil {
		return *x.AuthorFIO
	}
	return ""
}

type ForwardDocumentEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp *Timestamp `protobuf:"bytes,1,opt,name=Timestamp" json:"Timestamp,omitempty"`
	ToBoxId   *string    `protobuf:"bytes,2,opt,name=ToBoxId" json:"ToBoxId,omitempty"`
}

func (x *ForwardDocumentEvent) Reset() {
	*x = ForwardDocumentEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[109]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ForwardDocumentEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ForwardDocumentEvent) ProtoMessage() {}

func (x *ForwardDocumentEvent) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[109]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ForwardDocumentEvent.ProtoReflect.Descriptor instead.
func (*ForwardDocumentEvent) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{109}
}

func (x *ForwardDocumentEvent) GetTimestamp() *Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *ForwardDocumentEvent) GetToBoxId() string {
	if x != nil && x.ToBoxId != nil {
		return *x.ToBoxId
	}
	return ""
}

type CustomDataItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   *string `protobuf:"bytes,1,req,name=Key" json:"Key,omitempty"`
	Value *string `protobuf:"bytes,2,opt,name=Value" json:"Value,omitempty"`
}

func (x *CustomDataItem) Reset() {
	*x = CustomDataItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[110]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomDataItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomDataItem) ProtoMessage() {}

func (x *CustomDataItem) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[110]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomDataItem.ProtoReflect.Descriptor instead.
func (*CustomDataItem) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{110}
}

func (x *CustomDataItem) GetKey() string {
	if x != nil && x.Key != nil {
		return *x.Key
	}
	return ""
}

func (x *CustomDataItem) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

type UniversalTransferDocumentMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DocumentStatus            *UniversalTransferDocumentStatus `protobuf:"varint,1,opt,name=DocumentStatus,enum=UniversalTransferDocumentStatus,def=0" json:"DocumentStatus,omitempty"`
	Total                     *string                          `protobuf:"bytes,2,req,name=Total" json:"Total,omitempty"`     // TotalSum;
	Vat                       *string                          `protobuf:"bytes,3,opt,name=Vat" json:"Vat,omitempty"`         //TotalVat;
	Grounds                   *string                          `protobuf:"bytes,4,opt,name=Grounds" json:"Grounds,omitempty"` // DocumentGrounds
	DocumentFunction          *string                          `protobuf:"bytes,5,req,name=DocumentFunction" json:"DocumentFunction,omitempty"`
	Currency                  *int32                           `protobuf:"varint,6,req,name=Currency" json:"Currency,omitempty"`
	ConfirmationDateTimeTicks *int64                           `protobuf:"fixed64,8,opt,name=ConfirmationDateTimeTicks" json:"ConfirmationDateTimeTicks,omitempty"`
	InvoiceAmendmentFlags     *int32                           `protobuf:"varint,9,opt,name=InvoiceAmendmentFlags" json:"InvoiceAmendmentFlags,omitempty"`
}

// Default values for UniversalTransferDocumentMetadata fields.
const (
	Default_UniversalTransferDocumentMetadata_DocumentStatus = UniversalTransferDocumentStatus_UnknownDocumentStatusUniversalTransferDocumentStatus
)

func (x *UniversalTransferDocumentMetadata) Reset() {
	*x = UniversalTransferDocumentMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[111]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UniversalTransferDocumentMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UniversalTransferDocumentMetadata) ProtoMessage() {}

func (x *UniversalTransferDocumentMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[111]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UniversalTransferDocumentMetadata.ProtoReflect.Descriptor instead.
func (*UniversalTransferDocumentMetadata) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{111}
}

func (x *UniversalTransferDocumentMetadata) GetDocumentStatus() UniversalTransferDocumentStatus {
	if x != nil && x.DocumentStatus != nil {
		return *x.DocumentStatus
	}
	return Default_UniversalTransferDocumentMetadata_DocumentStatus
}

func (x *UniversalTransferDocumentMetadata) GetTotal() string {
	if x != nil && x.Total != nil {
		return *x.Total
	}
	return ""
}

func (x *UniversalTransferDocumentMetadata) GetVat() string {
	if x != nil && x.Vat != nil {
		return *x.Vat
	}
	return ""
}

func (x *UniversalTransferDocumentMetadata) GetGrounds() string {
	if x != nil && x.Grounds != nil {
		return *x.Grounds
	}
	return ""
}

func (x *UniversalTransferDocumentMetadata) GetDocumentFunction() string {
	if x != nil && x.DocumentFunction != nil {
		return *x.DocumentFunction
	}
	return ""
}

func (x *UniversalTransferDocumentMetadata) GetCurrency() int32 {
	if x != nil && x.Currency != nil {
		return *x.Currency
	}
	return 0
}

func (x *UniversalTransferDocumentMetadata) GetConfirmationDateTimeTicks() int64 {
	if x != nil && x.ConfirmationDateTimeTicks != nil {
		return *x.ConfirmationDateTimeTicks
	}
	return 0
}

func (x *UniversalTransferDocumentMetadata) GetInvoiceAmendmentFlags() int32 {
	if x != nil && x.InvoiceAmendmentFlags != nil {
		return *x.InvoiceAmendmentFlags
	}
	return 0
}

type UniversalTransferDocumentRevisionMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DocumentStatus            *UniversalTransferDocumentStatus `protobuf:"varint,1,req,name=DocumentStatus,enum=UniversalTransferDocumentStatus" json:"DocumentStatus,omitempty"`
	Total                     *string                          `protobuf:"bytes,2,req,name=Total" json:"Total,omitempty"`     // TotalSum;
	Vat                       *string                          `protobuf:"bytes,3,opt,name=Vat" json:"Vat,omitempty"`         //TotalVat;
	Grounds                   *string                          `protobuf:"bytes,4,opt,name=Grounds" json:"Grounds,omitempty"` // DocumentGrounds
	DocumentFunction          *string                          `protobuf:"bytes,5,req,name=DocumentFunction" json:"DocumentFunction,omitempty"`
	Currency                  *int32                           `protobuf:"varint,6,req,name=Currency" json:"Currency,omitempty"`
	ConfirmationDateTimeTicks *int64                           `protobuf:"fixed64,7,opt,name=ConfirmationDateTimeTicks" json:"ConfirmationDateTimeTicks,omitempty"`
	InvoiceAmendmentFlags     *int32                           `protobuf:"varint,8,req,name=InvoiceAmendmentFlags" json:"InvoiceAmendmentFlags,omitempty"`
	OriginalInvoiceNumber     *string                          `protobuf:"bytes,9,req,name=OriginalInvoiceNumber" json:"OriginalInvoiceNumber,omitempty"`
	OriginalInvoiceDate       *string                          `protobuf:"bytes,10,req,name=OriginalInvoiceDate" json:"OriginalInvoiceDate,omitempty"`
}

func (x *UniversalTransferDocumentRevisionMetadata) Reset() {
	*x = UniversalTransferDocumentRevisionMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[112]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UniversalTransferDocumentRevisionMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UniversalTransferDocumentRevisionMetadata) ProtoMessage() {}

func (x *UniversalTransferDocumentRevisionMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[112]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UniversalTransferDocumentRevisionMetadata.ProtoReflect.Descriptor instead.
func (*UniversalTransferDocumentRevisionMetadata) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{112}
}

func (x *UniversalTransferDocumentRevisionMetadata) GetDocumentStatus() UniversalTransferDocumentStatus {
	if x != nil && x.DocumentStatus != nil {
		return *x.DocumentStatus
	}
	return UniversalTransferDocumentStatus_UnknownDocumentStatusUniversalTransferDocumentStatus
}

func (x *UniversalTransferDocumentRevisionMetadata) GetTotal() string {
	if x != nil && x.Total != nil {
		return *x.Total
	}
	return ""
}

func (x *UniversalTransferDocumentRevisionMetadata) GetVat() string {
	if x != nil && x.Vat != nil {
		return *x.Vat
	}
	return ""
}

func (x *UniversalTransferDocumentRevisionMetadata) GetGrounds() string {
	if x != nil && x.Grounds != nil {
		return *x.Grounds
	}
	return ""
}

func (x *UniversalTransferDocumentRevisionMetadata) GetDocumentFunction() string {
	if x != nil && x.DocumentFunction != nil {
		return *x.DocumentFunction
	}
	return ""
}

func (x *UniversalTransferDocumentRevisionMetadata) GetCurrency() int32 {
	if x != nil && x.Currency != nil {
		return *x.Currency
	}
	return 0
}

func (x *UniversalTransferDocumentRevisionMetadata) GetConfirmationDateTimeTicks() int64 {
	if x != nil && x.ConfirmationDateTimeTicks != nil {
		return *x.ConfirmationDateTimeTicks
	}
	return 0
}

func (x *UniversalTransferDocumentRevisionMetadata) GetInvoiceAmendmentFlags() int32 {
	if x != nil && x.InvoiceAmendmentFlags != nil {
		return *x.InvoiceAmendmentFlags
	}
	return 0
}

func (x *UniversalTransferDocumentRevisionMetadata) GetOriginalInvoiceNumber() string {
	if x != nil && x.OriginalInvoiceNumber != nil {
		return *x.OriginalInvoiceNumber
	}
	return ""
}

func (x *UniversalTransferDocumentRevisionMetadata) GetOriginalInvoiceDate() string {
	if x != nil && x.OriginalInvoiceDate != nil {
		return *x.OriginalInvoiceDate
	}
	return ""
}

type UniversalCorrectionDocumentMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DocumentStatus                *UniversalTransferDocumentStatus `protobuf:"varint,1,req,name=DocumentStatus,enum=UniversalTransferDocumentStatus" json:"DocumentStatus,omitempty"`
	TotalInc                      *string                          `protobuf:"bytes,2,req,name=TotalInc" json:"TotalInc,omitempty"`
	TotalDec                      *string                          `protobuf:"bytes,3,req,name=TotalDec" json:"TotalDec,omitempty"`
	VatInc                        *string                          `protobuf:"bytes,4,req,name=VatInc" json:"VatInc,omitempty"`
	VatDec                        *string                          `protobuf:"bytes,5,req,name=VatDec" json:"VatDec,omitempty"`
	Grounds                       *string                          `protobuf:"bytes,6,opt,name=Grounds" json:"Grounds,omitempty"` // DocumentGrounds
	DocumentFunction              *string                          `protobuf:"bytes,7,req,name=DocumentFunction" json:"DocumentFunction,omitempty"`
	Currency                      *int32                           `protobuf:"varint,8,req,name=Currency" json:"Currency,omitempty"`
	ConfirmationDateTimeTicks     *int64                           `protobuf:"fixed64,9,req,name=ConfirmationDateTimeTicks" json:"ConfirmationDateTimeTicks,omitempty"`
	InvoiceAmendmentFlags         *int32                           `protobuf:"varint,10,req,name=InvoiceAmendmentFlags" json:"InvoiceAmendmentFlags,omitempty"`
	OriginalInvoiceNumber         *string                          `protobuf:"bytes,11,req,name=OriginalInvoiceNumber" json:"OriginalInvoiceNumber,omitempty"`
	OriginalInvoiceDate           *string                          `protobuf:"bytes,12,req,name=OriginalInvoiceDate" json:"OriginalInvoiceDate,omitempty"`
	OriginalInvoiceRevisionNumber *string                          `protobuf:"bytes,13,opt,name=OriginalInvoiceRevisionNumber" json:"OriginalInvoiceRevisionNumber,omitempty"`
	OriginalInvoiceRevisionDate   *string                          `protobuf:"bytes,14,opt,name=OriginalInvoiceRevisionDate" json:"OriginalInvoiceRevisionDate,omitempty"`
}

func (x *UniversalCorrectionDocumentMetadata) Reset() {
	*x = UniversalCorrectionDocumentMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[113]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UniversalCorrectionDocumentMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UniversalCorrectionDocumentMetadata) ProtoMessage() {}

func (x *UniversalCorrectionDocumentMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[113]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UniversalCorrectionDocumentMetadata.ProtoReflect.Descriptor instead.
func (*UniversalCorrectionDocumentMetadata) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{113}
}

func (x *UniversalCorrectionDocumentMetadata) GetDocumentStatus() UniversalTransferDocumentStatus {
	if x != nil && x.DocumentStatus != nil {
		return *x.DocumentStatus
	}
	return UniversalTransferDocumentStatus_UnknownDocumentStatusUniversalTransferDocumentStatus
}

func (x *UniversalCorrectionDocumentMetadata) GetTotalInc() string {
	if x != nil && x.TotalInc != nil {
		return *x.TotalInc
	}
	return ""
}

func (x *UniversalCorrectionDocumentMetadata) GetTotalDec() string {
	if x != nil && x.TotalDec != nil {
		return *x.TotalDec
	}
	return ""
}

func (x *UniversalCorrectionDocumentMetadata) GetVatInc() string {
	if x != nil && x.VatInc != nil {
		return *x.VatInc
	}
	return ""
}

func (x *UniversalCorrectionDocumentMetadata) GetVatDec() string {
	if x != nil && x.VatDec != nil {
		return *x.VatDec
	}
	return ""
}

func (x *UniversalCorrectionDocumentMetadata) GetGrounds() string {
	if x != nil && x.Grounds != nil {
		return *x.Grounds
	}
	return ""
}

func (x *UniversalCorrectionDocumentMetadata) GetDocumentFunction() string {
	if x != nil && x.DocumentFunction != nil {
		return *x.DocumentFunction
	}
	return ""
}

func (x *UniversalCorrectionDocumentMetadata) GetCurrency() int32 {
	if x != nil && x.Currency != nil {
		return *x.Currency
	}
	return 0
}

func (x *UniversalCorrectionDocumentMetadata) GetConfirmationDateTimeTicks() int64 {
	if x != nil && x.ConfirmationDateTimeTicks != nil {
		return *x.ConfirmationDateTimeTicks
	}
	return 0
}

func (x *UniversalCorrectionDocumentMetadata) GetInvoiceAmendmentFlags() int32 {
	if x != nil && x.InvoiceAmendmentFlags != nil {
		return *x.InvoiceAmendmentFlags
	}
	return 0
}

func (x *UniversalCorrectionDocumentMetadata) GetOriginalInvoiceNumber() string {
	if x != nil && x.OriginalInvoiceNumber != nil {
		return *x.OriginalInvoiceNumber
	}
	return ""
}

func (x *UniversalCorrectionDocumentMetadata) GetOriginalInvoiceDate() string {
	if x != nil && x.OriginalInvoiceDate != nil {
		return *x.OriginalInvoiceDate
	}
	return ""
}

func (x *UniversalCorrectionDocumentMetadata) GetOriginalInvoiceRevisionNumber() string {
	if x != nil && x.OriginalInvoiceRevisionNumber != nil {
		return *x.OriginalInvoiceRevisionNumber
	}
	return ""
}

func (x *UniversalCorrectionDocumentMetadata) GetOriginalInvoiceRevisionDate() string {
	if x != nil && x.OriginalInvoiceRevisionDate != nil {
		return *x.OriginalInvoiceRevisionDate
	}
	return ""
}

type UniversalCorrectionDocumentRevisionMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DocumentStatus                  *UniversalTransferDocumentStatus `protobuf:"varint,1,req,name=DocumentStatus,enum=UniversalTransferDocumentStatus" json:"DocumentStatus,omitempty"`
	TotalInc                        *string                          `protobuf:"bytes,2,req,name=TotalInc" json:"TotalInc,omitempty"`
	TotalDec                        *string                          `protobuf:"bytes,3,req,name=TotalDec" json:"TotalDec,omitempty"`
	VatInc                          *string                          `protobuf:"bytes,4,req,name=VatInc" json:"VatInc,omitempty"`
	VatDec                          *string                          `protobuf:"bytes,5,req,name=VatDec" json:"VatDec,omitempty"`
	Grounds                         *string                          `protobuf:"bytes,6,opt,name=Grounds" json:"Grounds,omitempty"` // DocumentGrounds
	DocumentFunction                *string                          `protobuf:"bytes,7,req,name=DocumentFunction" json:"DocumentFunction,omitempty"`
	Currency                        *int32                           `protobuf:"varint,8,req,name=Currency" json:"Currency,omitempty"`
	ConfirmationDateTimeTicks       *int64                           `protobuf:"fixed64,9,req,name=ConfirmationDateTimeTicks" json:"ConfirmationDateTimeTicks,omitempty"`
	InvoiceAmendmentFlags           *int32                           `protobuf:"varint,10,req,name=InvoiceAmendmentFlags" json:"InvoiceAmendmentFlags,omitempty"`
	OriginalInvoiceNumber           *string                          `protobuf:"bytes,11,req,name=OriginalInvoiceNumber" json:"OriginalInvoiceNumber,omitempty"`
	OriginalInvoiceDate             *string                          `protobuf:"bytes,12,req,name=OriginalInvoiceDate" json:"OriginalInvoiceDate,omitempty"`
	OriginalInvoiceRevisionNumber   *string                          `protobuf:"bytes,13,opt,name=OriginalInvoiceRevisionNumber" json:"OriginalInvoiceRevisionNumber,omitempty"`
	OriginalInvoiceRevisionDate     *string                          `protobuf:"bytes,14,opt,name=OriginalInvoiceRevisionDate" json:"OriginalInvoiceRevisionDate,omitempty"`
	OriginalInvoiceCorrectionNumber *string                          `protobuf:"bytes,15,req,name=OriginalInvoiceCorrectionNumber" json:"OriginalInvoiceCorrectionNumber,omitempty"`
	OriginalInvoiceCorrectionDate   *string                          `protobuf:"bytes,16,req,name=OriginalInvoiceCorrectionDate" json:"OriginalInvoiceCorrectionDate,omitempty"`
}

func (x *UniversalCorrectionDocumentRevisionMetadata) Reset() {
	*x = UniversalCorrectionDocumentRevisionMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[114]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UniversalCorrectionDocumentRevisionMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UniversalCorrectionDocumentRevisionMetadata) ProtoMessage() {}

func (x *UniversalCorrectionDocumentRevisionMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[114]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UniversalCorrectionDocumentRevisionMetadata.ProtoReflect.Descriptor instead.
func (*UniversalCorrectionDocumentRevisionMetadata) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{114}
}

func (x *UniversalCorrectionDocumentRevisionMetadata) GetDocumentStatus() UniversalTransferDocumentStatus {
	if x != nil && x.DocumentStatus != nil {
		return *x.DocumentStatus
	}
	return UniversalTransferDocumentStatus_UnknownDocumentStatusUniversalTransferDocumentStatus
}

func (x *UniversalCorrectionDocumentRevisionMetadata) GetTotalInc() string {
	if x != nil && x.TotalInc != nil {
		return *x.TotalInc
	}
	return ""
}

func (x *UniversalCorrectionDocumentRevisionMetadata) GetTotalDec() string {
	if x != nil && x.TotalDec != nil {
		return *x.TotalDec
	}
	return ""
}

func (x *UniversalCorrectionDocumentRevisionMetadata) GetVatInc() string {
	if x != nil && x.VatInc != nil {
		return *x.VatInc
	}
	return ""
}

func (x *UniversalCorrectionDocumentRevisionMetadata) GetVatDec() string {
	if x != nil && x.VatDec != nil {
		return *x.VatDec
	}
	return ""
}

func (x *UniversalCorrectionDocumentRevisionMetadata) GetGrounds() string {
	if x != nil && x.Grounds != nil {
		return *x.Grounds
	}
	return ""
}

func (x *UniversalCorrectionDocumentRevisionMetadata) GetDocumentFunction() string {
	if x != nil && x.DocumentFunction != nil {
		return *x.DocumentFunction
	}
	return ""
}

func (x *UniversalCorrectionDocumentRevisionMetadata) GetCurrency() int32 {
	if x != nil && x.Currency != nil {
		return *x.Currency
	}
	return 0
}

func (x *UniversalCorrectionDocumentRevisionMetadata) GetConfirmationDateTimeTicks() int64 {
	if x != nil && x.ConfirmationDateTimeTicks != nil {
		return *x.ConfirmationDateTimeTicks
	}
	return 0
}

func (x *UniversalCorrectionDocumentRevisionMetadata) GetInvoiceAmendmentFlags() int32 {
	if x != nil && x.InvoiceAmendmentFlags != nil {
		return *x.InvoiceAmendmentFlags
	}
	return 0
}

func (x *UniversalCorrectionDocumentRevisionMetadata) GetOriginalInvoiceNumber() string {
	if x != nil && x.OriginalInvoiceNumber != nil {
		return *x.OriginalInvoiceNumber
	}
	return ""
}

func (x *UniversalCorrectionDocumentRevisionMetadata) GetOriginalInvoiceDate() string {
	if x != nil && x.OriginalInvoiceDate != nil {
		return *x.OriginalInvoiceDate
	}
	return ""
}

func (x *UniversalCorrectionDocumentRevisionMetadata) GetOriginalInvoiceRevisionNumber() string {
	if x != nil && x.OriginalInvoiceRevisionNumber != nil {
		return *x.OriginalInvoiceRevisionNumber
	}
	return ""
}

func (x *UniversalCorrectionDocumentRevisionMetadata) GetOriginalInvoiceRevisionDate() string {
	if x != nil && x.OriginalInvoiceRevisionDate != nil {
		return *x.OriginalInvoiceRevisionDate
	}
	return ""
}

func (x *UniversalCorrectionDocumentRevisionMetadata) GetOriginalInvoiceCorrectionNumber() string {
	if x != nil && x.OriginalInvoiceCorrectionNumber != nil {
		return *x.OriginalInvoiceCorrectionNumber
	}
	return ""
}

func (x *UniversalCorrectionDocumentRevisionMetadata) GetOriginalInvoiceCorrectionDate() string {
	if x != nil && x.OriginalInvoiceCorrectionDate != nil {
		return *x.OriginalInvoiceCorrectionDate
	}
	return ""
}

type MetadataItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   *string `protobuf:"bytes,1,req,name=Key" json:"Key,omitempty"`
	Value *string `protobuf:"bytes,2,req,name=Value" json:"Value,omitempty"`
}

func (x *MetadataItem) Reset() {
	*x = MetadataItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[115]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetadataItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetadataItem) ProtoMessage() {}

func (x *MetadataItem) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[115]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetadataItem.ProtoReflect.Descriptor instead.
func (*MetadataItem) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{115}
}

func (x *MetadataItem) GetKey() string {
	if x != nil && x.Key != nil {
		return *x.Key
	}
	return ""
}

func (x *MetadataItem) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

type RecipientReceiptMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReceiptStatus        *GeneralReceiptStatus `protobuf:"varint,1,req,name=ReceiptStatus,enum=GeneralReceiptStatus" json:"ReceiptStatus,omitempty"`
	ConfirmationMetadata *ConfirmationMetadata `protobuf:"bytes,2,req,name=ConfirmationMetadata" json:"ConfirmationMetadata,omitempty"`
}

func (x *RecipientReceiptMetadata) Reset() {
	*x = RecipientReceiptMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[116]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecipientReceiptMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecipientReceiptMetadata) ProtoMessage() {}

func (x *RecipientReceiptMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[116]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecipientReceiptMetadata.ProtoReflect.Descriptor instead.
func (*RecipientReceiptMetadata) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{116}
}

func (x *RecipientReceiptMetadata) GetReceiptStatus() GeneralReceiptStatus {
	if x != nil && x.ReceiptStatus != nil {
		return *x.ReceiptStatus
	}
	return GeneralReceiptStatus_GeneralReceiptStatusUnknown
}

func (x *RecipientReceiptMetadata) GetConfirmationMetadata() *ConfirmationMetadata {
	if x != nil {
		return x.ConfirmationMetadata
	}
	return nil
}

type ConfirmationMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReceiptStatus *GeneralReceiptStatus `protobuf:"varint,1,req,name=ReceiptStatus,enum=GeneralReceiptStatus" json:"ReceiptStatus,omitempty"`
	DateTimeTicks *int64                `protobuf:"fixed64,2,req,name=DateTimeTicks" json:"DateTimeTicks,omitempty"`
}

func (x *ConfirmationMetadata) Reset() {
	*x = ConfirmationMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[117]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfirmationMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfirmationMetadata) ProtoMessage() {}

func (x *ConfirmationMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[117]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfirmationMetadata.ProtoReflect.Descriptor instead.
func (*ConfirmationMetadata) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{117}
}

func (x *ConfirmationMetadata) GetReceiptStatus() GeneralReceiptStatus {
	if x != nil && x.ReceiptStatus != nil {
		return *x.ReceiptStatus
	}
	return GeneralReceiptStatus_GeneralReceiptStatusUnknown
}

func (x *ConfirmationMetadata) GetDateTimeTicks() int64 {
	if x != nil && x.DateTimeTicks != nil {
		return *x.DateTimeTicks
	}
	return 0
}

type AmendmentRequestMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AmendmentFlags *int32                `protobuf:"varint,1,req,name=AmendmentFlags" json:"AmendmentFlags,omitempty"`
	ReceiptStatus  *GeneralReceiptStatus `protobuf:"varint,2,req,name=ReceiptStatus,enum=GeneralReceiptStatus" json:"ReceiptStatus,omitempty"`
}

func (x *AmendmentRequestMetadata) Reset() {
	*x = AmendmentRequestMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[118]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AmendmentRequestMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AmendmentRequestMetadata) ProtoMessage() {}

func (x *AmendmentRequestMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[118]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AmendmentRequestMetadata.ProtoReflect.Descriptor instead.
func (*AmendmentRequestMetadata) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{118}
}

func (x *AmendmentRequestMetadata) GetAmendmentFlags() int32 {
	if x != nil && x.AmendmentFlags != nil {
		return *x.AmendmentFlags
	}
	return 0
}

func (x *AmendmentRequestMetadata) GetReceiptStatus() GeneralReceiptStatus {
	if x != nil && x.ReceiptStatus != nil {
		return *x.ReceiptStatus
	}
	return GeneralReceiptStatus_GeneralReceiptStatusUnknown
}

type Origin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MessageType *MessageType `protobuf:"varint,1,req,name=MessageType,enum=MessageType" json:"MessageType,omitempty"`
	MessageId   *string      `protobuf:"bytes,2,req,name=MessageId" json:"MessageId,omitempty"`
}

func (x *Origin) Reset() {
	*x = Origin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[119]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Origin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Origin) ProtoMessage() {}

func (x *Origin) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[119]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Origin.ProtoReflect.Descriptor instead.
func (*Origin) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{119}
}

func (x *Origin) GetMessageType() MessageType {
	if x != nil && x.MessageType != nil {
		return *x.MessageType
	}
	return MessageType_UnknownMT
}

func (x *Origin) GetMessageId() string {
	if x != nil && x.MessageId != nil {
		return *x.MessageId
	}
	return ""
}

type SenderReceiptMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReceiptStatus *GeneralReceiptStatus `protobuf:"varint,1,req,name=ReceiptStatus,enum=GeneralReceiptStatus" json:"ReceiptStatus,omitempty"`
}

func (x *SenderReceiptMetadata) Reset() {
	*x = SenderReceiptMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[120]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SenderReceiptMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SenderReceiptMetadata) ProtoMessage() {}

func (x *SenderReceiptMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[120]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SenderReceiptMetadata.ProtoReflect.Descriptor instead.
func (*SenderReceiptMetadata) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{120}
}

func (x *SenderReceiptMetadata) GetReceiptStatus() GeneralReceiptStatus {
	if x != nil && x.ReceiptStatus != nil {
		return *x.ReceiptStatus
	}
	return GeneralReceiptStatus_GeneralReceiptStatusUnknown
}

type LastOuterDocflow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ParentEntityId *string           `protobuf:"bytes,1,req,name=ParentEntityId" json:"ParentEntityId,omitempty"`
	OuterDocflow   *OuterDocflowInfo `protobuf:"bytes,2,req,name=OuterDocflow" json:"OuterDocflow,omitempty"`
}

func (x *LastOuterDocflow) Reset() {
	*x = LastOuterDocflow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[121]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LastOuterDocflow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LastOuterDocflow) ProtoMessage() {}

func (x *LastOuterDocflow) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[121]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LastOuterDocflow.ProtoReflect.Descriptor instead.
func (*LastOuterDocflow) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{121}
}

func (x *LastOuterDocflow) GetParentEntityId() string {
	if x != nil && x.ParentEntityId != nil {
		return *x.ParentEntityId
	}
	return ""
}

func (x *LastOuterDocflow) GetOuterDocflow() *OuterDocflowInfo {
	if x != nil {
		return x.OuterDocflow
	}
	return nil
}

type DocflowStatusV3 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PrimaryStatus                *DocflowStatusModelV3            `protobuf:"bytes,1,req,name=PrimaryStatus" json:"PrimaryStatus,omitempty"`
	SecondaryStatus              *DocflowStatusModelV3            `protobuf:"bytes,2,opt,name=SecondaryStatus" json:"SecondaryStatus,omitempty"`
	PowerOfAttorneyGeneralStatus *PowerOfAttorneyValidationStatus `protobuf:"bytes,3,opt,name=PowerOfAttorneyGeneralStatus" json:"PowerOfAttorneyGeneralStatus,omitempty"`
}

func (x *DocflowStatusV3) Reset() {
	*x = DocflowStatusV3{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[122]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DocflowStatusV3) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DocflowStatusV3) ProtoMessage() {}

func (x *DocflowStatusV3) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[122]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DocflowStatusV3.ProtoReflect.Descriptor instead.
func (*DocflowStatusV3) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{122}
}

func (x *DocflowStatusV3) GetPrimaryStatus() *DocflowStatusModelV3 {
	if x != nil {
		return x.PrimaryStatus
	}
	return nil
}

func (x *DocflowStatusV3) GetSecondaryStatus() *DocflowStatusModelV3 {
	if x != nil {
		return x.SecondaryStatus
	}
	return nil
}

func (x *DocflowStatusV3) GetPowerOfAttorneyGeneralStatus() *PowerOfAttorneyValidationStatus {
	if x != nil {
		return x.PowerOfAttorneyGeneralStatus
	}
	return nil
}

type DocflowStatusModelV3 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Severity   *string `protobuf:"bytes,1,opt,name=Severity" json:"Severity,omitempty"`
	StatusText *string `protobuf:"bytes,2,opt,name=StatusText" json:"StatusText,omitempty"`
}

func (x *DocflowStatusModelV3) Reset() {
	*x = DocflowStatusModelV3{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[123]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DocflowStatusModelV3) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DocflowStatusModelV3) ProtoMessage() {}

func (x *DocflowStatusModelV3) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[123]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DocflowStatusModelV3.ProtoReflect.Descriptor instead.
func (*DocflowStatusModelV3) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{123}
}

func (x *DocflowStatusModelV3) GetSeverity() string {
	if x != nil && x.Severity != nil {
		return *x.Severity
	}
	return ""
}

func (x *DocflowStatusModelV3) GetStatusText() string {
	if x != nil && x.StatusText != nil {
		return *x.StatusText
	}
	return ""
}

type MessageToPost struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromBoxId                                     *string                             `protobuf:"bytes,1,req,name=FromBoxId" json:"FromBoxId,omitempty"`
	ToBoxId                                       *string                             `protobuf:"bytes,2,opt,name=ToBoxId" json:"ToBoxId,omitempty"`
	Invoices                                      []*XmlDocumentAttachment            `protobuf:"bytes,3,rep,name=Invoices" json:"Invoices,omitempty"`                             // Устаревшая структура
	NonformalizedDocuments                        []*NonformalizedAttachment          `protobuf:"bytes,4,rep,name=NonformalizedDocuments" json:"NonformalizedDocuments,omitempty"` // Устаревшая структура
	Torg12Documents                               []*BasicDocumentAttachment          `protobuf:"bytes,5,rep,name=Torg12Documents" json:"Torg12Documents,omitempty"`               // Устаревшая структура
	TrustConnectionRequest                        *TrustConnectionRequestAttachment   `protobuf:"bytes,6,opt,name=TrustConnectionRequest" json:"TrustConnectionRequest,omitempty"` // Устаревшая структура
	AcceptanceCertificates                        []*AcceptanceCertificateAttachment  `protobuf:"bytes,7,rep,name=AcceptanceCertificates" json:"AcceptanceCertificates,omitempty"` // Устаревшая структура
	StructuredDataAttachments                     []*StructuredDataAttachment         `protobuf:"bytes,8,rep,name=StructuredDataAttachments" json:"StructuredDataAttachments,omitempty"`
	ProformaInvoices                              []*BasicDocumentAttachment          `protobuf:"bytes,9,rep,name=ProformaInvoices" json:"ProformaInvoices,omitempty"`                                          // Устаревшая структура
	XmlTorg12SellerTitles                         []*XmlDocumentAttachment            `protobuf:"bytes,10,rep,name=XmlTorg12SellerTitles" json:"XmlTorg12SellerTitles,omitempty"`                               // Устаревшая структура
	XmlAcceptanceCertificateSellerTitles          []*XmlDocumentAttachment            `protobuf:"bytes,11,rep,name=XmlAcceptanceCertificateSellerTitles" json:"XmlAcceptanceCertificateSellerTitles,omitempty"` // Устаревшая структура
	ToDepartmentId                                *string                             `protobuf:"bytes,12,opt,name=ToDepartmentId" json:"ToDepartmentId,omitempty"`
	IsDraft                                       *bool                               `protobuf:"varint,13,opt,name=IsDraft,def=0" json:"IsDraft,omitempty"`
	LockDraft                                     *bool                               `protobuf:"varint,14,opt,name=LockDraft,def=0" json:"LockDraft,omitempty"`
	StrictDraftValidation                         *bool                               `protobuf:"varint,15,opt,name=StrictDraftValidation,def=1" json:"StrictDraftValidation,omitempty"`
	IsInternal                                    *bool                               `protobuf:"varint,16,opt,name=IsInternal,def=0" json:"IsInternal,omitempty"`
	FromDepartmentId                              *string                             `protobuf:"bytes,17,opt,name=FromDepartmentId" json:"FromDepartmentId,omitempty"`
	DelaySend                                     *bool                               `protobuf:"varint,18,opt,name=DelaySend,def=0" json:"DelaySend,omitempty"`
	PriceLists                                    []*PriceListAttachment              `protobuf:"bytes,19,rep,name=PriceLists" json:"PriceLists,omitempty"`                           // Устаревшая структура
	PriceListAgreements                           []*NonformalizedAttachment          `protobuf:"bytes,20,rep,name=PriceListAgreements" json:"PriceListAgreements,omitempty"`         // Устаревшая структура
	CertificateRegistries                         []*NonformalizedAttachment          `protobuf:"bytes,21,rep,name=CertificateRegistries" json:"CertificateRegistries,omitempty"`     // Устаревшая структура
	ReconciliationActs                            []*ReconciliationActAttachment      `protobuf:"bytes,22,rep,name=ReconciliationActs" json:"ReconciliationActs,omitempty"`           // Устаревшая структура
	Contracts                                     []*ContractAttachment               `protobuf:"bytes,23,rep,name=Contracts" json:"Contracts,omitempty"`                             // Устаревшая структура
	Torg13Documents                               []*Torg13Attachment                 `protobuf:"bytes,24,rep,name=Torg13Documents" json:"Torg13Documents,omitempty"`                 // Устаревшая структура
	ServiceDetailsDocuments                       []*ServiceDetailsAttachment         `protobuf:"bytes,25,rep,name=ServiceDetailsDocuments" json:"ServiceDetailsDocuments,omitempty"` // Устаревшая структура
	ProxyBoxId                                    *string                             `protobuf:"bytes,26,opt,name=ProxyBoxId" json:"ProxyBoxId,omitempty"`
	ProxyDepartmentId                             *string                             `protobuf:"bytes,27,opt,name=ProxyDepartmentId" json:"ProxyDepartmentId,omitempty"`
	EncryptedInvoices                             []*EncryptedInvoiceAttachment       `protobuf:"bytes,28,rep,name=EncryptedInvoices" json:"EncryptedInvoices,omitempty"`                                                         // Устаревшая структура
	EncryptedXmlTorg12SellerTitles                []*EncryptedXmlDocumentAttachment   `protobuf:"bytes,29,rep,name=EncryptedXmlTorg12SellerTitles" json:"EncryptedXmlTorg12SellerTitles,omitempty"`                               // Устаревшая структура
	EncryptedXmlAcceptanceCertificateSellerTitles []*EncryptedXmlDocumentAttachment   `protobuf:"bytes,30,rep,name=EncryptedXmlAcceptanceCertificateSellerTitles" json:"EncryptedXmlAcceptanceCertificateSellerTitles,omitempty"` // Устаревшая структура
	SupplementaryAgreements                       []*SupplementaryAgreementAttachment `protobuf:"bytes,31,rep,name=SupplementaryAgreements" json:"SupplementaryAgreements,omitempty"`                                             // Устаревшая структура
	LockPacket                                    *bool                               `protobuf:"varint,32,opt,name=LockPacket,def=0" json:"LockPacket,omitempty"`
	UniversalTransferDocumentSellerTitles         []*XmlDocumentAttachment            `protobuf:"bytes,33,rep,name=UniversalTransferDocumentSellerTitles" json:"UniversalTransferDocumentSellerTitles,omitempty"` // Устаревшая структура
	DocumentAttachments                           []*DocumentAttachment               `protobuf:"bytes,34,rep,name=DocumentAttachments" json:"DocumentAttachments,omitempty"`
	LockMode                                      *LockMode                           `protobuf:"varint,35,opt,name=LockMode,enum=LockMode,def=1" json:"LockMode,omitempty"`
}

// Default values for MessageToPost fields.
const (
	Default_MessageToPost_IsDraft               = bool(false)
	Default_MessageToPost_LockDraft             = bool(false)
	Default_MessageToPost_StrictDraftValidation = bool(true)
	Default_MessageToPost_IsInternal            = bool(false)
	Default_MessageToPost_DelaySend             = bool(false)
	Default_MessageToPost_LockPacket            = bool(false)
	Default_MessageToPost_LockMode              = LockMode_None
)

func (x *MessageToPost) Reset() {
	*x = MessageToPost{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[124]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageToPost) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageToPost) ProtoMessage() {}

func (x *MessageToPost) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[124]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageToPost.ProtoReflect.Descriptor instead.
func (*MessageToPost) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{124}
}

func (x *MessageToPost) GetFromBoxId() string {
	if x != nil && x.FromBoxId != nil {
		return *x.FromBoxId
	}
	return ""
}

func (x *MessageToPost) GetToBoxId() string {
	if x != nil && x.ToBoxId != nil {
		return *x.ToBoxId
	}
	return ""
}

func (x *MessageToPost) GetInvoices() []*XmlDocumentAttachment {
	if x != nil {
		return x.Invoices
	}
	return nil
}

func (x *MessageToPost) GetNonformalizedDocuments() []*NonformalizedAttachment {
	if x != nil {
		return x.NonformalizedDocuments
	}
	return nil
}

func (x *MessageToPost) GetTorg12Documents() []*BasicDocumentAttachment {
	if x != nil {
		return x.Torg12Documents
	}
	return nil
}

func (x *MessageToPost) GetTrustConnectionRequest() *TrustConnectionRequestAttachment {
	if x != nil {
		return x.TrustConnectionRequest
	}
	return nil
}

func (x *MessageToPost) GetAcceptanceCertificates() []*AcceptanceCertificateAttachment {
	if x != nil {
		return x.AcceptanceCertificates
	}
	return nil
}

func (x *MessageToPost) GetStructuredDataAttachments() []*StructuredDataAttachment {
	if x != nil {
		return x.StructuredDataAttachments
	}
	return nil
}

func (x *MessageToPost) GetProformaInvoices() []*BasicDocumentAttachment {
	if x != nil {
		return x.ProformaInvoices
	}
	return nil
}

func (x *MessageToPost) GetXmlTorg12SellerTitles() []*XmlDocumentAttachment {
	if x != nil {
		return x.XmlTorg12SellerTitles
	}
	return nil
}

func (x *MessageToPost) GetXmlAcceptanceCertificateSellerTitles() []*XmlDocumentAttachment {
	if x != nil {
		return x.XmlAcceptanceCertificateSellerTitles
	}
	return nil
}

func (x *MessageToPost) GetToDepartmentId() string {
	if x != nil && x.ToDepartmentId != nil {
		return *x.ToDepartmentId
	}
	return ""
}

func (x *MessageToPost) GetIsDraft() bool {
	if x != nil && x.IsDraft != nil {
		return *x.IsDraft
	}
	return Default_MessageToPost_IsDraft
}

func (x *MessageToPost) GetLockDraft() bool {
	if x != nil && x.LockDraft != nil {
		return *x.LockDraft
	}
	return Default_MessageToPost_LockDraft
}

func (x *MessageToPost) GetStrictDraftValidation() bool {
	if x != nil && x.StrictDraftValidation != nil {
		return *x.StrictDraftValidation
	}
	return Default_MessageToPost_StrictDraftValidation
}

func (x *MessageToPost) GetIsInternal() bool {
	if x != nil && x.IsInternal != nil {
		return *x.IsInternal
	}
	return Default_MessageToPost_IsInternal
}

func (x *MessageToPost) GetFromDepartmentId() string {
	if x != nil && x.FromDepartmentId != nil {
		return *x.FromDepartmentId
	}
	return ""
}

func (x *MessageToPost) GetDelaySend() bool {
	if x != nil && x.DelaySend != nil {
		return *x.DelaySend
	}
	return Default_MessageToPost_DelaySend
}

func (x *MessageToPost) GetPriceLists() []*PriceListAttachment {
	if x != nil {
		return x.PriceLists
	}
	return nil
}

func (x *MessageToPost) GetPriceListAgreements() []*NonformalizedAttachment {
	if x != nil {
		return x.PriceListAgreements
	}
	return nil
}

func (x *MessageToPost) GetCertificateRegistries() []*NonformalizedAttachment {
	if x != nil {
		return x.CertificateRegistries
	}
	return nil
}

func (x *MessageToPost) GetReconciliationActs() []*ReconciliationActAttachment {
	if x != nil {
		return x.ReconciliationActs
	}
	return nil
}

func (x *MessageToPost) GetContracts() []*ContractAttachment {
	if x != nil {
		return x.Contracts
	}
	return nil
}

func (x *MessageToPost) GetTorg13Documents() []*Torg13Attachment {
	if x != nil {
		return x.Torg13Documents
	}
	return nil
}

func (x *MessageToPost) GetServiceDetailsDocuments() []*ServiceDetailsAttachment {
	if x != nil {
		return x.ServiceDetailsDocuments
	}
	return nil
}

func (x *MessageToPost) GetProxyBoxId() string {
	if x != nil && x.ProxyBoxId != nil {
		return *x.ProxyBoxId
	}
	return ""
}

func (x *MessageToPost) GetProxyDepartmentId() string {
	if x != nil && x.ProxyDepartmentId != nil {
		return *x.ProxyDepartmentId
	}
	return ""
}

func (x *MessageToPost) GetEncryptedInvoices() []*EncryptedInvoiceAttachment {
	if x != nil {
		return x.EncryptedInvoices
	}
	return nil
}

func (x *MessageToPost) GetEncryptedXmlTorg12SellerTitles() []*EncryptedXmlDocumentAttachment {
	if x != nil {
		return x.EncryptedXmlTorg12SellerTitles
	}
	return nil
}

func (x *MessageToPost) GetEncryptedXmlAcceptanceCertificateSellerTitles() []*EncryptedXmlDocumentAttachment {
	if x != nil {
		return x.EncryptedXmlAcceptanceCertificateSellerTitles
	}
	return nil
}

func (x *MessageToPost) GetSupplementaryAgreements() []*SupplementaryAgreementAttachment {
	if x != nil {
		return x.SupplementaryAgreements
	}
	return nil
}

func (x *MessageToPost) GetLockPacket() bool {
	if x != nil && x.LockPacket != nil {
		return *x.LockPacket
	}
	return Default_MessageToPost_LockPacket
}

func (x *MessageToPost) GetUniversalTransferDocumentSellerTitles() []*XmlDocumentAttachment {
	if x != nil {
		return x.UniversalTransferDocumentSellerTitles
	}
	return nil
}

func (x *MessageToPost) GetDocumentAttachments() []*DocumentAttachment {
	if x != nil {
		return x.DocumentAttachments
	}
	return nil
}

func (x *MessageToPost) GetLockMode() LockMode {
	if x != nil && x.LockMode != nil {
		return *x.LockMode
	}
	return Default_MessageToPost_LockMode
}

type XmlDocumentAttachment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SignedContent          *SignedContent    `protobuf:"bytes,1,req,name=SignedContent" json:"SignedContent,omitempty"`
	Comment                *string           `protobuf:"bytes,3,opt,name=Comment" json:"Comment,omitempty"`
	InitialDocumentIds     []*DocumentId     `protobuf:"bytes,4,rep,name=InitialDocumentIds" json:"InitialDocumentIds,omitempty"`
	SubordinateDocumentIds []*DocumentId     `protobuf:"bytes,5,rep,name=SubordinateDocumentIds" json:"SubordinateDocumentIds,omitempty"`
	CustomDocumentId       *string           `protobuf:"bytes,6,opt,name=CustomDocumentId" json:"CustomDocumentId,omitempty"`
	NeedReceipt            *bool             `protobuf:"varint,7,opt,name=NeedReceipt,def=0" json:"NeedReceipt,omitempty"`
	CustomData             []*CustomDataItem `protobuf:"bytes,8,rep,name=CustomData" json:"CustomData,omitempty"`
}

// Default values for XmlDocumentAttachment fields.
const (
	Default_XmlDocumentAttachment_NeedReceipt = bool(false)
)

func (x *XmlDocumentAttachment) Reset() {
	*x = XmlDocumentAttachment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[125]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *XmlDocumentAttachment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*XmlDocumentAttachment) ProtoMessage() {}

func (x *XmlDocumentAttachment) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[125]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use XmlDocumentAttachment.ProtoReflect.Descriptor instead.
func (*XmlDocumentAttachment) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{125}
}

func (x *XmlDocumentAttachment) GetSignedContent() *SignedContent {
	if x != nil {
		return x.SignedContent
	}
	return nil
}

func (x *XmlDocumentAttachment) GetComment() string {
	if x != nil && x.Comment != nil {
		return *x.Comment
	}
	return ""
}

func (x *XmlDocumentAttachment) GetInitialDocumentIds() []*DocumentId {
	if x != nil {
		return x.InitialDocumentIds
	}
	return nil
}

func (x *XmlDocumentAttachment) GetSubordinateDocumentIds() []*DocumentId {
	if x != nil {
		return x.SubordinateDocumentIds
	}
	return nil
}

func (x *XmlDocumentAttachment) GetCustomDocumentId() string {
	if x != nil && x.CustomDocumentId != nil {
		return *x.CustomDocumentId
	}
	return ""
}

func (x *XmlDocumentAttachment) GetNeedReceipt() bool {
	if x != nil && x.NeedReceipt != nil {
		return *x.NeedReceipt
	}
	return Default_XmlDocumentAttachment_NeedReceipt
}

func (x *XmlDocumentAttachment) GetCustomData() []*CustomDataItem {
	if x != nil {
		return x.CustomData
	}
	return nil
}

type NonformalizedAttachment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SignedContent          *SignedContent    `protobuf:"bytes,1,req,name=SignedContent" json:"SignedContent,omitempty"`
	FileName               *string           `protobuf:"bytes,2,req,name=FileName" json:"FileName,omitempty"`
	Comment                *string           `protobuf:"bytes,3,opt,name=Comment" json:"Comment,omitempty"`
	NeedRecipientSignature *bool             `protobuf:"varint,4,opt,name=NeedRecipientSignature,def=0" json:"NeedRecipientSignature,omitempty"`
	InitialDocumentIds     []*DocumentId     `protobuf:"bytes,5,rep,name=InitialDocumentIds" json:"InitialDocumentIds,omitempty"`
	SubordinateDocumentIds []*DocumentId     `protobuf:"bytes,6,rep,name=SubordinateDocumentIds" json:"SubordinateDocumentIds,omitempty"`
	DocumentDate           *string           `protobuf:"bytes,7,opt,name=DocumentDate" json:"DocumentDate,omitempty"`
	DocumentNumber         *string           `protobuf:"bytes,8,opt,name=DocumentNumber" json:"DocumentNumber,omitempty"`
	CustomDocumentId       *string           `protobuf:"bytes,9,opt,name=CustomDocumentId" json:"CustomDocumentId,omitempty"`
	NeedReceipt            *bool             `protobuf:"varint,10,opt,name=NeedReceipt,def=0" json:"NeedReceipt,omitempty"`
	CustomData             []*CustomDataItem `protobuf:"bytes,11,rep,name=CustomData" json:"CustomData,omitempty"`
}

// Default values for NonformalizedAttachment fields.
const (
	Default_NonformalizedAttachment_NeedRecipientSignature = bool(false)
	Default_NonformalizedAttachment_NeedReceipt            = bool(false)
)

func (x *NonformalizedAttachment) Reset() {
	*x = NonformalizedAttachment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[126]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NonformalizedAttachment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NonformalizedAttachment) ProtoMessage() {}

func (x *NonformalizedAttachment) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[126]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NonformalizedAttachment.ProtoReflect.Descriptor instead.
func (*NonformalizedAttachment) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{126}
}

func (x *NonformalizedAttachment) GetSignedContent() *SignedContent {
	if x != nil {
		return x.SignedContent
	}
	return nil
}

func (x *NonformalizedAttachment) GetFileName() string {
	if x != nil && x.FileName != nil {
		return *x.FileName
	}
	return ""
}

func (x *NonformalizedAttachment) GetComment() string {
	if x != nil && x.Comment != nil {
		return *x.Comment
	}
	return ""
}

func (x *NonformalizedAttachment) GetNeedRecipientSignature() bool {
	if x != nil && x.NeedRecipientSignature != nil {
		return *x.NeedRecipientSignature
	}
	return Default_NonformalizedAttachment_NeedRecipientSignature
}

func (x *NonformalizedAttachment) GetInitialDocumentIds() []*DocumentId {
	if x != nil {
		return x.InitialDocumentIds
	}
	return nil
}

func (x *NonformalizedAttachment) GetSubordinateDocumentIds() []*DocumentId {
	if x != nil {
		return x.SubordinateDocumentIds
	}
	return nil
}

func (x *NonformalizedAttachment) GetDocumentDate() string {
	if x != nil && x.DocumentDate != nil {
		return *x.DocumentDate
	}
	return ""
}

func (x *NonformalizedAttachment) GetDocumentNumber() string {
	if x != nil && x.DocumentNumber != nil {
		return *x.DocumentNumber
	}
	return ""
}

func (x *NonformalizedAttachment) GetCustomDocumentId() string {
	if x != nil && x.CustomDocumentId != nil {
		return *x.CustomDocumentId
	}
	return ""
}

func (x *NonformalizedAttachment) GetNeedReceipt() bool {
	if x != nil && x.NeedReceipt != nil {
		return *x.NeedReceipt
	}
	return Default_NonformalizedAttachment_NeedReceipt
}

func (x *NonformalizedAttachment) GetCustomData() []*CustomDataItem {
	if x != nil {
		return x.CustomData
	}
	return nil
}

type BasicDocumentAttachment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SignedContent          *SignedContent    `protobuf:"bytes,1,req,name=SignedContent" json:"SignedContent,omitempty"`
	FileName               *string           `protobuf:"bytes,2,req,name=FileName" json:"FileName,omitempty"`
	Comment                *string           `protobuf:"bytes,3,opt,name=Comment" json:"Comment,omitempty"`
	InitialDocumentIds     []*DocumentId     `protobuf:"bytes,4,rep,name=InitialDocumentIds" json:"InitialDocumentIds,omitempty"`
	SubordinateDocumentIds []*DocumentId     `protobuf:"bytes,5,rep,name=SubordinateDocumentIds" json:"SubordinateDocumentIds,omitempty"`
	DocumentDate           *string           `protobuf:"bytes,6,req,name=DocumentDate" json:"DocumentDate,omitempty"`
	DocumentNumber         *string           `protobuf:"bytes,7,req,name=DocumentNumber" json:"DocumentNumber,omitempty"`
	Total                  *string           `protobuf:"bytes,8,req,name=Total" json:"Total,omitempty"`
	CustomDocumentId       *string           `protobuf:"bytes,9,opt,name=CustomDocumentId" json:"CustomDocumentId,omitempty"`
	Vat                    *string           `protobuf:"bytes,10,opt,name=Vat" json:"Vat,omitempty"`
	Grounds                *string           `protobuf:"bytes,11,opt,name=Grounds" json:"Grounds,omitempty"`
	NeedReceipt            *bool             `protobuf:"varint,12,opt,name=NeedReceipt,def=0" json:"NeedReceipt,omitempty"`
	CustomData             []*CustomDataItem `protobuf:"bytes,13,rep,name=CustomData" json:"CustomData,omitempty"`
}

// Default values for BasicDocumentAttachment fields.
const (
	Default_BasicDocumentAttachment_NeedReceipt = bool(false)
)

func (x *BasicDocumentAttachment) Reset() {
	*x = BasicDocumentAttachment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[127]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BasicDocumentAttachment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BasicDocumentAttachment) ProtoMessage() {}

func (x *BasicDocumentAttachment) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[127]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BasicDocumentAttachment.ProtoReflect.Descriptor instead.
func (*BasicDocumentAttachment) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{127}
}

func (x *BasicDocumentAttachment) GetSignedContent() *SignedContent {
	if x != nil {
		return x.SignedContent
	}
	return nil
}

func (x *BasicDocumentAttachment) GetFileName() string {
	if x != nil && x.FileName != nil {
		return *x.FileName
	}
	return ""
}

func (x *BasicDocumentAttachment) GetComment() string {
	if x != nil && x.Comment != nil {
		return *x.Comment
	}
	return ""
}

func (x *BasicDocumentAttachment) GetInitialDocumentIds() []*DocumentId {
	if x != nil {
		return x.InitialDocumentIds
	}
	return nil
}

func (x *BasicDocumentAttachment) GetSubordinateDocumentIds() []*DocumentId {
	if x != nil {
		return x.SubordinateDocumentIds
	}
	return nil
}

func (x *BasicDocumentAttachment) GetDocumentDate() string {
	if x != nil && x.DocumentDate != nil {
		return *x.DocumentDate
	}
	return ""
}

func (x *BasicDocumentAttachment) GetDocumentNumber() string {
	if x != nil && x.DocumentNumber != nil {
		return *x.DocumentNumber
	}
	return ""
}

func (x *BasicDocumentAttachment) GetTotal() string {
	if x != nil && x.Total != nil {
		return *x.Total
	}
	return ""
}

func (x *BasicDocumentAttachment) GetCustomDocumentId() string {
	if x != nil && x.CustomDocumentId != nil {
		return *x.CustomDocumentId
	}
	return ""
}

func (x *BasicDocumentAttachment) GetVat() string {
	if x != nil && x.Vat != nil {
		return *x.Vat
	}
	return ""
}

func (x *BasicDocumentAttachment) GetGrounds() string {
	if x != nil && x.Grounds != nil {
		return *x.Grounds
	}
	return ""
}

func (x *BasicDocumentAttachment) GetNeedReceipt() bool {
	if x != nil && x.NeedReceipt != nil {
		return *x.NeedReceipt
	}
	return Default_BasicDocumentAttachment_NeedReceipt
}

func (x *BasicDocumentAttachment) GetCustomData() []*CustomDataItem {
	if x != nil {
		return x.CustomData
	}
	return nil
}

type TrustConnectionRequestAttachment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SignedContent    *SignedContent    `protobuf:"bytes,1,req,name=SignedContent" json:"SignedContent,omitempty"`
	FileName         *string           `protobuf:"bytes,2,req,name=FileName" json:"FileName,omitempty"`
	Comment          *string           `protobuf:"bytes,3,opt,name=Comment" json:"Comment,omitempty"`
	CustomDocumentId *string           `protobuf:"bytes,4,opt,name=CustomDocumentId" json:"CustomDocumentId,omitempty"`
	CustomData       []*CustomDataItem `protobuf:"bytes,5,rep,name=CustomData" json:"CustomData,omitempty"`
}

func (x *TrustConnectionRequestAttachment) Reset() {
	*x = TrustConnectionRequestAttachment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[128]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrustConnectionRequestAttachment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrustConnectionRequestAttachment) ProtoMessage() {}

func (x *TrustConnectionRequestAttachment) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[128]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrustConnectionRequestAttachment.ProtoReflect.Descriptor instead.
func (*TrustConnectionRequestAttachment) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{128}
}

func (x *TrustConnectionRequestAttachment) GetSignedContent() *SignedContent {
	if x != nil {
		return x.SignedContent
	}
	return nil
}

func (x *TrustConnectionRequestAttachment) GetFileName() string {
	if x != nil && x.FileName != nil {
		return *x.FileName
	}
	return ""
}

func (x *TrustConnectionRequestAttachment) GetComment() string {
	if x != nil && x.Comment != nil {
		return *x.Comment
	}
	return ""
}

func (x *TrustConnectionRequestAttachment) GetCustomDocumentId() string {
	if x != nil && x.CustomDocumentId != nil {
		return *x.CustomDocumentId
	}
	return ""
}

func (x *TrustConnectionRequestAttachment) GetCustomData() []*CustomDataItem {
	if x != nil {
		return x.CustomData
	}
	return nil
}

type AcceptanceCertificateAttachment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SignedContent          *SignedContent    `protobuf:"bytes,1,req,name=SignedContent" json:"SignedContent,omitempty"`
	FileName               *string           `protobuf:"bytes,2,req,name=FileName" json:"FileName,omitempty"`
	Comment                *string           `protobuf:"bytes,3,opt,name=Comment" json:"Comment,omitempty"`
	InitialDocumentIds     []*DocumentId     `protobuf:"bytes,4,rep,name=InitialDocumentIds" json:"InitialDocumentIds,omitempty"`
	SubordinateDocumentIds []*DocumentId     `protobuf:"bytes,5,rep,name=SubordinateDocumentIds" json:"SubordinateDocumentIds,omitempty"`
	DocumentDate           *string           `protobuf:"bytes,6,req,name=DocumentDate" json:"DocumentDate,omitempty"`
	DocumentNumber         *string           `protobuf:"bytes,7,opt,name=DocumentNumber" json:"DocumentNumber,omitempty"`
	Total                  *string           `protobuf:"bytes,8,req,name=Total" json:"Total,omitempty"`
	CustomDocumentId       *string           `protobuf:"bytes,9,opt,name=CustomDocumentId" json:"CustomDocumentId,omitempty"`
	Vat                    *string           `protobuf:"bytes,10,opt,name=Vat" json:"Vat,omitempty"`
	Grounds                *string           `protobuf:"bytes,11,opt,name=Grounds" json:"Grounds,omitempty"`
	NeedReceipt            *bool             `protobuf:"varint,12,opt,name=NeedReceipt,def=0" json:"NeedReceipt,omitempty"`
	NeedRecipientSignature *bool             `protobuf:"varint,13,opt,name=NeedRecipientSignature,def=1" json:"NeedRecipientSignature,omitempty"`
	CustomData             []*CustomDataItem `protobuf:"bytes,14,rep,name=CustomData" json:"CustomData,omitempty"`
}

// Default values for AcceptanceCertificateAttachment fields.
const (
	Default_AcceptanceCertificateAttachment_NeedReceipt            = bool(false)
	Default_AcceptanceCertificateAttachment_NeedRecipientSignature = bool(true)
)

func (x *AcceptanceCertificateAttachment) Reset() {
	*x = AcceptanceCertificateAttachment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[129]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AcceptanceCertificateAttachment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcceptanceCertificateAttachment) ProtoMessage() {}

func (x *AcceptanceCertificateAttachment) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[129]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcceptanceCertificateAttachment.ProtoReflect.Descriptor instead.
func (*AcceptanceCertificateAttachment) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{129}
}

func (x *AcceptanceCertificateAttachment) GetSignedContent() *SignedContent {
	if x != nil {
		return x.SignedContent
	}
	return nil
}

func (x *AcceptanceCertificateAttachment) GetFileName() string {
	if x != nil && x.FileName != nil {
		return *x.FileName
	}
	return ""
}

func (x *AcceptanceCertificateAttachment) GetComment() string {
	if x != nil && x.Comment != nil {
		return *x.Comment
	}
	return ""
}

func (x *AcceptanceCertificateAttachment) GetInitialDocumentIds() []*DocumentId {
	if x != nil {
		return x.InitialDocumentIds
	}
	return nil
}

func (x *AcceptanceCertificateAttachment) GetSubordinateDocumentIds() []*DocumentId {
	if x != nil {
		return x.SubordinateDocumentIds
	}
	return nil
}

func (x *AcceptanceCertificateAttachment) GetDocumentDate() string {
	if x != nil && x.DocumentDate != nil {
		return *x.DocumentDate
	}
	return ""
}

func (x *AcceptanceCertificateAttachment) GetDocumentNumber() string {
	if x != nil && x.DocumentNumber != nil {
		return *x.DocumentNumber
	}
	return ""
}

func (x *AcceptanceCertificateAttachment) GetTotal() string {
	if x != nil && x.Total != nil {
		return *x.Total
	}
	return ""
}

func (x *AcceptanceCertificateAttachment) GetCustomDocumentId() string {
	if x != nil && x.CustomDocumentId != nil {
		return *x.CustomDocumentId
	}
	return ""
}

func (x *AcceptanceCertificateAttachment) GetVat() string {
	if x != nil && x.Vat != nil {
		return *x.Vat
	}
	return ""
}

func (x *AcceptanceCertificateAttachment) GetGrounds() string {
	if x != nil && x.Grounds != nil {
		return *x.Grounds
	}
	return ""
}

func (x *AcceptanceCertificateAttachment) GetNeedReceipt() bool {
	if x != nil && x.NeedReceipt != nil {
		return *x.NeedReceipt
	}
	return Default_AcceptanceCertificateAttachment_NeedReceipt
}

func (x *AcceptanceCertificateAttachment) GetNeedRecipientSignature() bool {
	if x != nil && x.NeedRecipientSignature != nil {
		return *x.NeedRecipientSignature
	}
	return Default_AcceptanceCertificateAttachment_NeedRecipientSignature
}

func (x *AcceptanceCertificateAttachment) GetCustomData() []*CustomDataItem {
	if x != nil {
		return x.CustomData
	}
	return nil
}

type StructuredDataAttachment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Content    []byte  `protobuf:"bytes,1,req,name=Content" json:"Content,omitempty"`
	FileName   *string `protobuf:"bytes,2,req,name=FileName" json:"FileName,omitempty"`
	DocumentId *string `protobuf:"bytes,3,req,name=DocumentId" json:"DocumentId,omitempty"`
}

func (x *StructuredDataAttachment) Reset() {
	*x = StructuredDataAttachment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[130]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StructuredDataAttachment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StructuredDataAttachment) ProtoMessage() {}

func (x *StructuredDataAttachment) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[130]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StructuredDataAttachment.ProtoReflect.Descriptor instead.
func (*StructuredDataAttachment) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{130}
}

func (x *StructuredDataAttachment) GetContent() []byte {
	if x != nil {
		return x.Content
	}
	return nil
}

func (x *StructuredDataAttachment) GetFileName() string {
	if x != nil && x.FileName != nil {
		return *x.FileName
	}
	return ""
}

func (x *StructuredDataAttachment) GetDocumentId() string {
	if x != nil && x.DocumentId != nil {
		return *x.DocumentId
	}
	return ""
}

type PriceListAttachment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SignedContent          *SignedContent    `protobuf:"bytes,1,req,name=SignedContent" json:"SignedContent,omitempty"`
	FileName               *string           `protobuf:"bytes,2,req,name=FileName" json:"FileName,omitempty"`
	Comment                *string           `protobuf:"bytes,3,opt,name=Comment" json:"Comment,omitempty"`
	InitialDocumentIds     []*DocumentId     `protobuf:"bytes,4,rep,name=InitialDocumentIds" json:"InitialDocumentIds,omitempty"`
	SubordinateDocumentIds []*DocumentId     `protobuf:"bytes,5,rep,name=SubordinateDocumentIds" json:"SubordinateDocumentIds,omitempty"`
	CustomDocumentId       *string           `protobuf:"bytes,6,opt,name=CustomDocumentId" json:"CustomDocumentId,omitempty"`
	DocumentDate           *string           `protobuf:"bytes,7,req,name=DocumentDate" json:"DocumentDate,omitempty"`
	DocumentNumber         *string           `protobuf:"bytes,8,req,name=DocumentNumber" json:"DocumentNumber,omitempty"`
	PriceListEffectiveDate *string           `protobuf:"bytes,9,req,name=PriceListEffectiveDate" json:"PriceListEffectiveDate,omitempty"`
	ContractDocumentDate   *string           `protobuf:"bytes,10,req,name=ContractDocumentDate" json:"ContractDocumentDate,omitempty"`
	ContractDocumentNumber *string           `protobuf:"bytes,11,req,name=ContractDocumentNumber" json:"ContractDocumentNumber,omitempty"`
	NeedReceipt            *bool             `protobuf:"varint,12,opt,name=NeedReceipt,def=0" json:"NeedReceipt,omitempty"`
	CustomData             []*CustomDataItem `protobuf:"bytes,13,rep,name=CustomData" json:"CustomData,omitempty"`
}

// Default values for PriceListAttachment fields.
const (
	Default_PriceListAttachment_NeedReceipt = bool(false)
)

func (x *PriceListAttachment) Reset() {
	*x = PriceListAttachment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[131]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PriceListAttachment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PriceListAttachment) ProtoMessage() {}

func (x *PriceListAttachment) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[131]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PriceListAttachment.ProtoReflect.Descriptor instead.
func (*PriceListAttachment) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{131}
}

func (x *PriceListAttachment) GetSignedContent() *SignedContent {
	if x != nil {
		return x.SignedContent
	}
	return nil
}

func (x *PriceListAttachment) GetFileName() string {
	if x != nil && x.FileName != nil {
		return *x.FileName
	}
	return ""
}

func (x *PriceListAttachment) GetComment() string {
	if x != nil && x.Comment != nil {
		return *x.Comment
	}
	return ""
}

func (x *PriceListAttachment) GetInitialDocumentIds() []*DocumentId {
	if x != nil {
		return x.InitialDocumentIds
	}
	return nil
}

func (x *PriceListAttachment) GetSubordinateDocumentIds() []*DocumentId {
	if x != nil {
		return x.SubordinateDocumentIds
	}
	return nil
}

func (x *PriceListAttachment) GetCustomDocumentId() string {
	if x != nil && x.CustomDocumentId != nil {
		return *x.CustomDocumentId
	}
	return ""
}

func (x *PriceListAttachment) GetDocumentDate() string {
	if x != nil && x.DocumentDate != nil {
		return *x.DocumentDate
	}
	return ""
}

func (x *PriceListAttachment) GetDocumentNumber() string {
	if x != nil && x.DocumentNumber != nil {
		return *x.DocumentNumber
	}
	return ""
}

func (x *PriceListAttachment) GetPriceListEffectiveDate() string {
	if x != nil && x.PriceListEffectiveDate != nil {
		return *x.PriceListEffectiveDate
	}
	return ""
}

func (x *PriceListAttachment) GetContractDocumentDate() string {
	if x != nil && x.ContractDocumentDate != nil {
		return *x.ContractDocumentDate
	}
	return ""
}

func (x *PriceListAttachment) GetContractDocumentNumber() string {
	if x != nil && x.ContractDocumentNumber != nil {
		return *x.ContractDocumentNumber
	}
	return ""
}

func (x *PriceListAttachment) GetNeedReceipt() bool {
	if x != nil && x.NeedReceipt != nil {
		return *x.NeedReceipt
	}
	return Default_PriceListAttachment_NeedReceipt
}

func (x *PriceListAttachment) GetCustomData() []*CustomDataItem {
	if x != nil {
		return x.CustomData
	}
	return nil
}

type ReconciliationActAttachment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SignedContent          *SignedContent    `protobuf:"bytes,1,req,name=SignedContent" json:"SignedContent,omitempty"`
	FileName               *string           `protobuf:"bytes,2,req,name=FileName" json:"FileName,omitempty"`
	Comment                *string           `protobuf:"bytes,3,opt,name=Comment" json:"Comment,omitempty"`
	InitialDocumentIds     []*DocumentId     `protobuf:"bytes,5,rep,name=InitialDocumentIds" json:"InitialDocumentIds,omitempty"`
	SubordinateDocumentIds []*DocumentId     `protobuf:"bytes,6,rep,name=SubordinateDocumentIds" json:"SubordinateDocumentIds,omitempty"`
	DocumentDate           *string           `protobuf:"bytes,7,req,name=DocumentDate" json:"DocumentDate,omitempty"`
	DocumentNumber         *string           `protobuf:"bytes,8,opt,name=DocumentNumber" json:"DocumentNumber,omitempty"`
	CustomDocumentId       *string           `protobuf:"bytes,9,opt,name=CustomDocumentId" json:"CustomDocumentId,omitempty"`
	NeedReceipt            *bool             `protobuf:"varint,10,opt,name=NeedReceipt,def=0" json:"NeedReceipt,omitempty"`
	CustomData             []*CustomDataItem `protobuf:"bytes,11,rep,name=CustomData" json:"CustomData,omitempty"`
}

// Default values for ReconciliationActAttachment fields.
const (
	Default_ReconciliationActAttachment_NeedReceipt = bool(false)
)

func (x *ReconciliationActAttachment) Reset() {
	*x = ReconciliationActAttachment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[132]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReconciliationActAttachment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReconciliationActAttachment) ProtoMessage() {}

func (x *ReconciliationActAttachment) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[132]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReconciliationActAttachment.ProtoReflect.Descriptor instead.
func (*ReconciliationActAttachment) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{132}
}

func (x *ReconciliationActAttachment) GetSignedContent() *SignedContent {
	if x != nil {
		return x.SignedContent
	}
	return nil
}

func (x *ReconciliationActAttachment) GetFileName() string {
	if x != nil && x.FileName != nil {
		return *x.FileName
	}
	return ""
}

func (x *ReconciliationActAttachment) GetComment() string {
	if x != nil && x.Comment != nil {
		return *x.Comment
	}
	return ""
}

func (x *ReconciliationActAttachment) GetInitialDocumentIds() []*DocumentId {
	if x != nil {
		return x.InitialDocumentIds
	}
	return nil
}

func (x *ReconciliationActAttachment) GetSubordinateDocumentIds() []*DocumentId {
	if x != nil {
		return x.SubordinateDocumentIds
	}
	return nil
}

func (x *ReconciliationActAttachment) GetDocumentDate() string {
	if x != nil && x.DocumentDate != nil {
		return *x.DocumentDate
	}
	return ""
}

func (x *ReconciliationActAttachment) GetDocumentNumber() string {
	if x != nil && x.DocumentNumber != nil {
		return *x.DocumentNumber
	}
	return ""
}

func (x *ReconciliationActAttachment) GetCustomDocumentId() string {
	if x != nil && x.CustomDocumentId != nil {
		return *x.CustomDocumentId
	}
	return ""
}

func (x *ReconciliationActAttachment) GetNeedReceipt() bool {
	if x != nil && x.NeedReceipt != nil {
		return *x.NeedReceipt
	}
	return Default_ReconciliationActAttachment_NeedReceipt
}

func (x *ReconciliationActAttachment) GetCustomData() []*CustomDataItem {
	if x != nil {
		return x.CustomData
	}
	return nil
}

type ContractAttachment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SignedContent          *SignedContent    `protobuf:"bytes,1,req,name=SignedContent" json:"SignedContent,omitempty"`
	FileName               *string           `protobuf:"bytes,2,req,name=FileName" json:"FileName,omitempty"`
	Comment                *string           `protobuf:"bytes,3,opt,name=Comment" json:"Comment,omitempty"`
	InitialDocumentIds     []*DocumentId     `protobuf:"bytes,4,rep,name=InitialDocumentIds" json:"InitialDocumentIds,omitempty"`
	SubordinateDocumentIds []*DocumentId     `protobuf:"bytes,5,rep,name=SubordinateDocumentIds" json:"SubordinateDocumentIds,omitempty"`
	CustomDocumentId       *string           `protobuf:"bytes,6,opt,name=CustomDocumentId" json:"CustomDocumentId,omitempty"`
	DocumentDate           *string           `protobuf:"bytes,7,req,name=DocumentDate" json:"DocumentDate,omitempty"`
	DocumentNumber         *string           `protobuf:"bytes,8,req,name=DocumentNumber" json:"DocumentNumber,omitempty"`
	ContractPrice          *string           `protobuf:"bytes,9,opt,name=ContractPrice" json:"ContractPrice,omitempty"`
	ContractType           *string           `protobuf:"bytes,10,opt,name=ContractType" json:"ContractType,omitempty"`
	NeedReceipt            *bool             `protobuf:"varint,11,opt,name=NeedReceipt,def=0" json:"NeedReceipt,omitempty"`
	CustomData             []*CustomDataItem `protobuf:"bytes,12,rep,name=CustomData" json:"CustomData,omitempty"`
}

// Default values for ContractAttachment fields.
const (
	Default_ContractAttachment_NeedReceipt = bool(false)
)

func (x *ContractAttachment) Reset() {
	*x = ContractAttachment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[133]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContractAttachment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContractAttachment) ProtoMessage() {}

func (x *ContractAttachment) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[133]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContractAttachment.ProtoReflect.Descriptor instead.
func (*ContractAttachment) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{133}
}

func (x *ContractAttachment) GetSignedContent() *SignedContent {
	if x != nil {
		return x.SignedContent
	}
	return nil
}

func (x *ContractAttachment) GetFileName() string {
	if x != nil && x.FileName != nil {
		return *x.FileName
	}
	return ""
}

func (x *ContractAttachment) GetComment() string {
	if x != nil && x.Comment != nil {
		return *x.Comment
	}
	return ""
}

func (x *ContractAttachment) GetInitialDocumentIds() []*DocumentId {
	if x != nil {
		return x.InitialDocumentIds
	}
	return nil
}

func (x *ContractAttachment) GetSubordinateDocumentIds() []*DocumentId {
	if x != nil {
		return x.SubordinateDocumentIds
	}
	return nil
}

func (x *ContractAttachment) GetCustomDocumentId() string {
	if x != nil && x.CustomDocumentId != nil {
		return *x.CustomDocumentId
	}
	return ""
}

func (x *ContractAttachment) GetDocumentDate() string {
	if x != nil && x.DocumentDate != nil {
		return *x.DocumentDate
	}
	return ""
}

func (x *ContractAttachment) GetDocumentNumber() string {
	if x != nil && x.DocumentNumber != nil {
		return *x.DocumentNumber
	}
	return ""
}

func (x *ContractAttachment) GetContractPrice() string {
	if x != nil && x.ContractPrice != nil {
		return *x.ContractPrice
	}
	return ""
}

func (x *ContractAttachment) GetContractType() string {
	if x != nil && x.ContractType != nil {
		return *x.ContractType
	}
	return ""
}

func (x *ContractAttachment) GetNeedReceipt() bool {
	if x != nil && x.NeedReceipt != nil {
		return *x.NeedReceipt
	}
	return Default_ContractAttachment_NeedReceipt
}

func (x *ContractAttachment) GetCustomData() []*CustomDataItem {
	if x != nil {
		return x.CustomData
	}
	return nil
}

type Torg13Attachment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SignedContent          *SignedContent    `protobuf:"bytes,1,req,name=SignedContent" json:"SignedContent,omitempty"`
	FileName               *string           `protobuf:"bytes,2,req,name=FileName" json:"FileName,omitempty"`
	Comment                *string           `protobuf:"bytes,3,opt,name=Comment" json:"Comment,omitempty"`
	InitialDocumentIds     []*DocumentId     `protobuf:"bytes,4,rep,name=InitialDocumentIds" json:"InitialDocumentIds,omitempty"`
	SubordinateDocumentIds []*DocumentId     `protobuf:"bytes,5,rep,name=SubordinateDocumentIds" json:"SubordinateDocumentIds,omitempty"`
	DocumentDate           *string           `protobuf:"bytes,6,req,name=DocumentDate" json:"DocumentDate,omitempty"`
	DocumentNumber         *string           `protobuf:"bytes,7,req,name=DocumentNumber" json:"DocumentNumber,omitempty"`
	Total                  *string           `protobuf:"bytes,8,req,name=Total" json:"Total,omitempty"`
	CustomDocumentId       *string           `protobuf:"bytes,9,opt,name=CustomDocumentId" json:"CustomDocumentId,omitempty"`
	Grounds                *string           `protobuf:"bytes,11,opt,name=Grounds" json:"Grounds,omitempty"`
	NeedReceipt            *bool             `protobuf:"varint,12,opt,name=NeedReceipt,def=0" json:"NeedReceipt,omitempty"`
	CustomData             []*CustomDataItem `protobuf:"bytes,13,rep,name=CustomData" json:"CustomData,omitempty"`
}

// Default values for Torg13Attachment fields.
const (
	Default_Torg13Attachment_NeedReceipt = bool(false)
)

func (x *Torg13Attachment) Reset() {
	*x = Torg13Attachment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[134]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Torg13Attachment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Torg13Attachment) ProtoMessage() {}

func (x *Torg13Attachment) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[134]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Torg13Attachment.ProtoReflect.Descriptor instead.
func (*Torg13Attachment) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{134}
}

func (x *Torg13Attachment) GetSignedContent() *SignedContent {
	if x != nil {
		return x.SignedContent
	}
	return nil
}

func (x *Torg13Attachment) GetFileName() string {
	if x != nil && x.FileName != nil {
		return *x.FileName
	}
	return ""
}

func (x *Torg13Attachment) GetComment() string {
	if x != nil && x.Comment != nil {
		return *x.Comment
	}
	return ""
}

func (x *Torg13Attachment) GetInitialDocumentIds() []*DocumentId {
	if x != nil {
		return x.InitialDocumentIds
	}
	return nil
}

func (x *Torg13Attachment) GetSubordinateDocumentIds() []*DocumentId {
	if x != nil {
		return x.SubordinateDocumentIds
	}
	return nil
}

func (x *Torg13Attachment) GetDocumentDate() string {
	if x != nil && x.DocumentDate != nil {
		return *x.DocumentDate
	}
	return ""
}

func (x *Torg13Attachment) GetDocumentNumber() string {
	if x != nil && x.DocumentNumber != nil {
		return *x.DocumentNumber
	}
	return ""
}

func (x *Torg13Attachment) GetTotal() string {
	if x != nil && x.Total != nil {
		return *x.Total
	}
	return ""
}

func (x *Torg13Attachment) GetCustomDocumentId() string {
	if x != nil && x.CustomDocumentId != nil {
		return *x.CustomDocumentId
	}
	return ""
}

func (x *Torg13Attachment) GetGrounds() string {
	if x != nil && x.Grounds != nil {
		return *x.Grounds
	}
	return ""
}

func (x *Torg13Attachment) GetNeedReceipt() bool {
	if x != nil && x.NeedReceipt != nil {
		return *x.NeedReceipt
	}
	return Default_Torg13Attachment_NeedReceipt
}

func (x *Torg13Attachment) GetCustomData() []*CustomDataItem {
	if x != nil {
		return x.CustomData
	}
	return nil
}

type ServiceDetailsAttachment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SignedContent          *SignedContent    `protobuf:"bytes,1,req,name=SignedContent" json:"SignedContent,omitempty"`
	FileName               *string           `protobuf:"bytes,2,req,name=FileName" json:"FileName,omitempty"`
	Comment                *string           `protobuf:"bytes,3,opt,name=Comment" json:"Comment,omitempty"`
	InitialDocumentIds     []*DocumentId     `protobuf:"bytes,5,rep,name=InitialDocumentIds" json:"InitialDocumentIds,omitempty"`
	SubordinateDocumentIds []*DocumentId     `protobuf:"bytes,6,rep,name=SubordinateDocumentIds" json:"SubordinateDocumentIds,omitempty"`
	DocumentDate           *string           `protobuf:"bytes,7,opt,name=DocumentDate" json:"DocumentDate,omitempty"`
	DocumentNumber         *string           `protobuf:"bytes,8,opt,name=DocumentNumber" json:"DocumentNumber,omitempty"`
	CustomDocumentId       *string           `protobuf:"bytes,9,opt,name=CustomDocumentId" json:"CustomDocumentId,omitempty"`
	NeedReceipt            *bool             `protobuf:"varint,10,opt,name=NeedReceipt,def=0" json:"NeedReceipt,omitempty"`
	CustomData             []*CustomDataItem `protobuf:"bytes,11,rep,name=CustomData" json:"CustomData,omitempty"`
}

// Default values for ServiceDetailsAttachment fields.
const (
	Default_ServiceDetailsAttachment_NeedReceipt = bool(false)
)

func (x *ServiceDetailsAttachment) Reset() {
	*x = ServiceDetailsAttachment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[135]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceDetailsAttachment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceDetailsAttachment) ProtoMessage() {}

func (x *ServiceDetailsAttachment) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[135]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceDetailsAttachment.ProtoReflect.Descriptor instead.
func (*ServiceDetailsAttachment) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{135}
}

func (x *ServiceDetailsAttachment) GetSignedContent() *SignedContent {
	if x != nil {
		return x.SignedContent
	}
	return nil
}

func (x *ServiceDetailsAttachment) GetFileName() string {
	if x != nil && x.FileName != nil {
		return *x.FileName
	}
	return ""
}

func (x *ServiceDetailsAttachment) GetComment() string {
	if x != nil && x.Comment != nil {
		return *x.Comment
	}
	return ""
}

func (x *ServiceDetailsAttachment) GetInitialDocumentIds() []*DocumentId {
	if x != nil {
		return x.InitialDocumentIds
	}
	return nil
}

func (x *ServiceDetailsAttachment) GetSubordinateDocumentIds() []*DocumentId {
	if x != nil {
		return x.SubordinateDocumentIds
	}
	return nil
}

func (x *ServiceDetailsAttachment) GetDocumentDate() string {
	if x != nil && x.DocumentDate != nil {
		return *x.DocumentDate
	}
	return ""
}

func (x *ServiceDetailsAttachment) GetDocumentNumber() string {
	if x != nil && x.DocumentNumber != nil {
		return *x.DocumentNumber
	}
	return ""
}

func (x *ServiceDetailsAttachment) GetCustomDocumentId() string {
	if x != nil && x.CustomDocumentId != nil {
		return *x.CustomDocumentId
	}
	return ""
}

func (x *ServiceDetailsAttachment) GetNeedReceipt() bool {
	if x != nil && x.NeedReceipt != nil {
		return *x.NeedReceipt
	}
	return Default_ServiceDetailsAttachment_NeedReceipt
}

func (x *ServiceDetailsAttachment) GetCustomData() []*CustomDataItem {
	if x != nil {
		return x.CustomData
	}
	return nil
}

type EncryptedInvoiceAttachment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SignedContent             *SignedContent                      `protobuf:"bytes,1,req,name=SignedContent" json:"SignedContent,omitempty"`
	Comment                   *string                             `protobuf:"bytes,3,opt,name=Comment" json:"Comment,omitempty"`
	InitialDocumentIds        []*DocumentId                       `protobuf:"bytes,4,rep,name=InitialDocumentIds" json:"InitialDocumentIds,omitempty"`
	SubordinateDocumentIds    []*DocumentId                       `protobuf:"bytes,5,rep,name=SubordinateDocumentIds" json:"SubordinateDocumentIds,omitempty"`
	CustomDocumentId          *string                             `protobuf:"bytes,6,opt,name=CustomDocumentId" json:"CustomDocumentId,omitempty"`
	CustomData                []*CustomDataItem                   `protobuf:"bytes,7,rep,name=CustomData" json:"CustomData,omitempty"`
	Metadata                  *EncryptedDocumentMetadata          `protobuf:"bytes,8,req,name=Metadata" json:"Metadata,omitempty"`
	InvoiceMetadata           *EncryptedInvoiceMetadata           `protobuf:"bytes,9,opt,name=InvoiceMetadata" json:"InvoiceMetadata,omitempty"`
	InvoiceCorrectionMetadata *EncryptedInvoiceCorrectionMetadata `protobuf:"bytes,10,opt,name=InvoiceCorrectionMetadata" json:"InvoiceCorrectionMetadata,omitempty"`
}

func (x *EncryptedInvoiceAttachment) Reset() {
	*x = EncryptedInvoiceAttachment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[136]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EncryptedInvoiceAttachment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncryptedInvoiceAttachment) ProtoMessage() {}

func (x *EncryptedInvoiceAttachment) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[136]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncryptedInvoiceAttachment.ProtoReflect.Descriptor instead.
func (*EncryptedInvoiceAttachment) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{136}
}

func (x *EncryptedInvoiceAttachment) GetSignedContent() *SignedContent {
	if x != nil {
		return x.SignedContent
	}
	return nil
}

func (x *EncryptedInvoiceAttachment) GetComment() string {
	if x != nil && x.Comment != nil {
		return *x.Comment
	}
	return ""
}

func (x *EncryptedInvoiceAttachment) GetInitialDocumentIds() []*DocumentId {
	if x != nil {
		return x.InitialDocumentIds
	}
	return nil
}

func (x *EncryptedInvoiceAttachment) GetSubordinateDocumentIds() []*DocumentId {
	if x != nil {
		return x.SubordinateDocumentIds
	}
	return nil
}

func (x *EncryptedInvoiceAttachment) GetCustomDocumentId() string {
	if x != nil && x.CustomDocumentId != nil {
		return *x.CustomDocumentId
	}
	return ""
}

func (x *EncryptedInvoiceAttachment) GetCustomData() []*CustomDataItem {
	if x != nil {
		return x.CustomData
	}
	return nil
}

func (x *EncryptedInvoiceAttachment) GetMetadata() *EncryptedDocumentMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *EncryptedInvoiceAttachment) GetInvoiceMetadata() *EncryptedInvoiceMetadata {
	if x != nil {
		return x.InvoiceMetadata
	}
	return nil
}

func (x *EncryptedInvoiceAttachment) GetInvoiceCorrectionMetadata() *EncryptedInvoiceCorrectionMetadata {
	if x != nil {
		return x.InvoiceCorrectionMetadata
	}
	return nil
}

type EncryptedDocumentMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileId                 *string                `protobuf:"bytes,1,req,name=FileId" json:"FileId,omitempty"`
	BuyerFnsParticipantId  *string                `protobuf:"bytes,2,req,name=BuyerFnsParticipantId" json:"BuyerFnsParticipantId,omitempty"`
	SenderFnsParticipantId *string                `protobuf:"bytes,3,req,name=SenderFnsParticipantId" json:"SenderFnsParticipantId,omitempty"`
	DocumentDateAndNumber  *DocumentDateAndNumber `protobuf:"bytes,4,req,name=DocumentDateAndNumber" json:"DocumentDateAndNumber,omitempty"`
}

func (x *EncryptedDocumentMetadata) Reset() {
	*x = EncryptedDocumentMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[137]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EncryptedDocumentMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncryptedDocumentMetadata) ProtoMessage() {}

func (x *EncryptedDocumentMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[137]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncryptedDocumentMetadata.ProtoReflect.Descriptor instead.
func (*EncryptedDocumentMetadata) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{137}
}

func (x *EncryptedDocumentMetadata) GetFileId() string {
	if x != nil && x.FileId != nil {
		return *x.FileId
	}
	return ""
}

func (x *EncryptedDocumentMetadata) GetBuyerFnsParticipantId() string {
	if x != nil && x.BuyerFnsParticipantId != nil {
		return *x.BuyerFnsParticipantId
	}
	return ""
}

func (x *EncryptedDocumentMetadata) GetSenderFnsParticipantId() string {
	if x != nil && x.SenderFnsParticipantId != nil {
		return *x.SenderFnsParticipantId
	}
	return ""
}

func (x *EncryptedDocumentMetadata) GetDocumentDateAndNumber() *DocumentDateAndNumber {
	if x != nil {
		return x.DocumentDateAndNumber
	}
	return nil
}

type EncryptedInvoiceMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RevisionDateAndNumber *DocumentDateAndNumber `protobuf:"bytes,1,opt,name=RevisionDateAndNumber" json:"RevisionDateAndNumber,omitempty"`
}

func (x *EncryptedInvoiceMetadata) Reset() {
	*x = EncryptedInvoiceMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[138]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EncryptedInvoiceMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncryptedInvoiceMetadata) ProtoMessage() {}

func (x *EncryptedInvoiceMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[138]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncryptedInvoiceMetadata.ProtoReflect.Descriptor instead.
func (*EncryptedInvoiceMetadata) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{138}
}

func (x *EncryptedInvoiceMetadata) GetRevisionDateAndNumber() *DocumentDateAndNumber {
	if x != nil {
		return x.RevisionDateAndNumber
	}
	return nil
}

type EncryptedInvoiceCorrectionMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OriginalInvoiceDateAndNumber           *DocumentDateAndNumber `protobuf:"bytes,1,req,name=OriginalInvoiceDateAndNumber" json:"OriginalInvoiceDateAndNumber,omitempty"`
	OriginalInvoiceRevisionDateAndNumber   *DocumentDateAndNumber `protobuf:"bytes,2,opt,name=OriginalInvoiceRevisionDateAndNumber" json:"OriginalInvoiceRevisionDateAndNumber,omitempty"`
	InvoiceCorrectionRevisionDateAndNumber *DocumentDateAndNumber `protobuf:"bytes,3,opt,name=InvoiceCorrectionRevisionDateAndNumber" json:"InvoiceCorrectionRevisionDateAndNumber,omitempty"`
}

func (x *EncryptedInvoiceCorrectionMetadata) Reset() {
	*x = EncryptedInvoiceCorrectionMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[139]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EncryptedInvoiceCorrectionMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncryptedInvoiceCorrectionMetadata) ProtoMessage() {}

func (x *EncryptedInvoiceCorrectionMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[139]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncryptedInvoiceCorrectionMetadata.ProtoReflect.Descriptor instead.
func (*EncryptedInvoiceCorrectionMetadata) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{139}
}

func (x *EncryptedInvoiceCorrectionMetadata) GetOriginalInvoiceDateAndNumber() *DocumentDateAndNumber {
	if x != nil {
		return x.OriginalInvoiceDateAndNumber
	}
	return nil
}

func (x *EncryptedInvoiceCorrectionMetadata) GetOriginalInvoiceRevisionDateAndNumber() *DocumentDateAndNumber {
	if x != nil {
		return x.OriginalInvoiceRevisionDateAndNumber
	}
	return nil
}

func (x *EncryptedInvoiceCorrectionMetadata) GetInvoiceCorrectionRevisionDateAndNumber() *DocumentDateAndNumber {
	if x != nil {
		return x.InvoiceCorrectionRevisionDateAndNumber
	}
	return nil
}

type DocumentDateAndNumber struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DocumentDate   *string `protobuf:"bytes,1,opt,name=DocumentDate" json:"DocumentDate,omitempty"`
	DocumentNumber *string `protobuf:"bytes,2,opt,name=DocumentNumber" json:"DocumentNumber,omitempty"`
}

func (x *DocumentDateAndNumber) Reset() {
	*x = DocumentDateAndNumber{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[140]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DocumentDateAndNumber) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DocumentDateAndNumber) ProtoMessage() {}

func (x *DocumentDateAndNumber) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[140]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DocumentDateAndNumber.ProtoReflect.Descriptor instead.
func (*DocumentDateAndNumber) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{140}
}

func (x *DocumentDateAndNumber) GetDocumentDate() string {
	if x != nil && x.DocumentDate != nil {
		return *x.DocumentDate
	}
	return ""
}

func (x *DocumentDateAndNumber) GetDocumentNumber() string {
	if x != nil && x.DocumentNumber != nil {
		return *x.DocumentNumber
	}
	return ""
}

type EncryptedXmlDocumentAttachment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SignedContent          *SignedContent                     `protobuf:"bytes,1,req,name=SignedContent" json:"SignedContent,omitempty"`
	Comment                *string                            `protobuf:"bytes,3,opt,name=Comment" json:"Comment,omitempty"`
	InitialDocumentIds     []*DocumentId                      `protobuf:"bytes,4,rep,name=InitialDocumentIds" json:"InitialDocumentIds,omitempty"`
	SubordinateDocumentIds []*DocumentId                      `protobuf:"bytes,5,rep,name=SubordinateDocumentIds" json:"SubordinateDocumentIds,omitempty"`
	CustomDocumentId       *string                            `protobuf:"bytes,6,opt,name=CustomDocumentId" json:"CustomDocumentId,omitempty"`
	CustomData             []*CustomDataItem                  `protobuf:"bytes,7,rep,name=CustomData" json:"CustomData,omitempty"`
	Metadata               *EncryptedDocumentMetadata         `protobuf:"bytes,8,req,name=Metadata" json:"Metadata,omitempty"`
	XmlBasicMetadata       *EncryptedXmlBasicDocumentMetadata `protobuf:"bytes,9,req,name=XmlBasicMetadata" json:"XmlBasicMetadata,omitempty"`
}

func (x *EncryptedXmlDocumentAttachment) Reset() {
	*x = EncryptedXmlDocumentAttachment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[141]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EncryptedXmlDocumentAttachment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncryptedXmlDocumentAttachment) ProtoMessage() {}

func (x *EncryptedXmlDocumentAttachment) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[141]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncryptedXmlDocumentAttachment.ProtoReflect.Descriptor instead.
func (*EncryptedXmlDocumentAttachment) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{141}
}

func (x *EncryptedXmlDocumentAttachment) GetSignedContent() *SignedContent {
	if x != nil {
		return x.SignedContent
	}
	return nil
}

func (x *EncryptedXmlDocumentAttachment) GetComment() string {
	if x != nil && x.Comment != nil {
		return *x.Comment
	}
	return ""
}

func (x *EncryptedXmlDocumentAttachment) GetInitialDocumentIds() []*DocumentId {
	if x != nil {
		return x.InitialDocumentIds
	}
	return nil
}

func (x *EncryptedXmlDocumentAttachment) GetSubordinateDocumentIds() []*DocumentId {
	if x != nil {
		return x.SubordinateDocumentIds
	}
	return nil
}

func (x *EncryptedXmlDocumentAttachment) GetCustomDocumentId() string {
	if x != nil && x.CustomDocumentId != nil {
		return *x.CustomDocumentId
	}
	return ""
}

func (x *EncryptedXmlDocumentAttachment) GetCustomData() []*CustomDataItem {
	if x != nil {
		return x.CustomData
	}
	return nil
}

func (x *EncryptedXmlDocumentAttachment) GetMetadata() *EncryptedDocumentMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *EncryptedXmlDocumentAttachment) GetXmlBasicMetadata() *EncryptedXmlBasicDocumentMetadata {
	if x != nil {
		return x.XmlBasicMetadata
	}
	return nil
}

type EncryptedXmlBasicDocumentMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FormationDate *string `protobuf:"bytes,1,req,name=FormationDate" json:"FormationDate,omitempty"`
	FormationTime *string `protobuf:"bytes,2,req,name=FormationTime" json:"FormationTime,omitempty"`
	DocumentName  *string `protobuf:"bytes,3,opt,name=DocumentName" json:"DocumentName,omitempty"`
}

func (x *EncryptedXmlBasicDocumentMetadata) Reset() {
	*x = EncryptedXmlBasicDocumentMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[142]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EncryptedXmlBasicDocumentMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncryptedXmlBasicDocumentMetadata) ProtoMessage() {}

func (x *EncryptedXmlBasicDocumentMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[142]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncryptedXmlBasicDocumentMetadata.ProtoReflect.Descriptor instead.
func (*EncryptedXmlBasicDocumentMetadata) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{142}
}

func (x *EncryptedXmlBasicDocumentMetadata) GetFormationDate() string {
	if x != nil && x.FormationDate != nil {
		return *x.FormationDate
	}
	return ""
}

func (x *EncryptedXmlBasicDocumentMetadata) GetFormationTime() string {
	if x != nil && x.FormationTime != nil {
		return *x.FormationTime
	}
	return ""
}

func (x *EncryptedXmlBasicDocumentMetadata) GetDocumentName() string {
	if x != nil && x.DocumentName != nil {
		return *x.DocumentName
	}
	return ""
}

type SupplementaryAgreementAttachment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SignedContent          *SignedContent    `protobuf:"bytes,1,req,name=SignedContent" json:"SignedContent,omitempty"`
	FileName               *string           `protobuf:"bytes,2,req,name=FileName" json:"FileName,omitempty"`
	Comment                *string           `protobuf:"bytes,3,opt,name=Comment" json:"Comment,omitempty"`
	InitialDocumentIds     []*DocumentId     `protobuf:"bytes,4,rep,name=InitialDocumentIds" json:"InitialDocumentIds,omitempty"`
	SubordinateDocumentIds []*DocumentId     `protobuf:"bytes,5,rep,name=SubordinateDocumentIds" json:"SubordinateDocumentIds,omitempty"`
	CustomDocumentId       *string           `protobuf:"bytes,6,opt,name=CustomDocumentId" json:"CustomDocumentId,omitempty"`
	DocumentDate           *string           `protobuf:"bytes,7,req,name=DocumentDate" json:"DocumentDate,omitempty"`
	DocumentNumber         *string           `protobuf:"bytes,8,req,name=DocumentNumber" json:"DocumentNumber,omitempty"`
	Total                  *string           `protobuf:"bytes,9,opt,name=Total" json:"Total,omitempty"`
	ContractNumber         *string           `protobuf:"bytes,10,req,name=ContractNumber" json:"ContractNumber,omitempty"`
	ContractDate           *string           `protobuf:"bytes,11,req,name=ContractDate" json:"ContractDate,omitempty"`
	ContractType           *string           `protobuf:"bytes,12,opt,name=ContractType" json:"ContractType,omitempty"`
	NeedReceipt            *bool             `protobuf:"varint,13,opt,name=NeedReceipt,def=0" json:"NeedReceipt,omitempty"`
	CustomData             []*CustomDataItem `protobuf:"bytes,14,rep,name=CustomData" json:"CustomData,omitempty"`
}

// Default values for SupplementaryAgreementAttachment fields.
const (
	Default_SupplementaryAgreementAttachment_NeedReceipt = bool(false)
)

func (x *SupplementaryAgreementAttachment) Reset() {
	*x = SupplementaryAgreementAttachment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[143]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SupplementaryAgreementAttachment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SupplementaryAgreementAttachment) ProtoMessage() {}

func (x *SupplementaryAgreementAttachment) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[143]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SupplementaryAgreementAttachment.ProtoReflect.Descriptor instead.
func (*SupplementaryAgreementAttachment) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{143}
}

func (x *SupplementaryAgreementAttachment) GetSignedContent() *SignedContent {
	if x != nil {
		return x.SignedContent
	}
	return nil
}

func (x *SupplementaryAgreementAttachment) GetFileName() string {
	if x != nil && x.FileName != nil {
		return *x.FileName
	}
	return ""
}

func (x *SupplementaryAgreementAttachment) GetComment() string {
	if x != nil && x.Comment != nil {
		return *x.Comment
	}
	return ""
}

func (x *SupplementaryAgreementAttachment) GetInitialDocumentIds() []*DocumentId {
	if x != nil {
		return x.InitialDocumentIds
	}
	return nil
}

func (x *SupplementaryAgreementAttachment) GetSubordinateDocumentIds() []*DocumentId {
	if x != nil {
		return x.SubordinateDocumentIds
	}
	return nil
}

func (x *SupplementaryAgreementAttachment) GetCustomDocumentId() string {
	if x != nil && x.CustomDocumentId != nil {
		return *x.CustomDocumentId
	}
	return ""
}

func (x *SupplementaryAgreementAttachment) GetDocumentDate() string {
	if x != nil && x.DocumentDate != nil {
		return *x.DocumentDate
	}
	return ""
}

func (x *SupplementaryAgreementAttachment) GetDocumentNumber() string {
	if x != nil && x.DocumentNumber != nil {
		return *x.DocumentNumber
	}
	return ""
}

func (x *SupplementaryAgreementAttachment) GetTotal() string {
	if x != nil && x.Total != nil {
		return *x.Total
	}
	return ""
}

func (x *SupplementaryAgreementAttachment) GetContractNumber() string {
	if x != nil && x.ContractNumber != nil {
		return *x.ContractNumber
	}
	return ""
}

func (x *SupplementaryAgreementAttachment) GetContractDate() string {
	if x != nil && x.ContractDate != nil {
		return *x.ContractDate
	}
	return ""
}

func (x *SupplementaryAgreementAttachment) GetContractType() string {
	if x != nil && x.ContractType != nil {
		return *x.ContractType
	}
	return ""
}

func (x *SupplementaryAgreementAttachment) GetNeedReceipt() bool {
	if x != nil && x.NeedReceipt != nil {
		return *x.NeedReceipt
	}
	return Default_SupplementaryAgreementAttachment_NeedReceipt
}

func (x *SupplementaryAgreementAttachment) GetCustomData() []*CustomDataItem {
	if x != nil {
		return x.CustomData
	}
	return nil
}

type DocumentAttachment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SignedContent          *SignedContent    `protobuf:"bytes,1,req,name=SignedContent" json:"SignedContent,omitempty"`
	Comment                *string           `protobuf:"bytes,3,opt,name=Comment" json:"Comment,omitempty"`
	NeedRecipientSignature *bool             `protobuf:"varint,4,opt,name=NeedRecipientSignature,def=0" json:"NeedRecipientSignature,omitempty"`
	InitialDocumentIds     []*DocumentId     `protobuf:"bytes,5,rep,name=InitialDocumentIds" json:"InitialDocumentIds,omitempty"`
	SubordinateDocumentIds []*DocumentId     `protobuf:"bytes,6,rep,name=SubordinateDocumentIds" json:"SubordinateDocumentIds,omitempty"`
	CustomDocumentId       *string           `protobuf:"bytes,9,opt,name=CustomDocumentId" json:"CustomDocumentId,omitempty"`
	NeedReceipt            *bool             `protobuf:"varint,10,opt,name=NeedReceipt,def=0" json:"NeedReceipt,omitempty"`
	CustomData             []*CustomDataItem `protobuf:"bytes,11,rep,name=CustomData" json:"CustomData,omitempty"`
	TypeNamedId            *string           `protobuf:"bytes,12,req,name=TypeNamedId" json:"TypeNamedId,omitempty"`
	Function               *string           `protobuf:"bytes,13,opt,name=Function" json:"Function,omitempty"`
	Version                *string           `protobuf:"bytes,14,opt,name=Version" json:"Version,omitempty"`
	Metadata               []*MetadataItem   `protobuf:"bytes,15,rep,name=Metadata" json:"Metadata,omitempty"`
	WorkflowId             *int32            `protobuf:"varint,16,opt,name=WorkflowId" json:"WorkflowId,omitempty"`
	IsEncrypted            *bool             `protobuf:"varint,17,opt,name=IsEncrypted,def=0" json:"IsEncrypted,omitempty"`
	EditingSettingId       *string           `protobuf:"bytes,18,opt,name=EditingSettingId" json:"EditingSettingId,omitempty"`
}

// Default values for DocumentAttachment fields.
const (
	Default_DocumentAttachment_NeedRecipientSignature = bool(false)
	Default_DocumentAttachment_NeedReceipt            = bool(false)
	Default_DocumentAttachment_IsEncrypted            = bool(false)
)

func (x *DocumentAttachment) Reset() {
	*x = DocumentAttachment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[144]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DocumentAttachment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DocumentAttachment) ProtoMessage() {}

func (x *DocumentAttachment) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[144]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DocumentAttachment.ProtoReflect.Descriptor instead.
func (*DocumentAttachment) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{144}
}

func (x *DocumentAttachment) GetSignedContent() *SignedContent {
	if x != nil {
		return x.SignedContent
	}
	return nil
}

func (x *DocumentAttachment) GetComment() string {
	if x != nil && x.Comment != nil {
		return *x.Comment
	}
	return ""
}

func (x *DocumentAttachment) GetNeedRecipientSignature() bool {
	if x != nil && x.NeedRecipientSignature != nil {
		return *x.NeedRecipientSignature
	}
	return Default_DocumentAttachment_NeedRecipientSignature
}

func (x *DocumentAttachment) GetInitialDocumentIds() []*DocumentId {
	if x != nil {
		return x.InitialDocumentIds
	}
	return nil
}

func (x *DocumentAttachment) GetSubordinateDocumentIds() []*DocumentId {
	if x != nil {
		return x.SubordinateDocumentIds
	}
	return nil
}

func (x *DocumentAttachment) GetCustomDocumentId() string {
	if x != nil && x.CustomDocumentId != nil {
		return *x.CustomDocumentId
	}
	return ""
}

func (x *DocumentAttachment) GetNeedReceipt() bool {
	if x != nil && x.NeedReceipt != nil {
		return *x.NeedReceipt
	}
	return Default_DocumentAttachment_NeedReceipt
}

func (x *DocumentAttachment) GetCustomData() []*CustomDataItem {
	if x != nil {
		return x.CustomData
	}
	return nil
}

func (x *DocumentAttachment) GetTypeNamedId() string {
	if x != nil && x.TypeNamedId != nil {
		return *x.TypeNamedId
	}
	return ""
}

func (x *DocumentAttachment) GetFunction() string {
	if x != nil && x.Function != nil {
		return *x.Function
	}
	return ""
}

func (x *DocumentAttachment) GetVersion() string {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return ""
}

func (x *DocumentAttachment) GetMetadata() []*MetadataItem {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *DocumentAttachment) GetWorkflowId() int32 {
	if x != nil && x.WorkflowId != nil {
		return *x.WorkflowId
	}
	return 0
}

func (x *DocumentAttachment) GetIsEncrypted() bool {
	if x != nil && x.IsEncrypted != nil {
		return *x.IsEncrypted
	}
	return Default_DocumentAttachment_IsEncrypted
}

func (x *DocumentAttachment) GetEditingSettingId() string {
	if x != nil && x.EditingSettingId != nil {
		return *x.EditingSettingId
	}
	return ""
}

type MessagePatchToPost struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BoxId                                *string                                          `protobuf:"bytes,1,req,name=BoxId" json:"BoxId,omitempty"`
	MessageId                            *string                                          `protobuf:"bytes,2,req,name=MessageId" json:"MessageId,omitempty"`
	Receipts                             []*ReceiptAttachment                             `protobuf:"bytes,3,rep,name=Receipts" json:"Receipts,omitempty"`
	CorrectionRequests                   []*CorrectionRequestAttachment                   `protobuf:"bytes,4,rep,name=CorrectionRequests" json:"CorrectionRequests,omitempty"`
	Signatures                           []*DocumentSignature                             `protobuf:"bytes,5,rep,name=Signatures" json:"Signatures,omitempty"`
	RequestedSignatureRejections         []*RequestedSignatureRejection                   `protobuf:"bytes,6,rep,name=RequestedSignatureRejections" json:"RequestedSignatureRejections,omitempty"` // Устаревшая структура
	XmlTorg12BuyerTitles                 []*RecipientTitleAttachment                      `protobuf:"bytes,7,rep,name=XmlTorg12BuyerTitles" json:"XmlTorg12BuyerTitles,omitempty"`
	XmlAcceptanceCertificateBuyerTitles  []*RecipientTitleAttachment                      `protobuf:"bytes,8,rep,name=XmlAcceptanceCertificateBuyerTitles" json:"XmlAcceptanceCertificateBuyerTitles,omitempty"`
	Resolutions                          []*ResolutionAttachment                          `protobuf:"bytes,9,rep,name=Resolutions" json:"Resolutions,omitempty"`
	ResolutionRequests                   []*ResolutionRequestAttachment                   `protobuf:"bytes,10,rep,name=ResolutionRequests" json:"ResolutionRequests,omitempty"`
	ResolutionRequestCancellations       []*ResolutionRequestCancellationAttachment       `protobuf:"bytes,11,rep,name=ResolutionRequestCancellations" json:"ResolutionRequestCancellations,omitempty"`
	ResolutionRequestDenials             []*ResolutionRequestDenialAttachment             `protobuf:"bytes,12,rep,name=ResolutionRequestDenials" json:"ResolutionRequestDenials,omitempty"`
	ResolutionRequestDenialCancellations []*ResolutionRequestDenialCancellationAttachment `protobuf:"bytes,13,rep,name=ResolutionRequestDenialCancellations" json:"ResolutionRequestDenialCancellations,omitempty"`
	RevocationRequests                   []*RevocationRequestAttachment                   `protobuf:"bytes,14,rep,name=RevocationRequests" json:"RevocationRequests,omitempty"`
	XmlSignatureRejections               []*XmlSignatureRejectionAttachment               `protobuf:"bytes,15,rep,name=XmlSignatureRejections" json:"XmlSignatureRejections,omitempty"`
	CustomDataPatches                    []*CustomDataPatch                               `protobuf:"bytes,16,rep,name=CustomDataPatches" json:"CustomDataPatches,omitempty"`
	ResolutionRouteAssignments           []*ResolutionRouteAssignment                     `protobuf:"bytes,17,rep,name=ResolutionRouteAssignments" json:"ResolutionRouteAssignments,omitempty"`
	SignatureVerifications               []*SignatureVerification                         `protobuf:"bytes,18,rep,name=SignatureVerifications" json:"SignatureVerifications,omitempty"`
	EditDocumentPacketCommands           []*EditDocumentPacketCommand                     `protobuf:"bytes,19,rep,name=EditDocumentPacketCommands" json:"EditDocumentPacketCommands,omitempty"`
	UniversalTransferDocumentBuyerTitles []*RecipientTitleAttachment                      `protobuf:"bytes,20,rep,name=UniversalTransferDocumentBuyerTitles" json:"UniversalTransferDocumentBuyerTitles,omitempty"`
	ResolutionRouteRemovals              []*ResolutionRouteRemoval                        `protobuf:"bytes,21,rep,name=ResolutionRouteRemovals" json:"ResolutionRouteRemovals,omitempty"`
	RecipientTitles                      []*RecipientTitleAttachment                      `protobuf:"bytes,22,rep,name=RecipientTitles" json:"RecipientTitles,omitempty"`
	EditingPatches                       []*EditingPatch                                  `protobuf:"bytes,24,rep,name=EditingPatches" json:"EditingPatches,omitempty"`
}

func (x *MessagePatchToPost) Reset() {
	*x = MessagePatchToPost{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[145]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessagePatchToPost) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessagePatchToPost) ProtoMessage() {}

func (x *MessagePatchToPost) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[145]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessagePatchToPost.ProtoReflect.Descriptor instead.
func (*MessagePatchToPost) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{145}
}

func (x *MessagePatchToPost) GetBoxId() string {
	if x != nil && x.BoxId != nil {
		return *x.BoxId
	}
	return ""
}

func (x *MessagePatchToPost) GetMessageId() string {
	if x != nil && x.MessageId != nil {
		return *x.MessageId
	}
	return ""
}

func (x *MessagePatchToPost) GetReceipts() []*ReceiptAttachment {
	if x != nil {
		return x.Receipts
	}
	return nil
}

func (x *MessagePatchToPost) GetCorrectionRequests() []*CorrectionRequestAttachment {
	if x != nil {
		return x.CorrectionRequests
	}
	return nil
}

func (x *MessagePatchToPost) GetSignatures() []*DocumentSignature {
	if x != nil {
		return x.Signatures
	}
	return nil
}

func (x *MessagePatchToPost) GetRequestedSignatureRejections() []*RequestedSignatureRejection {
	if x != nil {
		return x.RequestedSignatureRejections
	}
	return nil
}

func (x *MessagePatchToPost) GetXmlTorg12BuyerTitles() []*RecipientTitleAttachment {
	if x != nil {
		return x.XmlTorg12BuyerTitles
	}
	return nil
}

func (x *MessagePatchToPost) GetXmlAcceptanceCertificateBuyerTitles() []*RecipientTitleAttachment {
	if x != nil {
		return x.XmlAcceptanceCertificateBuyerTitles
	}
	return nil
}

func (x *MessagePatchToPost) GetResolutions() []*ResolutionAttachment {
	if x != nil {
		return x.Resolutions
	}
	return nil
}

func (x *MessagePatchToPost) GetResolutionRequests() []*ResolutionRequestAttachment {
	if x != nil {
		return x.ResolutionRequests
	}
	return nil
}

func (x *MessagePatchToPost) GetResolutionRequestCancellations() []*ResolutionRequestCancellationAttachment {
	if x != nil {
		return x.ResolutionRequestCancellations
	}
	return nil
}

func (x *MessagePatchToPost) GetResolutionRequestDenials() []*ResolutionRequestDenialAttachment {
	if x != nil {
		return x.ResolutionRequestDenials
	}
	return nil
}

func (x *MessagePatchToPost) GetResolutionRequestDenialCancellations() []*ResolutionRequestDenialCancellationAttachment {
	if x != nil {
		return x.ResolutionRequestDenialCancellations
	}
	return nil
}

func (x *MessagePatchToPost) GetRevocationRequests() []*RevocationRequestAttachment {
	if x != nil {
		return x.RevocationRequests
	}
	return nil
}

func (x *MessagePatchToPost) GetXmlSignatureRejections() []*XmlSignatureRejectionAttachment {
	if x != nil {
		return x.XmlSignatureRejections
	}
	return nil
}

func (x *MessagePatchToPost) GetCustomDataPatches() []*CustomDataPatch {
	if x != nil {
		return x.CustomDataPatches
	}
	return nil
}

func (x *MessagePatchToPost) GetResolutionRouteAssignments() []*ResolutionRouteAssignment {
	if x != nil {
		return x.ResolutionRouteAssignments
	}
	return nil
}

func (x *MessagePatchToPost) GetSignatureVerifications() []*SignatureVerification {
	if x != nil {
		return x.SignatureVerifications
	}
	return nil
}

func (x *MessagePatchToPost) GetEditDocumentPacketCommands() []*EditDocumentPacketCommand {
	if x != nil {
		return x.EditDocumentPacketCommands
	}
	return nil
}

func (x *MessagePatchToPost) GetUniversalTransferDocumentBuyerTitles() []*RecipientTitleAttachment {
	if x != nil {
		return x.UniversalTransferDocumentBuyerTitles
	}
	return nil
}

func (x *MessagePatchToPost) GetResolutionRouteRemovals() []*ResolutionRouteRemoval {
	if x != nil {
		return x.ResolutionRouteRemovals
	}
	return nil
}

func (x *MessagePatchToPost) GetRecipientTitles() []*RecipientTitleAttachment {
	if x != nil {
		return x.RecipientTitles
	}
	return nil
}

func (x *MessagePatchToPost) GetEditingPatches() []*EditingPatch {
	if x != nil {
		return x.EditingPatches
	}
	return nil
}

type ReceiptAttachment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ParentEntityId *string        `protobuf:"bytes,1,req,name=ParentEntityId" json:"ParentEntityId,omitempty"`
	SignedContent  *SignedContent `protobuf:"bytes,2,req,name=SignedContent" json:"SignedContent,omitempty"`
	Labels         []string       `protobuf:"bytes,4,rep,name=Labels" json:"Labels,omitempty"`
}

func (x *ReceiptAttachment) Reset() {
	*x = ReceiptAttachment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[146]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReceiptAttachment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReceiptAttachment) ProtoMessage() {}

func (x *ReceiptAttachment) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[146]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReceiptAttachment.ProtoReflect.Descriptor instead.
func (*ReceiptAttachment) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{146}
}

func (x *ReceiptAttachment) GetParentEntityId() string {
	if x != nil && x.ParentEntityId != nil {
		return *x.ParentEntityId
	}
	return ""
}

func (x *ReceiptAttachment) GetSignedContent() *SignedContent {
	if x != nil {
		return x.SignedContent
	}
	return nil
}

func (x *ReceiptAttachment) GetLabels() []string {
	if x != nil {
		return x.Labels
	}
	return nil
}

type CorrectionRequestAttachment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ParentEntityId *string        `protobuf:"bytes,1,req,name=ParentEntityId" json:"ParentEntityId,omitempty"`
	SignedContent  *SignedContent `protobuf:"bytes,2,req,name=SignedContent" json:"SignedContent,omitempty"`
	Labels         []string       `protobuf:"bytes,4,rep,name=Labels" json:"Labels,omitempty"`
}

func (x *CorrectionRequestAttachment) Reset() {
	*x = CorrectionRequestAttachment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[147]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CorrectionRequestAttachment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CorrectionRequestAttachment) ProtoMessage() {}

func (x *CorrectionRequestAttachment) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[147]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CorrectionRequestAttachment.ProtoReflect.Descriptor instead.
func (*CorrectionRequestAttachment) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{147}
}

func (x *CorrectionRequestAttachment) GetParentEntityId() string {
	if x != nil && x.ParentEntityId != nil {
		return *x.ParentEntityId
	}
	return ""
}

func (x *CorrectionRequestAttachment) GetSignedContent() *SignedContent {
	if x != nil {
		return x.SignedContent
	}
	return nil
}

func (x *CorrectionRequestAttachment) GetLabels() []string {
	if x != nil {
		return x.Labels
	}
	return nil
}

type RecipientTitleAttachment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ParentEntityId *string        `protobuf:"bytes,1,req,name=ParentEntityId" json:"ParentEntityId,omitempty"`
	SignedContent  *SignedContent `protobuf:"bytes,2,req,name=SignedContent" json:"SignedContent,omitempty"`
	Labels         []string       `protobuf:"bytes,4,rep,name=Labels" json:"Labels,omitempty"`
	NeedReceipt    *bool          `protobuf:"varint,5,req,name=NeedReceipt,def=0" json:"NeedReceipt,omitempty"`
}

// Default values for RecipientTitleAttachment fields.
const (
	Default_RecipientTitleAttachment_NeedReceipt = bool(false)
)

func (x *RecipientTitleAttachment) Reset() {
	*x = RecipientTitleAttachment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[148]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecipientTitleAttachment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecipientTitleAttachment) ProtoMessage() {}

func (x *RecipientTitleAttachment) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[148]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecipientTitleAttachment.ProtoReflect.Descriptor instead.
func (*RecipientTitleAttachment) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{148}
}

func (x *RecipientTitleAttachment) GetParentEntityId() string {
	if x != nil && x.ParentEntityId != nil {
		return *x.ParentEntityId
	}
	return ""
}

func (x *RecipientTitleAttachment) GetSignedContent() *SignedContent {
	if x != nil {
		return x.SignedContent
	}
	return nil
}

func (x *RecipientTitleAttachment) GetLabels() []string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *RecipientTitleAttachment) GetNeedReceipt() bool {
	if x != nil && x.NeedReceipt != nil {
		return *x.NeedReceipt
	}
	return Default_RecipientTitleAttachment_NeedReceipt
}

type RequestedSignatureRejection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ParentEntityId *string        `protobuf:"bytes,1,req,name=ParentEntityId" json:"ParentEntityId,omitempty"`
	SignedContent  *SignedContent `protobuf:"bytes,2,req,name=SignedContent" json:"SignedContent,omitempty"`
	Labels         []string       `protobuf:"bytes,3,rep,name=Labels" json:"Labels,omitempty"`
}

func (x *RequestedSignatureRejection) Reset() {
	*x = RequestedSignatureRejection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[149]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestedSignatureRejection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestedSignatureRejection) ProtoMessage() {}

func (x *RequestedSignatureRejection) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[149]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestedSignatureRejection.ProtoReflect.Descriptor instead.
func (*RequestedSignatureRejection) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{149}
}

func (x *RequestedSignatureRejection) GetParentEntityId() string {
	if x != nil && x.ParentEntityId != nil {
		return *x.ParentEntityId
	}
	return ""
}

func (x *RequestedSignatureRejection) GetSignedContent() *SignedContent {
	if x != nil {
		return x.SignedContent
	}
	return nil
}

func (x *RequestedSignatureRejection) GetLabels() []string {
	if x != nil {
		return x.Labels
	}
	return nil
}

type RevocationRequestAttachment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ParentEntityId *string        `protobuf:"bytes,1,req,name=ParentEntityId" json:"ParentEntityId,omitempty"`
	SignedContent  *SignedContent `protobuf:"bytes,2,req,name=SignedContent" json:"SignedContent,omitempty"`
	Labels         []string       `protobuf:"bytes,3,rep,name=Labels" json:"Labels,omitempty"`
}

func (x *RevocationRequestAttachment) Reset() {
	*x = RevocationRequestAttachment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[150]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RevocationRequestAttachment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RevocationRequestAttachment) ProtoMessage() {}

func (x *RevocationRequestAttachment) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[150]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RevocationRequestAttachment.ProtoReflect.Descriptor instead.
func (*RevocationRequestAttachment) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{150}
}

func (x *RevocationRequestAttachment) GetParentEntityId() string {
	if x != nil && x.ParentEntityId != nil {
		return *x.ParentEntityId
	}
	return ""
}

func (x *RevocationRequestAttachment) GetSignedContent() *SignedContent {
	if x != nil {
		return x.SignedContent
	}
	return nil
}

func (x *RevocationRequestAttachment) GetLabels() []string {
	if x != nil {
		return x.Labels
	}
	return nil
}

type XmlSignatureRejectionAttachment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ParentEntityId *string        `protobuf:"bytes,1,req,name=ParentEntityId" json:"ParentEntityId,omitempty"`
	SignedContent  *SignedContent `protobuf:"bytes,2,req,name=SignedContent" json:"SignedContent,omitempty"`
	Labels         []string       `protobuf:"bytes,3,rep,name=Labels" json:"Labels,omitempty"`
}

func (x *XmlSignatureRejectionAttachment) Reset() {
	*x = XmlSignatureRejectionAttachment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[151]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *XmlSignatureRejectionAttachment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*XmlSignatureRejectionAttachment) ProtoMessage() {}

func (x *XmlSignatureRejectionAttachment) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[151]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use XmlSignatureRejectionAttachment.ProtoReflect.Descriptor instead.
func (*XmlSignatureRejectionAttachment) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{151}
}

func (x *XmlSignatureRejectionAttachment) GetParentEntityId() string {
	if x != nil && x.ParentEntityId != nil {
		return *x.ParentEntityId
	}
	return ""
}

func (x *XmlSignatureRejectionAttachment) GetSignedContent() *SignedContent {
	if x != nil {
		return x.SignedContent
	}
	return nil
}

func (x *XmlSignatureRejectionAttachment) GetLabels() []string {
	if x != nil {
		return x.Labels
	}
	return nil
}

type ResolutionRouteAssignment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InitialDocumentId *string  `protobuf:"bytes,1,req,name=InitialDocumentId" json:"InitialDocumentId,omitempty"`
	RouteId           *string  `protobuf:"bytes,2,req,name=RouteId" json:"RouteId,omitempty"`
	Comment           *string  `protobuf:"bytes,3,opt,name=Comment" json:"Comment,omitempty"`
	Labels            []string `protobuf:"bytes,4,rep,name=Labels" json:"Labels,omitempty"`
}

func (x *ResolutionRouteAssignment) Reset() {
	*x = ResolutionRouteAssignment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[152]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResolutionRouteAssignment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResolutionRouteAssignment) ProtoMessage() {}

func (x *ResolutionRouteAssignment) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[152]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResolutionRouteAssignment.ProtoReflect.Descriptor instead.
func (*ResolutionRouteAssignment) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{152}
}

func (x *ResolutionRouteAssignment) GetInitialDocumentId() string {
	if x != nil && x.InitialDocumentId != nil {
		return *x.InitialDocumentId
	}
	return ""
}

func (x *ResolutionRouteAssignment) GetRouteId() string {
	if x != nil && x.RouteId != nil {
		return *x.RouteId
	}
	return ""
}

func (x *ResolutionRouteAssignment) GetComment() string {
	if x != nil && x.Comment != nil {
		return *x.Comment
	}
	return ""
}

func (x *ResolutionRouteAssignment) GetLabels() []string {
	if x != nil {
		return x.Labels
	}
	return nil
}

type ResolutionRouteRemoval struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ParentEntityId *string  `protobuf:"bytes,1,req,name=ParentEntityId" json:"ParentEntityId,omitempty"`
	RouteId        *string  `protobuf:"bytes,2,req,name=RouteId" json:"RouteId,omitempty"`
	Comment        *string  `protobuf:"bytes,3,opt,name=Comment" json:"Comment,omitempty"`
	Labels         []string `protobuf:"bytes,4,rep,name=Labels" json:"Labels,omitempty"`
}

func (x *ResolutionRouteRemoval) Reset() {
	*x = ResolutionRouteRemoval{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[153]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResolutionRouteRemoval) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResolutionRouteRemoval) ProtoMessage() {}

func (x *ResolutionRouteRemoval) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[153]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResolutionRouteRemoval.ProtoReflect.Descriptor instead.
func (*ResolutionRouteRemoval) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{153}
}

func (x *ResolutionRouteRemoval) GetParentEntityId() string {
	if x != nil && x.ParentEntityId != nil {
		return *x.ParentEntityId
	}
	return ""
}

func (x *ResolutionRouteRemoval) GetRouteId() string {
	if x != nil && x.RouteId != nil {
		return *x.RouteId
	}
	return ""
}

func (x *ResolutionRouteRemoval) GetComment() string {
	if x != nil && x.Comment != nil {
		return *x.Comment
	}
	return ""
}

func (x *ResolutionRouteRemoval) GetLabels() []string {
	if x != nil {
		return x.Labels
	}
	return nil
}

type SignatureVerification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InitialDocumentId *string  `protobuf:"bytes,1,req,name=InitialDocumentId" json:"InitialDocumentId,omitempty"`
	IsValid           *bool    `protobuf:"varint,2,req,name=IsValid" json:"IsValid,omitempty"`
	ErrorMessage      *string  `protobuf:"bytes,3,opt,name=ErrorMessage" json:"ErrorMessage,omitempty"`
	Labels            []string `protobuf:"bytes,4,rep,name=Labels" json:"Labels,omitempty"`
}

func (x *SignatureVerification) Reset() {
	*x = SignatureVerification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[154]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignatureVerification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignatureVerification) ProtoMessage() {}

func (x *SignatureVerification) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[154]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignatureVerification.ProtoReflect.Descriptor instead.
func (*SignatureVerification) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{154}
}

func (x *SignatureVerification) GetInitialDocumentId() string {
	if x != nil && x.InitialDocumentId != nil {
		return *x.InitialDocumentId
	}
	return ""
}

func (x *SignatureVerification) GetIsValid() bool {
	if x != nil && x.IsValid != nil {
		return *x.IsValid
	}
	return false
}

func (x *SignatureVerification) GetErrorMessage() string {
	if x != nil && x.ErrorMessage != nil {
		return *x.ErrorMessage
	}
	return ""
}

func (x *SignatureVerification) GetLabels() []string {
	if x != nil {
		return x.Labels
	}
	return nil
}

type EditDocumentPacketCommand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DocumentId                *string       `protobuf:"bytes,1,req,name=DocumentId" json:"DocumentId,omitempty"`
	AddDocumentsToPacket      []*DocumentId `protobuf:"bytes,2,rep,name=AddDocumentsToPacket" json:"AddDocumentsToPacket,omitempty"`
	RemoveDocumentsFromPacket []*DocumentId `protobuf:"bytes,3,rep,name=RemoveDocumentsFromPacket" json:"RemoveDocumentsFromPacket,omitempty"`
}

func (x *EditDocumentPacketCommand) Reset() {
	*x = EditDocumentPacketCommand{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[155]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EditDocumentPacketCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EditDocumentPacketCommand) ProtoMessage() {}

func (x *EditDocumentPacketCommand) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[155]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EditDocumentPacketCommand.ProtoReflect.Descriptor instead.
func (*EditDocumentPacketCommand) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{155}
}

func (x *EditDocumentPacketCommand) GetDocumentId() string {
	if x != nil && x.DocumentId != nil {
		return *x.DocumentId
	}
	return ""
}

func (x *EditDocumentPacketCommand) GetAddDocumentsToPacket() []*DocumentId {
	if x != nil {
		return x.AddDocumentsToPacket
	}
	return nil
}

func (x *EditDocumentPacketCommand) GetRemoveDocumentsFromPacket() []*DocumentId {
	if x != nil {
		return x.RemoveDocumentsFromPacket
	}
	return nil
}

type EditingPatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ParentEntityId *string          `protobuf:"bytes,1,req,name=ParentEntityId" json:"ParentEntityId,omitempty"`
	Content        *UnsignedContent `protobuf:"bytes,2,req,name=Content" json:"Content,omitempty"`
	Labels         []string         `protobuf:"bytes,3,rep,name=Labels" json:"Labels,omitempty"`
}

func (x *EditingPatch) Reset() {
	*x = EditingPatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[156]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EditingPatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EditingPatch) ProtoMessage() {}

func (x *EditingPatch) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[156]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EditingPatch.ProtoReflect.Descriptor instead.
func (*EditingPatch) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{156}
}

func (x *EditingPatch) GetParentEntityId() string {
	if x != nil && x.ParentEntityId != nil {
		return *x.ParentEntityId
	}
	return ""
}

func (x *EditingPatch) GetContent() *UnsignedContent {
	if x != nil {
		return x.Content
	}
	return nil
}

func (x *EditingPatch) GetLabels() []string {
	if x != nil {
		return x.Labels
	}
	return nil
}

type UnsignedContent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Content     []byte  `protobuf:"bytes,1,opt,name=Content" json:"Content,omitempty"`
	NameOnShelf *string `protobuf:"bytes,2,opt,name=NameOnShelf" json:"NameOnShelf,omitempty"`
}

func (x *UnsignedContent) Reset() {
	*x = UnsignedContent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[157]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnsignedContent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnsignedContent) ProtoMessage() {}

func (x *UnsignedContent) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[157]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnsignedContent.ProtoReflect.Descriptor instead.
func (*UnsignedContent) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{157}
}

func (x *UnsignedContent) GetContent() []byte {
	if x != nil {
		return x.Content
	}
	return nil
}

func (x *UnsignedContent) GetNameOnShelf() string {
	if x != nil && x.NameOnShelf != nil {
		return *x.NameOnShelf
	}
	return ""
}

type DocumentSignature struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ParentEntityId         *string                `protobuf:"bytes,1,req,name=ParentEntityId" json:"ParentEntityId,omitempty"`
	Signature              []byte                 `protobuf:"bytes,2,opt,name=Signature" json:"Signature,omitempty"`
	SignWithTestSignature  *bool                  `protobuf:"varint,4,opt,name=SignWithTestSignature,def=0" json:"SignWithTestSignature,omitempty"`
	IsApprovementSignature *bool                  `protobuf:"varint,5,opt,name=IsApprovementSignature,def=0" json:"IsApprovementSignature,omitempty"`
	SignatureNameOnShelf   *string                `protobuf:"bytes,6,opt,name=SignatureNameOnShelf" json:"SignatureNameOnShelf,omitempty"`
	PatchedContentId       *string                `protobuf:"bytes,7,opt,name=PatchedContentId" json:"PatchedContentId,omitempty"`
	Labels                 []string               `protobuf:"bytes,8,rep,name=Labels" json:"Labels,omitempty"`
	PowerOfAttorney        *PowerOfAttorneyToPost `protobuf:"bytes,9,opt,name=PowerOfAttorney" json:"PowerOfAttorney,omitempty"`
}

// Default values for DocumentSignature fields.
const (
	Default_DocumentSignature_SignWithTestSignature  = bool(false)
	Default_DocumentSignature_IsApprovementSignature = bool(false)
)

func (x *DocumentSignature) Reset() {
	*x = DocumentSignature{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[158]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DocumentSignature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DocumentSignature) ProtoMessage() {}

func (x *DocumentSignature) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[158]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DocumentSignature.ProtoReflect.Descriptor instead.
func (*DocumentSignature) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{158}
}

func (x *DocumentSignature) GetParentEntityId() string {
	if x != nil && x.ParentEntityId != nil {
		return *x.ParentEntityId
	}
	return ""
}

func (x *DocumentSignature) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *DocumentSignature) GetSignWithTestSignature() bool {
	if x != nil && x.SignWithTestSignature != nil {
		return *x.SignWithTestSignature
	}
	return Default_DocumentSignature_SignWithTestSignature
}

func (x *DocumentSignature) GetIsApprovementSignature() bool {
	if x != nil && x.IsApprovementSignature != nil {
		return *x.IsApprovementSignature
	}
	return Default_DocumentSignature_IsApprovementSignature
}

func (x *DocumentSignature) GetSignatureNameOnShelf() string {
	if x != nil && x.SignatureNameOnShelf != nil {
		return *x.SignatureNameOnShelf
	}
	return ""
}

func (x *DocumentSignature) GetPatchedContentId() string {
	if x != nil && x.PatchedContentId != nil {
		return *x.PatchedContentId
	}
	return ""
}

func (x *DocumentSignature) GetLabels() []string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *DocumentSignature) GetPowerOfAttorney() *PowerOfAttorneyToPost {
	if x != nil {
		return x.PowerOfAttorney
	}
	return nil
}

type ResolutionAttachment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InitialDocumentId *string         `protobuf:"bytes,1,req,name=InitialDocumentId" json:"InitialDocumentId,omitempty"`
	ResolutionType    *ResolutionType `protobuf:"varint,2,req,name=ResolutionType,enum=ResolutionType" json:"ResolutionType,omitempty"`
	Comment           *string         `protobuf:"bytes,3,opt,name=Comment" json:"Comment,omitempty"`
	Labels            []string        `protobuf:"bytes,4,rep,name=Labels" json:"Labels,omitempty"`
}

func (x *ResolutionAttachment) Reset() {
	*x = ResolutionAttachment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[159]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResolutionAttachment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResolutionAttachment) ProtoMessage() {}

func (x *ResolutionAttachment) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[159]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResolutionAttachment.ProtoReflect.Descriptor instead.
func (*ResolutionAttachment) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{159}
}

func (x *ResolutionAttachment) GetInitialDocumentId() string {
	if x != nil && x.InitialDocumentId != nil {
		return *x.InitialDocumentId
	}
	return ""
}

func (x *ResolutionAttachment) GetResolutionType() ResolutionType {
	if x != nil && x.ResolutionType != nil {
		return *x.ResolutionType
	}
	return ResolutionType_UndefinedResolutionType
}

func (x *ResolutionAttachment) GetComment() string {
	if x != nil && x.Comment != nil {
		return *x.Comment
	}
	return ""
}

func (x *ResolutionAttachment) GetLabels() []string {
	if x != nil {
		return x.Labels
	}
	return nil
}

type ResolutionRequestAttachment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InitialDocumentId  *string                `protobuf:"bytes,1,req,name=InitialDocumentId" json:"InitialDocumentId,omitempty"`
	Type               *ResolutionRequestType `protobuf:"varint,2,req,name=Type,enum=ResolutionRequestType" json:"Type,omitempty"`
	TargetUserId       *string                `protobuf:"bytes,3,opt,name=TargetUserId" json:"TargetUserId,omitempty"`
	TargetDepartmentId *string                `protobuf:"bytes,4,opt,name=TargetDepartmentId" json:"TargetDepartmentId,omitempty"`
	Comment            *string                `protobuf:"bytes,5,opt,name=Comment" json:"Comment,omitempty"`
	Labels             []string               `protobuf:"bytes,6,rep,name=Labels" json:"Labels,omitempty"`
}

func (x *ResolutionRequestAttachment) Reset() {
	*x = ResolutionRequestAttachment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[160]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResolutionRequestAttachment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResolutionRequestAttachment) ProtoMessage() {}

func (x *ResolutionRequestAttachment) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[160]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResolutionRequestAttachment.ProtoReflect.Descriptor instead.
func (*ResolutionRequestAttachment) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{160}
}

func (x *ResolutionRequestAttachment) GetInitialDocumentId() string {
	if x != nil && x.InitialDocumentId != nil {
		return *x.InitialDocumentId
	}
	return ""
}

func (x *ResolutionRequestAttachment) GetType() ResolutionRequestType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ResolutionRequestType_UnknownResolutionRequestType
}

func (x *ResolutionRequestAttachment) GetTargetUserId() string {
	if x != nil && x.TargetUserId != nil {
		return *x.TargetUserId
	}
	return ""
}

func (x *ResolutionRequestAttachment) GetTargetDepartmentId() string {
	if x != nil && x.TargetDepartmentId != nil {
		return *x.TargetDepartmentId
	}
	return ""
}

func (x *ResolutionRequestAttachment) GetComment() string {
	if x != nil && x.Comment != nil {
		return *x.Comment
	}
	return ""
}

func (x *ResolutionRequestAttachment) GetLabels() []string {
	if x != nil {
		return x.Labels
	}
	return nil
}

type ResolutionRequestCancellationAttachment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InitialResolutionRequestId *string  `protobuf:"bytes,1,req,name=InitialResolutionRequestId" json:"InitialResolutionRequestId,omitempty"`
	Comment                    *string  `protobuf:"bytes,2,opt,name=Comment" json:"Comment,omitempty"`
	Labels                     []string `protobuf:"bytes,3,rep,name=Labels" json:"Labels,omitempty"`
}

func (x *ResolutionRequestCancellationAttachment) Reset() {
	*x = ResolutionRequestCancellationAttachment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[161]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResolutionRequestCancellationAttachment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResolutionRequestCancellationAttachment) ProtoMessage() {}

func (x *ResolutionRequestCancellationAttachment) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[161]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResolutionRequestCancellationAttachment.ProtoReflect.Descriptor instead.
func (*ResolutionRequestCancellationAttachment) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{161}
}

func (x *ResolutionRequestCancellationAttachment) GetInitialResolutionRequestId() string {
	if x != nil && x.InitialResolutionRequestId != nil {
		return *x.InitialResolutionRequestId
	}
	return ""
}

func (x *ResolutionRequestCancellationAttachment) GetComment() string {
	if x != nil && x.Comment != nil {
		return *x.Comment
	}
	return ""
}

func (x *ResolutionRequestCancellationAttachment) GetLabels() []string {
	if x != nil {
		return x.Labels
	}
	return nil
}

type CustomDataPatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ParentEntityId *string                   `protobuf:"bytes,1,req,name=ParentEntityId" json:"ParentEntityId,omitempty"`
	Operation      *CustomDataPatchOperation `protobuf:"varint,2,req,name=Operation,enum=CustomDataPatchOperation" json:"Operation,omitempty"`
	Key            *string                   `protobuf:"bytes,3,req,name=Key" json:"Key,omitempty"`
	Value          *string                   `protobuf:"bytes,4,opt,name=Value" json:"Value,omitempty"`
}

func (x *CustomDataPatch) Reset() {
	*x = CustomDataPatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[162]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomDataPatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomDataPatch) ProtoMessage() {}

func (x *CustomDataPatch) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[162]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomDataPatch.ProtoReflect.Descriptor instead.
func (*CustomDataPatch) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{162}
}

func (x *CustomDataPatch) GetParentEntityId() string {
	if x != nil && x.ParentEntityId != nil {
		return *x.ParentEntityId
	}
	return ""
}

func (x *CustomDataPatch) GetOperation() CustomDataPatchOperation {
	if x != nil && x.Operation != nil {
		return *x.Operation
	}
	return CustomDataPatchOperation_SetOperation
}

func (x *CustomDataPatch) GetKey() string {
	if x != nil && x.Key != nil {
		return *x.Key
	}
	return ""
}

func (x *CustomDataPatch) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

type MessagePatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MessageId                         *string        `protobuf:"bytes,1,req,name=MessageId" json:"MessageId,omitempty"`
	TimestampTicks                    *int64         `protobuf:"fixed64,2,req,name=TimestampTicks" json:"TimestampTicks,omitempty"`
	Entities                          []*Entity      `protobuf:"bytes,3,rep,name=Entities" json:"Entities,omitempty"`
	ForDraft                          *bool          `protobuf:"varint,4,opt,name=ForDraft,def=0" json:"ForDraft,omitempty"`
	DraftIsRecycled                   *bool          `protobuf:"varint,5,opt,name=DraftIsRecycled,def=0" json:"DraftIsRecycled,omitempty"`
	DraftIsTransformedToMessageIdList []string       `protobuf:"bytes,6,rep,name=DraftIsTransformedToMessageIdList" json:"DraftIsTransformedToMessageIdList,omitempty"`
	DraftIsLocked                     *bool          `protobuf:"varint,7,opt,name=DraftIsLocked,def=0" json:"DraftIsLocked,omitempty"`
	MessageIsDeleted                  *bool          `protobuf:"varint,8,opt,name=MessageIsDeleted,def=0" json:"MessageIsDeleted,omitempty"`
	EntityPatches                     []*EntityPatch `protobuf:"bytes,9,rep,name=EntityPatches" json:"EntityPatches,omitempty"`
	MessageIsRestored                 *bool          `protobuf:"varint,10,opt,name=MessageIsRestored,def=0" json:"MessageIsRestored,omitempty"`
	MessageIsDelivered                *bool          `protobuf:"varint,11,opt,name=MessageIsDelivered,def=0" json:"MessageIsDelivered,omitempty"`
	DeliveredPatchId                  *string        `protobuf:"bytes,12,opt,name=DeliveredPatchId" json:"DeliveredPatchId,omitempty"`
	PatchId                           *string        `protobuf:"bytes,13,req,name=PatchId" json:"PatchId,omitempty"`
	NotDeliveredEventId               *string        `protobuf:"bytes,14,opt,name=NotDeliveredEventId" json:"NotDeliveredEventId,omitempty"`
	MessageType                       *MessageType   `protobuf:"varint,15,req,name=MessageType,enum=MessageType" json:"MessageType,omitempty"`
}

// Default values for MessagePatch fields.
const (
	Default_MessagePatch_ForDraft           = bool(false)
	Default_MessagePatch_DraftIsRecycled    = bool(false)
	Default_MessagePatch_DraftIsLocked      = bool(false)
	Default_MessagePatch_MessageIsDeleted   = bool(false)
	Default_MessagePatch_MessageIsRestored  = bool(false)
	Default_MessagePatch_MessageIsDelivered = bool(false)
)

func (x *MessagePatch) Reset() {
	*x = MessagePatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[163]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessagePatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessagePatch) ProtoMessage() {}

func (x *MessagePatch) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[163]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessagePatch.ProtoReflect.Descriptor instead.
func (*MessagePatch) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{163}
}

func (x *MessagePatch) GetMessageId() string {
	if x != nil && x.MessageId != nil {
		return *x.MessageId
	}
	return ""
}

func (x *MessagePatch) GetTimestampTicks() int64 {
	if x != nil && x.TimestampTicks != nil {
		return *x.TimestampTicks
	}
	return 0
}

func (x *MessagePatch) GetEntities() []*Entity {
	if x != nil {
		return x.Entities
	}
	return nil
}

func (x *MessagePatch) GetForDraft() bool {
	if x != nil && x.ForDraft != nil {
		return *x.ForDraft
	}
	return Default_MessagePatch_ForDraft
}

func (x *MessagePatch) GetDraftIsRecycled() bool {
	if x != nil && x.DraftIsRecycled != nil {
		return *x.DraftIsRecycled
	}
	return Default_MessagePatch_DraftIsRecycled
}

func (x *MessagePatch) GetDraftIsTransformedToMessageIdList() []string {
	if x != nil {
		return x.DraftIsTransformedToMessageIdList
	}
	return nil
}

func (x *MessagePatch) GetDraftIsLocked() bool {
	if x != nil && x.DraftIsLocked != nil {
		return *x.DraftIsLocked
	}
	return Default_MessagePatch_DraftIsLocked
}

func (x *MessagePatch) GetMessageIsDeleted() bool {
	if x != nil && x.MessageIsDeleted != nil {
		return *x.MessageIsDeleted
	}
	return Default_MessagePatch_MessageIsDeleted
}

func (x *MessagePatch) GetEntityPatches() []*EntityPatch {
	if x != nil {
		return x.EntityPatches
	}
	return nil
}

func (x *MessagePatch) GetMessageIsRestored() bool {
	if x != nil && x.MessageIsRestored != nil {
		return *x.MessageIsRestored
	}
	return Default_MessagePatch_MessageIsRestored
}

func (x *MessagePatch) GetMessageIsDelivered() bool {
	if x != nil && x.MessageIsDelivered != nil {
		return *x.MessageIsDelivered
	}
	return Default_MessagePatch_MessageIsDelivered
}

func (x *MessagePatch) GetDeliveredPatchId() string {
	if x != nil && x.DeliveredPatchId != nil {
		return *x.DeliveredPatchId
	}
	return ""
}

func (x *MessagePatch) GetPatchId() string {
	if x != nil && x.PatchId != nil {
		return *x.PatchId
	}
	return ""
}

func (x *MessagePatch) GetNotDeliveredEventId() string {
	if x != nil && x.NotDeliveredEventId != nil {
		return *x.NotDeliveredEventId
	}
	return ""
}

func (x *MessagePatch) GetMessageType() MessageType {
	if x != nil && x.MessageType != nil {
		return *x.MessageType
	}
	return MessageType_UnknownMT
}

type EntityPatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EntityId           *string `protobuf:"bytes,1,req,name=EntityId" json:"EntityId,omitempty"`
	DocumentIsDeleted  *bool   `protobuf:"varint,2,opt,name=DocumentIsDeleted,def=0" json:"DocumentIsDeleted,omitempty"`
	MovedToDepartment  *string `protobuf:"bytes,3,opt,name=MovedToDepartment" json:"MovedToDepartment,omitempty"`
	DocumentIsRestored *bool   `protobuf:"varint,4,opt,name=DocumentIsRestored,def=0" json:"DocumentIsRestored,omitempty"`
	ContentIsPatched   *bool   `protobuf:"varint,5,opt,name=ContentIsPatched,def=0" json:"ContentIsPatched,omitempty"`
	ForwardedToBoxId   *string `protobuf:"bytes,6,opt,name=ForwardedToBoxId" json:"ForwardedToBoxId,omitempty"`
}

// Default values for EntityPatch fields.
const (
	Default_EntityPatch_DocumentIsDeleted  = bool(false)
	Default_EntityPatch_DocumentIsRestored = bool(false)
	Default_EntityPatch_ContentIsPatched   = bool(false)
)

func (x *EntityPatch) Reset() {
	*x = EntityPatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[164]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EntityPatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntityPatch) ProtoMessage() {}

func (x *EntityPatch) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[164]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntityPatch.ProtoReflect.Descriptor instead.
func (*EntityPatch) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{164}
}

func (x *EntityPatch) GetEntityId() string {
	if x != nil && x.EntityId != nil {
		return *x.EntityId
	}
	return ""
}

func (x *EntityPatch) GetDocumentIsDeleted() bool {
	if x != nil && x.DocumentIsDeleted != nil {
		return *x.DocumentIsDeleted
	}
	return Default_EntityPatch_DocumentIsDeleted
}

func (x *EntityPatch) GetMovedToDepartment() string {
	if x != nil && x.MovedToDepartment != nil {
		return *x.MovedToDepartment
	}
	return ""
}

func (x *EntityPatch) GetDocumentIsRestored() bool {
	if x != nil && x.DocumentIsRestored != nil {
		return *x.DocumentIsRestored
	}
	return Default_EntityPatch_DocumentIsRestored
}

func (x *EntityPatch) GetContentIsPatched() bool {
	if x != nil && x.ContentIsPatched != nil {
		return *x.ContentIsPatched
	}
	return Default_EntityPatch_ContentIsPatched
}

func (x *EntityPatch) GetForwardedToBoxId() string {
	if x != nil && x.ForwardedToBoxId != nil {
		return *x.ForwardedToBoxId
	}
	return ""
}

type BoxEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId  *string       `protobuf:"bytes,1,req,name=EventId" json:"EventId,omitempty"`
	Message  *Message      `protobuf:"bytes,2,opt,name=Message" json:"Message,omitempty"`
	Patch    *MessagePatch `protobuf:"bytes,3,opt,name=Patch" json:"Patch,omitempty"`
	IndexKey *string       `protobuf:"bytes,4,opt,name=IndexKey" json:"IndexKey,omitempty"`
}

func (x *BoxEvent) Reset() {
	*x = BoxEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[165]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BoxEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BoxEvent) ProtoMessage() {}

func (x *BoxEvent) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[165]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BoxEvent.ProtoReflect.Descriptor instead.
func (*BoxEvent) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{165}
}

func (x *BoxEvent) GetEventId() string {
	if x != nil && x.EventId != nil {
		return *x.EventId
	}
	return ""
}

func (x *BoxEvent) GetMessage() *Message {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *BoxEvent) GetPatch() *MessagePatch {
	if x != nil {
		return x.Patch
	}
	return nil
}

func (x *BoxEvent) GetIndexKey() string {
	if x != nil && x.IndexKey != nil {
		return *x.IndexKey
	}
	return ""
}

type BoxEventList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Events         []*BoxEvent     `protobuf:"bytes,1,rep,name=Events" json:"Events,omitempty"`
	TotalCount     *int32          `protobuf:"varint,2,opt,name=TotalCount" json:"TotalCount,omitempty"`
	TotalCountType *TotalCountType `protobuf:"varint,3,req,name=TotalCountType,enum=TotalCountType" json:"TotalCountType,omitempty"`
}

func (x *BoxEventList) Reset() {
	*x = BoxEventList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[166]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BoxEventList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BoxEventList) ProtoMessage() {}

func (x *BoxEventList) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[166]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BoxEventList.ProtoReflect.Descriptor instead.
func (*BoxEventList) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{166}
}

func (x *BoxEventList) GetEvents() []*BoxEvent {
	if x != nil {
		return x.Events
	}
	return nil
}

func (x *BoxEventList) GetTotalCount() int32 {
	if x != nil && x.TotalCount != nil {
		return *x.TotalCount
	}
	return 0
}

func (x *BoxEventList) GetTotalCountType() TotalCountType {
	if x != nil && x.TotalCountType != nil {
		return *x.TotalCountType
	}
	return TotalCountType_UnknownCountType
}

type GetDocflowBatchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Requests []*GetDocflowRequest `protobuf:"bytes,1,rep,name=Requests" json:"Requests,omitempty"`
}

func (x *GetDocflowBatchRequest) Reset() {
	*x = GetDocflowBatchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[167]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDocflowBatchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDocflowBatchRequest) ProtoMessage() {}

func (x *GetDocflowBatchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[167]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDocflowBatchRequest.ProtoReflect.Descriptor instead.
func (*GetDocflowBatchRequest) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{167}
}

func (x *GetDocflowBatchRequest) GetRequests() []*GetDocflowRequest {
	if x != nil {
		return x.Requests
	}
	return nil
}

type GetDocflowRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DocumentId          *DocumentId `protobuf:"bytes,1,req,name=DocumentId" json:"DocumentId,omitempty"`
	LastEventId         *string     `protobuf:"bytes,2,opt,name=LastEventId" json:"LastEventId,omitempty"`
	InjectEntityContent *bool       `protobuf:"varint,3,opt,name=InjectEntityContent,def=0" json:"InjectEntityContent,omitempty"`
}

// Default values for GetDocflowRequest fields.
const (
	Default_GetDocflowRequest_InjectEntityContent = bool(false)
)

func (x *GetDocflowRequest) Reset() {
	*x = GetDocflowRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[168]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDocflowRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDocflowRequest) ProtoMessage() {}

func (x *GetDocflowRequest) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[168]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDocflowRequest.ProtoReflect.Descriptor instead.
func (*GetDocflowRequest) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{168}
}

func (x *GetDocflowRequest) GetDocumentId() *DocumentId {
	if x != nil {
		return x.DocumentId
	}
	return nil
}

func (x *GetDocflowRequest) GetLastEventId() string {
	if x != nil && x.LastEventId != nil {
		return *x.LastEventId
	}
	return ""
}

func (x *GetDocflowRequest) GetInjectEntityContent() bool {
	if x != nil && x.InjectEntityContent != nil {
		return *x.InjectEntityContent
	}
	return Default_GetDocflowRequest_InjectEntityContent
}

type GetDocflowBatchResponseV3 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Documents []*DocumentWithDocflowV3 `protobuf:"bytes,1,rep,name=Documents" json:"Documents,omitempty"`
}

func (x *GetDocflowBatchResponseV3) Reset() {
	*x = GetDocflowBatchResponseV3{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[169]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDocflowBatchResponseV3) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDocflowBatchResponseV3) ProtoMessage() {}

func (x *GetDocflowBatchResponseV3) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[169]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDocflowBatchResponseV3.ProtoReflect.Descriptor instead.
func (*GetDocflowBatchResponseV3) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{169}
}

func (x *GetDocflowBatchResponseV3) GetDocuments() []*DocumentWithDocflowV3 {
	if x != nil {
		return x.Documents
	}
	return nil
}

type DocumentWithDocflowV3 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DocumentId   *DocumentId     `protobuf:"bytes,1,req,name=DocumentId" json:"DocumentId,omitempty"`
	LastEvent    *LastEvent      `protobuf:"bytes,2,req,name=LastEvent" json:"LastEvent,omitempty"`
	DocumentInfo *DocumentInfoV3 `protobuf:"bytes,3,req,name=DocumentInfo" json:"DocumentInfo,omitempty"`
	Docflow      *DocflowV3      `protobuf:"bytes,4,req,name=Docflow" json:"Docflow,omitempty"`
}

func (x *DocumentWithDocflowV3) Reset() {
	*x = DocumentWithDocflowV3{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[170]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DocumentWithDocflowV3) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DocumentWithDocflowV3) ProtoMessage() {}

func (x *DocumentWithDocflowV3) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[170]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DocumentWithDocflowV3.ProtoReflect.Descriptor instead.
func (*DocumentWithDocflowV3) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{170}
}

func (x *DocumentWithDocflowV3) GetDocumentId() *DocumentId {
	if x != nil {
		return x.DocumentId
	}
	return nil
}

func (x *DocumentWithDocflowV3) GetLastEvent() *LastEvent {
	if x != nil {
		return x.LastEvent
	}
	return nil
}

func (x *DocumentWithDocflowV3) GetDocumentInfo() *DocumentInfoV3 {
	if x != nil {
		return x.DocumentInfo
	}
	return nil
}

func (x *DocumentWithDocflowV3) GetDocflow() *DocflowV3 {
	if x != nil {
		return x.Docflow
	}
	return nil
}

type LastEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId   *string    `protobuf:"bytes,1,req,name=EventId" json:"EventId,omitempty"`
	Timestamp *Timestamp `protobuf:"bytes,2,req,name=Timestamp" json:"Timestamp,omitempty"`
}

func (x *LastEvent) Reset() {
	*x = LastEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[171]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LastEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LastEvent) ProtoMessage() {}

func (x *LastEvent) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[171]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LastEvent.ProtoReflect.Descriptor instead.
func (*LastEvent) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{171}
}

func (x *LastEvent) GetEventId() string {
	if x != nil && x.EventId != nil {
		return *x.EventId
	}
	return ""
}

func (x *LastEvent) GetTimestamp() *Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

type DocumentInfoV3 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FullVersion       *FullVersion          `protobuf:"bytes,1,req,name=FullVersion" json:"FullVersion,omitempty"`
	MessageType       *MessageType          `protobuf:"varint,2,req,name=MessageType,enum=MessageType" json:"MessageType,omitempty"`
	WorkflowId        *int32                `protobuf:"varint,3,req,name=WorkflowId" json:"WorkflowId,omitempty"`
	Participants      *DocumentParticipants `protobuf:"bytes,4,req,name=Participants" json:"Participants,omitempty"`
	DocumentDirection *DocumentDirection    `protobuf:"varint,5,req,name=DocumentDirection,enum=DocumentDirection" json:"DocumentDirection,omitempty"`
	DepartmentId      *string               `protobuf:"bytes,6,req,name=DepartmentId" json:"DepartmentId,omitempty"`
	CustomDocumentId  *string               `protobuf:"bytes,7,opt,name=CustomDocumentId" json:"CustomDocumentId,omitempty"`
	Metadata          []*MetadataItem       `protobuf:"bytes,8,rep,name=Metadata" json:"Metadata,omitempty"`
	CustomData        []*CustomDataItem     `protobuf:"bytes,9,rep,name=CustomData" json:"CustomData,omitempty"`
	DocumentLinks     *DocumentLinks        `protobuf:"bytes,10,req,name=DocumentLinks" json:"DocumentLinks,omitempty"`
	PacketInfo        *PacketInfo           `protobuf:"bytes,11,req,name=PacketInfo" json:"PacketInfo,omitempty"`
	IsRead            *bool                 `protobuf:"varint,12,req,name=IsRead" json:"IsRead,omitempty"`
	IsDeleted         *bool                 `protobuf:"varint,13,req,name=IsDeleted" json:"IsDeleted,omitempty"`
	IsInvitation      *bool                 `protobuf:"varint,14,req,name=IsInvitation" json:"IsInvitation,omitempty"`
	LetterInfo        *DocumentLetterInfo   `protobuf:"bytes,15,opt,name=LetterInfo" json:"LetterInfo,omitempty"`
	DraftInfo         *DocumentDraftInfo    `protobuf:"bytes,16,opt,name=DraftInfo" json:"DraftInfo,omitempty"`
	TemplateInfo      *DocumentTemplateInfo `protobuf:"bytes,17,opt,name=TemplateInfo" json:"TemplateInfo,omitempty"`
	Origin            *Origin               `protobuf:"bytes,18,opt,name=Origin" json:"Origin,omitempty"`
	EditingSettingId  *string               `protobuf:"bytes,19,opt,name=EditingSettingId,def=" json:"EditingSettingId,omitempty"`
}

// Default values for DocumentInfoV3 fields.
const (
	Default_DocumentInfoV3_EditingSettingId = string("")
)

func (x *DocumentInfoV3) Reset() {
	*x = DocumentInfoV3{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[172]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DocumentInfoV3) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DocumentInfoV3) ProtoMessage() {}

func (x *DocumentInfoV3) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[172]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DocumentInfoV3.ProtoReflect.Descriptor instead.
func (*DocumentInfoV3) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{172}
}

func (x *DocumentInfoV3) GetFullVersion() *FullVersion {
	if x != nil {
		return x.FullVersion
	}
	return nil
}

func (x *DocumentInfoV3) GetMessageType() MessageType {
	if x != nil && x.MessageType != nil {
		return *x.MessageType
	}
	return MessageType_UnknownMT
}

func (x *DocumentInfoV3) GetWorkflowId() int32 {
	if x != nil && x.WorkflowId != nil {
		return *x.WorkflowId
	}
	return 0
}

func (x *DocumentInfoV3) GetParticipants() *DocumentParticipants {
	if x != nil {
		return x.Participants
	}
	return nil
}

func (x *DocumentInfoV3) GetDocumentDirection() DocumentDirection {
	if x != nil && x.DocumentDirection != nil {
		return *x.DocumentDirection
	}
	return DocumentDirection_UnknownDocumentDirection
}

func (x *DocumentInfoV3) GetDepartmentId() string {
	if x != nil && x.DepartmentId != nil {
		return *x.DepartmentId
	}
	return ""
}

func (x *DocumentInfoV3) GetCustomDocumentId() string {
	if x != nil && x.CustomDocumentId != nil {
		return *x.CustomDocumentId
	}
	return ""
}

func (x *DocumentInfoV3) GetMetadata() []*MetadataItem {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *DocumentInfoV3) GetCustomData() []*CustomDataItem {
	if x != nil {
		return x.CustomData
	}
	return nil
}

func (x *DocumentInfoV3) GetDocumentLinks() *DocumentLinks {
	if x != nil {
		return x.DocumentLinks
	}
	return nil
}

func (x *DocumentInfoV3) GetPacketInfo() *PacketInfo {
	if x != nil {
		return x.PacketInfo
	}
	return nil
}

func (x *DocumentInfoV3) GetIsRead() bool {
	if x != nil && x.IsRead != nil {
		return *x.IsRead
	}
	return false
}

func (x *DocumentInfoV3) GetIsDeleted() bool {
	if x != nil && x.IsDeleted != nil {
		return *x.IsDeleted
	}
	return false
}

func (x *DocumentInfoV3) GetIsInvitation() bool {
	if x != nil && x.IsInvitation != nil {
		return *x.IsInvitation
	}
	return false
}

func (x *DocumentInfoV3) GetLetterInfo() *DocumentLetterInfo {
	if x != nil {
		return x.LetterInfo
	}
	return nil
}

func (x *DocumentInfoV3) GetDraftInfo() *DocumentDraftInfo {
	if x != nil {
		return x.DraftInfo
	}
	return nil
}

func (x *DocumentInfoV3) GetTemplateInfo() *DocumentTemplateInfo {
	if x != nil {
		return x.TemplateInfo
	}
	return nil
}

func (x *DocumentInfoV3) GetOrigin() *Origin {
	if x != nil {
		return x.Origin
	}
	return nil
}

func (x *DocumentInfoV3) GetEditingSettingId() string {
	if x != nil && x.EditingSettingId != nil {
		return *x.EditingSettingId
	}
	return Default_DocumentInfoV3_EditingSettingId
}

type PacketInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LockMode *LockMode  `protobuf:"varint,1,req,name=LockMode,enum=LockMode" json:"LockMode,omitempty"`
	PacketId *string    `protobuf:"bytes,2,opt,name=PacketId" json:"PacketId,omitempty"` // актуально только для письма
	AddedAt  *Timestamp `protobuf:"bytes,3,opt,name=AddedAt" json:"AddedAt,omitempty"`   // актуально только для письма
}

func (x *PacketInfo) Reset() {
	*x = PacketInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[173]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PacketInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PacketInfo) ProtoMessage() {}

func (x *PacketInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[173]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PacketInfo.ProtoReflect.Descriptor instead.
func (*PacketInfo) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{173}
}

func (x *PacketInfo) GetLockMode() LockMode {
	if x != nil && x.LockMode != nil {
		return *x.LockMode
	}
	return LockMode_None
}

func (x *PacketInfo) GetPacketId() string {
	if x != nil && x.PacketId != nil {
		return *x.PacketId
	}
	return ""
}

func (x *PacketInfo) GetAddedAt() *Timestamp {
	if x != nil {
		return x.AddedAt
	}
	return nil
}

type DocumentLinks struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InitialIds     []*DocumentId `protobuf:"bytes,1,rep,name=InitialIds" json:"InitialIds,omitempty"`
	SubordinateIds []*DocumentId `protobuf:"bytes,2,rep,name=SubordinateIds" json:"SubordinateIds,omitempty"`
}

func (x *DocumentLinks) Reset() {
	*x = DocumentLinks{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[174]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DocumentLinks) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DocumentLinks) ProtoMessage() {}

func (x *DocumentLinks) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[174]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DocumentLinks.ProtoReflect.Descriptor instead.
func (*DocumentLinks) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{174}
}

func (x *DocumentLinks) GetInitialIds() []*DocumentId {
	if x != nil {
		return x.InitialIds
	}
	return nil
}

func (x *DocumentLinks) GetSubordinateIds() []*DocumentId {
	if x != nil {
		return x.SubordinateIds
	}
	return nil
}

type FullVersion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TypeNamedId *string `protobuf:"bytes,1,req,name=TypeNamedId" json:"TypeNamedId,omitempty"`
	Function    *string `protobuf:"bytes,2,req,name=Function" json:"Function,omitempty"`
	Version     *string `protobuf:"bytes,3,req,name=Version" json:"Version,omitempty"`
}

func (x *FullVersion) Reset() {
	*x = FullVersion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[175]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FullVersion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FullVersion) ProtoMessage() {}

func (x *FullVersion) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[175]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FullVersion.ProtoReflect.Descriptor instead.
func (*FullVersion) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{175}
}

func (x *FullVersion) GetTypeNamedId() string {
	if x != nil && x.TypeNamedId != nil {
		return *x.TypeNamedId
	}
	return ""
}

func (x *FullVersion) GetFunction() string {
	if x != nil && x.Function != nil {
		return *x.Function
	}
	return ""
}

func (x *FullVersion) GetVersion() string {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return ""
}

type DocumentLetterInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsEncrypted           *bool                   `protobuf:"varint,1,req,name=IsEncrypted" json:"IsEncrypted,omitempty"`
	ForwardDocumentEvents []*ForwardDocumentEvent `protobuf:"bytes,2,rep,name=ForwardDocumentEvents" json:"ForwardDocumentEvents,omitempty"`
	IsTest                *bool                   `protobuf:"varint,3,req,name=IsTest" json:"IsTest,omitempty"`
}

func (x *DocumentLetterInfo) Reset() {
	*x = DocumentLetterInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[176]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DocumentLetterInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DocumentLetterInfo) ProtoMessage() {}

func (x *DocumentLetterInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[176]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DocumentLetterInfo.ProtoReflect.Descriptor instead.
func (*DocumentLetterInfo) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{176}
}

func (x *DocumentLetterInfo) GetIsEncrypted() bool {
	if x != nil && x.IsEncrypted != nil {
		return *x.IsEncrypted
	}
	return false
}

func (x *DocumentLetterInfo) GetForwardDocumentEvents() []*ForwardDocumentEvent {
	if x != nil {
		return x.ForwardDocumentEvents
	}
	return nil
}

func (x *DocumentLetterInfo) GetIsTest() bool {
	if x != nil && x.IsTest != nil {
		return *x.IsTest
	}
	return false
}

type DocumentDraftInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsRecycled             *bool    `protobuf:"varint,1,req,name=IsRecycled" json:"IsRecycled,omitempty"`
	IsLocked               *bool    `protobuf:"varint,2,req,name=IsLocked" json:"IsLocked,omitempty"`
	TransformedToLetterIds []string `protobuf:"bytes,3,rep,name=TransformedToLetterIds" json:"TransformedToLetterIds,omitempty"`
}

func (x *DocumentDraftInfo) Reset() {
	*x = DocumentDraftInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[177]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DocumentDraftInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DocumentDraftInfo) ProtoMessage() {}

func (x *DocumentDraftInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[177]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DocumentDraftInfo.ProtoReflect.Descriptor instead.
func (*DocumentDraftInfo) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{177}
}

func (x *DocumentDraftInfo) GetIsRecycled() bool {
	if x != nil && x.IsRecycled != nil {
		return *x.IsRecycled
	}
	return false
}

func (x *DocumentDraftInfo) GetIsLocked() bool {
	if x != nil && x.IsLocked != nil {
		return *x.IsLocked
	}
	return false
}

func (x *DocumentDraftInfo) GetTransformedToLetterIds() []string {
	if x != nil {
		return x.TransformedToLetterIds
	}
	return nil
}

type DocumentTemplateInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LetterParticipants          *DocumentParticipants                `protobuf:"bytes,1,req,name=LetterParticipants" json:"LetterParticipants,omitempty"`
	TransformedToLetterIds      []string                             `protobuf:"bytes,2,rep,name=TransformedToLetterIds" json:"TransformedToLetterIds,omitempty"`
	TemplateTransformationInfos []*TemplateTransformationInfoDocflow `protobuf:"bytes,3,rep,name=TemplateTransformationInfos" json:"TemplateTransformationInfos,omitempty"`
	TemplateRefusalInfo         *TemplateRefusalInfoDocflow          `protobuf:"bytes,4,opt,name=TemplateRefusalInfo" json:"TemplateRefusalInfo,omitempty"`
	IsReusable                  *bool                                `protobuf:"varint,5,opt,name=IsReusable,def=0" json:"IsReusable,omitempty"`
}

// Default values for DocumentTemplateInfo fields.
const (
	Default_DocumentTemplateInfo_IsReusable = bool(false)
)

func (x *DocumentTemplateInfo) Reset() {
	*x = DocumentTemplateInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[178]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DocumentTemplateInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DocumentTemplateInfo) ProtoMessage() {}

func (x *DocumentTemplateInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[178]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DocumentTemplateInfo.ProtoReflect.Descriptor instead.
func (*DocumentTemplateInfo) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{178}
}

func (x *DocumentTemplateInfo) GetLetterParticipants() *DocumentParticipants {
	if x != nil {
		return x.LetterParticipants
	}
	return nil
}

func (x *DocumentTemplateInfo) GetTransformedToLetterIds() []string {
	if x != nil {
		return x.TransformedToLetterIds
	}
	return nil
}

func (x *DocumentTemplateInfo) GetTemplateTransformationInfos() []*TemplateTransformationInfoDocflow {
	if x != nil {
		return x.TemplateTransformationInfos
	}
	return nil
}

func (x *DocumentTemplateInfo) GetTemplateRefusalInfo() *TemplateRefusalInfoDocflow {
	if x != nil {
		return x.TemplateRefusalInfo
	}
	return nil
}

func (x *DocumentTemplateInfo) GetIsReusable() bool {
	if x != nil && x.IsReusable != nil {
		return *x.IsReusable
	}
	return Default_DocumentTemplateInfo_IsReusable
}

type DocumentParticipants struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sender     *DocumentParticipant `protobuf:"bytes,1,req,name=Sender" json:"Sender,omitempty"`
	Proxy      *DocumentParticipant `protobuf:"bytes,2,opt,name=Proxy" json:"Proxy,omitempty"`
	Recipient  *DocumentParticipant `protobuf:"bytes,3,opt,name=Recipient" json:"Recipient,omitempty"`
	IsInternal *bool                `protobuf:"varint,4,req,name=IsInternal" json:"IsInternal,omitempty"`
}

func (x *DocumentParticipants) Reset() {
	*x = DocumentParticipants{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[179]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DocumentParticipants) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DocumentParticipants) ProtoMessage() {}

func (x *DocumentParticipants) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[179]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DocumentParticipants.ProtoReflect.Descriptor instead.
func (*DocumentParticipants) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{179}
}

func (x *DocumentParticipants) GetSender() *DocumentParticipant {
	if x != nil {
		return x.Sender
	}
	return nil
}

func (x *DocumentParticipants) GetProxy() *DocumentParticipant {
	if x != nil {
		return x.Proxy
	}
	return nil
}

func (x *DocumentParticipants) GetRecipient() *DocumentParticipant {
	if x != nil {
		return x.Recipient
	}
	return nil
}

func (x *DocumentParticipants) GetIsInternal() bool {
	if x != nil && x.IsInternal != nil {
		return *x.IsInternal
	}
	return false
}

type DocumentParticipant struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BoxId        *string `protobuf:"bytes,1,req,name=BoxId" json:"BoxId,omitempty"`
	DepartmentId *string `protobuf:"bytes,2,opt,name=DepartmentId" json:"DepartmentId,omitempty"`
}

func (x *DocumentParticipant) Reset() {
	*x = DocumentParticipant{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[180]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DocumentParticipant) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DocumentParticipant) ProtoMessage() {}

func (x *DocumentParticipant) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[180]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DocumentParticipant.ProtoReflect.Descriptor instead.
func (*DocumentParticipant) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{180}
}

func (x *DocumentParticipant) GetBoxId() string {
	if x != nil && x.BoxId != nil {
		return *x.BoxId
	}
	return ""
}

func (x *DocumentParticipant) GetDepartmentId() string {
	if x != nil && x.DepartmentId != nil {
		return *x.DepartmentId
	}
	return ""
}

type TemplateTransformationInfoDocflow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransformationId      *string     `protobuf:"bytes,1,req,name=TransformationId" json:"TransformationId,omitempty"`
	TransformedToLetterId *DocumentId `protobuf:"bytes,2,opt,name=TransformedToLetterId" json:"TransformedToLetterId,omitempty"`
	AuthorUserId          *string     `protobuf:"bytes,3,opt,name=AuthorUserId" json:"AuthorUserId,omitempty"`
}

func (x *TemplateTransformationInfoDocflow) Reset() {
	*x = TemplateTransformationInfoDocflow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[181]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TemplateTransformationInfoDocflow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TemplateTransformationInfoDocflow) ProtoMessage() {}

func (x *TemplateTransformationInfoDocflow) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[181]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TemplateTransformationInfoDocflow.ProtoReflect.Descriptor instead.
func (*TemplateTransformationInfoDocflow) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{181}
}

func (x *TemplateTransformationInfoDocflow) GetTransformationId() string {
	if x != nil && x.TransformationId != nil {
		return *x.TransformationId
	}
	return ""
}

func (x *TemplateTransformationInfoDocflow) GetTransformedToLetterId() *DocumentId {
	if x != nil {
		return x.TransformedToLetterId
	}
	return nil
}

func (x *TemplateTransformationInfoDocflow) GetAuthorUserId() string {
	if x != nil && x.AuthorUserId != nil {
		return *x.AuthorUserId
	}
	return ""
}

type TemplateRefusalInfoDocflow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BoxId        *string `protobuf:"bytes,1,req,name=BoxId" json:"BoxId,omitempty"`
	AuthorUserId *string `protobuf:"bytes,2,opt,name=AuthorUserId" json:"AuthorUserId,omitempty"`
	AuthorName   *string `protobuf:"bytes,3,opt,name=AuthorName" json:"AuthorName,omitempty"`
	Comment      *string `protobuf:"bytes,4,opt,name=Comment" json:"Comment,omitempty"`
}

func (x *TemplateRefusalInfoDocflow) Reset() {
	*x = TemplateRefusalInfoDocflow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[182]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TemplateRefusalInfoDocflow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TemplateRefusalInfoDocflow) ProtoMessage() {}

func (x *TemplateRefusalInfoDocflow) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[182]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TemplateRefusalInfoDocflow.ProtoReflect.Descriptor instead.
func (*TemplateRefusalInfoDocflow) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{182}
}

func (x *TemplateRefusalInfoDocflow) GetBoxId() string {
	if x != nil && x.BoxId != nil {
		return *x.BoxId
	}
	return ""
}

func (x *TemplateRefusalInfoDocflow) GetAuthorUserId() string {
	if x != nil && x.AuthorUserId != nil {
		return *x.AuthorUserId
	}
	return ""
}

func (x *TemplateRefusalInfoDocflow) GetAuthorName() string {
	if x != nil && x.AuthorName != nil {
		return *x.AuthorName
	}
	return ""
}

func (x *TemplateRefusalInfoDocflow) GetComment() string {
	if x != nil && x.Comment != nil {
		return *x.Comment
	}
	return ""
}

type DocflowV3 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SenderTitle          *SenderTitleDocflow         `protobuf:"bytes,1,req,name=SenderTitle" json:"SenderTitle,omitempty"`
	Confirmation         *ConfirmationDocflow        `protobuf:"bytes,2,opt,name=Confirmation" json:"Confirmation,omitempty"`
	ProxyResponse        *ParticipantResponseDocflow `protobuf:"bytes,11,opt,name=ProxyResponse" json:"ProxyResponse,omitempty"`
	RecipientReceipt     *ReceiptDocflowV3           `protobuf:"bytes,4,opt,name=RecipientReceipt" json:"RecipientReceipt,omitempty"`
	RecipientResponse    *ParticipantResponseDocflow `protobuf:"bytes,5,opt,name=RecipientResponse" json:"RecipientResponse,omitempty"`
	AmendmentRequest     *AmendmentRequestDocflow    `protobuf:"bytes,6,opt,name=AmendmentRequest" json:"AmendmentRequest,omitempty"`
	Revocation           *RevocationDocflowV3        `protobuf:"bytes,7,opt,name=Revocation" json:"Revocation,omitempty"`
	SenderReceipt        *ReceiptDocflowV3           `protobuf:"bytes,8,opt,name=SenderReceipt" json:"SenderReceipt,omitempty"`
	Resolution           *ResolutionDocflowV3        `protobuf:"bytes,9,opt,name=Resolution" json:"Resolution,omitempty"`
	ResolutionEntities   *ResolutionEntitiesV3       `protobuf:"bytes,10,opt,name=ResolutionEntities" json:"ResolutionEntities,omitempty"`
	OuterDocflows        []*OuterDocflow             `protobuf:"bytes,12,rep,name=OuterDocflows" json:"OuterDocflows,omitempty"`
	OuterDocflowEntities []*OuterDocflowEntities     `protobuf:"bytes,13,rep,name=OuterDocflowEntities" json:"OuterDocflowEntities,omitempty"`
	DocflowStatus        *DocflowStatusV3            `protobuf:"bytes,14,req,name=DocflowStatus" json:"DocflowStatus,omitempty"`
}

func (x *DocflowV3) Reset() {
	*x = DocflowV3{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[183]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DocflowV3) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DocflowV3) ProtoMessage() {}

func (x *DocflowV3) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[183]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DocflowV3.ProtoReflect.Descriptor instead.
func (*DocflowV3) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{183}
}

func (x *DocflowV3) GetSenderTitle() *SenderTitleDocflow {
	if x != nil {
		return x.SenderTitle
	}
	return nil
}

func (x *DocflowV3) GetConfirmation() *ConfirmationDocflow {
	if x != nil {
		return x.Confirmation
	}
	return nil
}

func (x *DocflowV3) GetProxyResponse() *ParticipantResponseDocflow {
	if x != nil {
		return x.ProxyResponse
	}
	return nil
}

func (x *DocflowV3) GetRecipientReceipt() *ReceiptDocflowV3 {
	if x != nil {
		return x.RecipientReceipt
	}
	return nil
}

func (x *DocflowV3) GetRecipientResponse() *ParticipantResponseDocflow {
	if x != nil {
		return x.RecipientResponse
	}
	return nil
}

func (x *DocflowV3) GetAmendmentRequest() *AmendmentRequestDocflow {
	if x != nil {
		return x.AmendmentRequest
	}
	return nil
}

func (x *DocflowV3) GetRevocation() *RevocationDocflowV3 {
	if x != nil {
		return x.Revocation
	}
	return nil
}

func (x *DocflowV3) GetSenderReceipt() *ReceiptDocflowV3 {
	if x != nil {
		return x.SenderReceipt
	}
	return nil
}

func (x *DocflowV3) GetResolution() *ResolutionDocflowV3 {
	if x != nil {
		return x.Resolution
	}
	return nil
}

func (x *DocflowV3) GetResolutionEntities() *ResolutionEntitiesV3 {
	if x != nil {
		return x.ResolutionEntities
	}
	return nil
}

func (x *DocflowV3) GetOuterDocflows() []*OuterDocflow {
	if x != nil {
		return x.OuterDocflows
	}
	return nil
}

func (x *DocflowV3) GetOuterDocflowEntities() []*OuterDocflowEntities {
	if x != nil {
		return x.OuterDocflowEntities
	}
	return nil
}

func (x *DocflowV3) GetDocflowStatus() *DocflowStatusV3 {
	if x != nil {
		return x.DocflowStatus
	}
	return nil
}

type ResolutionDocflowV3 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsFinished         *bool             `protobuf:"varint,1,req,name=IsFinished" json:"IsFinished,omitempty"`
	ParentEntityId     *string           `protobuf:"bytes,2,req,name=ParentEntityId" json:"ParentEntityId,omitempty"`
	ResolutionStatus   *ResolutionStatus `protobuf:"bytes,3,req,name=ResolutionStatus" json:"ResolutionStatus,omitempty"`
	ResolutionEntityId *string           `protobuf:"bytes,4,opt,name=ResolutionEntityId" json:"ResolutionEntityId,omitempty"`
}

func (x *ResolutionDocflowV3) Reset() {
	*x = ResolutionDocflowV3{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[184]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResolutionDocflowV3) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResolutionDocflowV3) ProtoMessage() {}

func (x *ResolutionDocflowV3) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[184]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResolutionDocflowV3.ProtoReflect.Descriptor instead.
func (*ResolutionDocflowV3) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{184}
}

func (x *ResolutionDocflowV3) GetIsFinished() bool {
	if x != nil && x.IsFinished != nil {
		return *x.IsFinished
	}
	return false
}

func (x *ResolutionDocflowV3) GetParentEntityId() string {
	if x != nil && x.ParentEntityId != nil {
		return *x.ParentEntityId
	}
	return ""
}

func (x *ResolutionDocflowV3) GetResolutionStatus() *ResolutionStatus {
	if x != nil {
		return x.ResolutionStatus
	}
	return nil
}

func (x *ResolutionDocflowV3) GetResolutionEntityId() string {
	if x != nil && x.ResolutionEntityId != nil {
		return *x.ResolutionEntityId
	}
	return ""
}

type OuterDocflow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DocflowNamedId       *string `protobuf:"bytes,1,req,name=DocflowNamedId" json:"DocflowNamedId,omitempty"`
	ParentEntityId       *string `protobuf:"bytes,2,req,name=ParentEntityId" json:"ParentEntityId,omitempty"`
	OuterDocflowEntityId *string `protobuf:"bytes,3,req,name=OuterDocflowEntityId" json:"OuterDocflowEntityId,omitempty"`
}

func (x *OuterDocflow) Reset() {
	*x = OuterDocflow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[185]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OuterDocflow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OuterDocflow) ProtoMessage() {}

func (x *OuterDocflow) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[185]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OuterDocflow.ProtoReflect.Descriptor instead.
func (*OuterDocflow) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{185}
}

func (x *OuterDocflow) GetDocflowNamedId() string {
	if x != nil && x.DocflowNamedId != nil {
		return *x.DocflowNamedId
	}
	return ""
}

func (x *OuterDocflow) GetParentEntityId() string {
	if x != nil && x.ParentEntityId != nil {
		return *x.ParentEntityId
	}
	return ""
}

func (x *OuterDocflow) GetOuterDocflowEntityId() string {
	if x != nil && x.OuterDocflowEntityId != nil {
		return *x.OuterDocflowEntityId
	}
	return ""
}

type RevocationDocflowV3 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsFinished           *bool                      `protobuf:"varint,1,req,name=IsFinished" json:"IsFinished,omitempty"`
	RevocationRequest    *RevocationRequestDocflow  `protobuf:"bytes,2,req,name=RevocationRequest" json:"RevocationRequest,omitempty"`
	RevocationResponse   *RevocationResponseDocflow `protobuf:"bytes,3,opt,name=RevocationResponse" json:"RevocationResponse,omitempty"`
	InitiatorBoxId       *string                    `protobuf:"bytes,4,req,name=InitiatorBoxId" json:"InitiatorBoxId,omitempty"`
	RevocationStatus     *RevocationStatus          `protobuf:"varint,5,req,name=RevocationStatus,enum=RevocationStatus" json:"RevocationStatus,omitempty"`
	ResolutionEntities   *ResolutionEntitiesV3      `protobuf:"bytes,6,opt,name=ResolutionEntities" json:"ResolutionEntities,omitempty"`
	OuterDocflowEntities []*OuterDocflowEntities    `protobuf:"bytes,7,rep,name=OuterDocflowEntities" json:"OuterDocflowEntities,omitempty"`
}

func (x *RevocationDocflowV3) Reset() {
	*x = RevocationDocflowV3{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[186]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RevocationDocflowV3) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RevocationDocflowV3) ProtoMessage() {}

func (x *RevocationDocflowV3) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[186]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RevocationDocflowV3.ProtoReflect.Descriptor instead.
func (*RevocationDocflowV3) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{186}
}

func (x *RevocationDocflowV3) GetIsFinished() bool {
	if x != nil && x.IsFinished != nil {
		return *x.IsFinished
	}
	return false
}

func (x *RevocationDocflowV3) GetRevocationRequest() *RevocationRequestDocflow {
	if x != nil {
		return x.RevocationRequest
	}
	return nil
}

func (x *RevocationDocflowV3) GetRevocationResponse() *RevocationResponseDocflow {
	if x != nil {
		return x.RevocationResponse
	}
	return nil
}

func (x *RevocationDocflowV3) GetInitiatorBoxId() string {
	if x != nil && x.InitiatorBoxId != nil {
		return *x.InitiatorBoxId
	}
	return ""
}

func (x *RevocationDocflowV3) GetRevocationStatus() RevocationStatus {
	if x != nil && x.RevocationStatus != nil {
		return *x.RevocationStatus
	}
	return RevocationStatus_UnknownRevocationStatus
}

func (x *RevocationDocflowV3) GetResolutionEntities() *ResolutionEntitiesV3 {
	if x != nil {
		return x.ResolutionEntities
	}
	return nil
}

func (x *RevocationDocflowV3) GetOuterDocflowEntities() []*OuterDocflowEntities {
	if x != nil {
		return x.OuterDocflowEntities
	}
	return nil
}

type OuterDocflowEntities struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DocflowNamedId      *string         `protobuf:"bytes,1,req,name=DocflowNamedId" json:"DocflowNamedId,omitempty"`
	DocflowFriendlyName *string         `protobuf:"bytes,2,req,name=DocflowFriendlyName" json:"DocflowFriendlyName,omitempty"`
	StatusEntities      []*StatusEntity `protobuf:"bytes,3,rep,name=StatusEntities" json:"StatusEntities,omitempty"`
}

func (x *OuterDocflowEntities) Reset() {
	*x = OuterDocflowEntities{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[187]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OuterDocflowEntities) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OuterDocflowEntities) ProtoMessage() {}

func (x *OuterDocflowEntities) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[187]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OuterDocflowEntities.ProtoReflect.Descriptor instead.
func (*OuterDocflowEntities) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{187}
}

func (x *OuterDocflowEntities) GetDocflowNamedId() string {
	if x != nil && x.DocflowNamedId != nil {
		return *x.DocflowNamedId
	}
	return ""
}

func (x *OuterDocflowEntities) GetDocflowFriendlyName() string {
	if x != nil && x.DocflowFriendlyName != nil {
		return *x.DocflowFriendlyName
	}
	return ""
}

func (x *OuterDocflowEntities) GetStatusEntities() []*StatusEntity {
	if x != nil {
		return x.StatusEntities
	}
	return nil
}

type StatusEntity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Attachment *SignedAttachmentV3 `protobuf:"bytes,1,req,name=Attachment" json:"Attachment,omitempty"`
	Status     *Status             `protobuf:"bytes,2,req,name=Status" json:"Status,omitempty"`
}

func (x *StatusEntity) Reset() {
	*x = StatusEntity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[188]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatusEntity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusEntity) ProtoMessage() {}

func (x *StatusEntity) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[188]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusEntity.ProtoReflect.Descriptor instead.
func (*StatusEntity) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{188}
}

func (x *StatusEntity) GetAttachment() *SignedAttachmentV3 {
	if x != nil {
		return x.Attachment
	}
	return nil
}

func (x *StatusEntity) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

type ResolutionEntitiesV3 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Requests              []*ResolutionRequestV3    `protobuf:"bytes,1,rep,name=Requests" json:"Requests,omitempty"`
	Resolutions           []*ResolutionV3           `protobuf:"bytes,2,rep,name=Resolutions" json:"Resolutions,omitempty"`
	ApprovementSignatures []*ApprovementSignatureV3 `protobuf:"bytes,3,rep,name=ApprovementSignatures" json:"ApprovementSignatures,omitempty"`
	SignatureDenials      []*SignatureDenialV3      `protobuf:"bytes,4,rep,name=SignatureDenials" json:"SignatureDenials,omitempty"`
}

func (x *ResolutionEntitiesV3) Reset() {
	*x = ResolutionEntitiesV3{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[189]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResolutionEntitiesV3) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResolutionEntitiesV3) ProtoMessage() {}

func (x *ResolutionEntitiesV3) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[189]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResolutionEntitiesV3.ProtoReflect.Descriptor instead.
func (*ResolutionEntitiesV3) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{189}
}

func (x *ResolutionEntitiesV3) GetRequests() []*ResolutionRequestV3 {
	if x != nil {
		return x.Requests
	}
	return nil
}

func (x *ResolutionEntitiesV3) GetResolutions() []*ResolutionV3 {
	if x != nil {
		return x.Resolutions
	}
	return nil
}

func (x *ResolutionEntitiesV3) GetApprovementSignatures() []*ApprovementSignatureV3 {
	if x != nil {
		return x.ApprovementSignatures
	}
	return nil
}

func (x *ResolutionEntitiesV3) GetSignatureDenials() []*SignatureDenialV3 {
	if x != nil {
		return x.SignatureDenials
	}
	return nil
}

type ResolutionRequestV3 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Entity       *Entity                `protobuf:"bytes,1,req,name=Entity" json:"Entity,omitempty"`
	Target       *ResolutionTarget      `protobuf:"bytes,2,req,name=Target" json:"Target,omitempty"`
	AuthorUserId *string                `protobuf:"bytes,3,opt,name=AuthorUserId" json:"AuthorUserId,omitempty"`
	RequestType  *ResolutionRequestType `protobuf:"varint,4,req,name=RequestType,enum=ResolutionRequestType" json:"RequestType,omitempty"`
	ResolvedWith *string                `protobuf:"bytes,5,opt,name=ResolvedWith" json:"ResolvedWith,omitempty"`
	Actions      []ResolutionAction     `protobuf:"varint,6,rep,name=Actions,enum=ResolutionAction" json:"Actions,omitempty"`
}

func (x *ResolutionRequestV3) Reset() {
	*x = ResolutionRequestV3{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[190]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResolutionRequestV3) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResolutionRequestV3) ProtoMessage() {}

func (x *ResolutionRequestV3) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[190]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResolutionRequestV3.ProtoReflect.Descriptor instead.
func (*ResolutionRequestV3) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{190}
}

func (x *ResolutionRequestV3) GetEntity() *Entity {
	if x != nil {
		return x.Entity
	}
	return nil
}

func (x *ResolutionRequestV3) GetTarget() *ResolutionTarget {
	if x != nil {
		return x.Target
	}
	return nil
}

func (x *ResolutionRequestV3) GetAuthorUserId() string {
	if x != nil && x.AuthorUserId != nil {
		return *x.AuthorUserId
	}
	return ""
}

func (x *ResolutionRequestV3) GetRequestType() ResolutionRequestType {
	if x != nil && x.RequestType != nil {
		return *x.RequestType
	}
	return ResolutionRequestType_UnknownResolutionRequestType
}

func (x *ResolutionRequestV3) GetResolvedWith() string {
	if x != nil && x.ResolvedWith != nil {
		return *x.ResolvedWith
	}
	return ""
}

func (x *ResolutionRequestV3) GetActions() []ResolutionAction {
	if x != nil {
		return x.Actions
	}
	return nil
}

type ApprovementSignatureV3 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Signature           *SignatureV3 `protobuf:"bytes,1,req,name=Signature" json:"Signature,omitempty"`
	ResolutionRequestId *string      `protobuf:"bytes,2,opt,name=ResolutionRequestId" json:"ResolutionRequestId,omitempty"`
	AuthorUserId        *string      `protobuf:"bytes,3,opt,name=AuthorUserId" json:"AuthorUserId,omitempty"`
}

func (x *ApprovementSignatureV3) Reset() {
	*x = ApprovementSignatureV3{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[191]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApprovementSignatureV3) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApprovementSignatureV3) ProtoMessage() {}

func (x *ApprovementSignatureV3) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[191]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApprovementSignatureV3.ProtoReflect.Descriptor instead.
func (*ApprovementSignatureV3) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{191}
}

func (x *ApprovementSignatureV3) GetSignature() *SignatureV3 {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *ApprovementSignatureV3) GetResolutionRequestId() string {
	if x != nil && x.ResolutionRequestId != nil {
		return *x.ResolutionRequestId
	}
	return ""
}

func (x *ApprovementSignatureV3) GetAuthorUserId() string {
	if x != nil && x.AuthorUserId != nil {
		return *x.AuthorUserId
	}
	return ""
}

type SignatureDenialV3 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Entity              *Entity `protobuf:"bytes,1,req,name=Entity" json:"Entity,omitempty"`
	ResolutionRequestId *string `protobuf:"bytes,2,req,name=ResolutionRequestId" json:"ResolutionRequestId,omitempty"`
	AuthorUserId        *string `protobuf:"bytes,3,opt,name=AuthorUserId" json:"AuthorUserId,omitempty"`
}

func (x *SignatureDenialV3) Reset() {
	*x = SignatureDenialV3{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[192]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignatureDenialV3) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignatureDenialV3) ProtoMessage() {}

func (x *SignatureDenialV3) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[192]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignatureDenialV3.ProtoReflect.Descriptor instead.
func (*SignatureDenialV3) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{192}
}

func (x *SignatureDenialV3) GetEntity() *Entity {
	if x != nil {
		return x.Entity
	}
	return nil
}

func (x *SignatureDenialV3) GetResolutionRequestId() string {
	if x != nil && x.ResolutionRequestId != nil {
		return *x.ResolutionRequestId
	}
	return ""
}

func (x *SignatureDenialV3) GetAuthorUserId() string {
	if x != nil && x.AuthorUserId != nil {
		return *x.AuthorUserId
	}
	return ""
}

type ResolutionV3 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Entity              *Entity         `protobuf:"bytes,1,req,name=Entity" json:"Entity,omitempty"`
	ResolutionRequestId *string         `protobuf:"bytes,2,opt,name=ResolutionRequestId" json:"ResolutionRequestId,omitempty"`
	AuthorUserId        *string         `protobuf:"bytes,3,opt,name=AuthorUserId" json:"AuthorUserId,omitempty"`
	ResolutionType      *ResolutionType `protobuf:"varint,4,req,name=ResolutionType,enum=ResolutionType" json:"ResolutionType,omitempty"`
}

func (x *ResolutionV3) Reset() {
	*x = ResolutionV3{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[193]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResolutionV3) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResolutionV3) ProtoMessage() {}

func (x *ResolutionV3) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[193]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResolutionV3.ProtoReflect.Descriptor instead.
func (*ResolutionV3) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{193}
}

func (x *ResolutionV3) GetEntity() *Entity {
	if x != nil {
		return x.Entity
	}
	return nil
}

func (x *ResolutionV3) GetResolutionRequestId() string {
	if x != nil && x.ResolutionRequestId != nil {
		return *x.ResolutionRequestId
	}
	return ""
}

func (x *ResolutionV3) GetAuthorUserId() string {
	if x != nil && x.AuthorUserId != nil {
		return *x.AuthorUserId
	}
	return ""
}

func (x *ResolutionV3) GetResolutionType() ResolutionType {
	if x != nil && x.ResolutionType != nil {
		return *x.ResolutionType
	}
	return ResolutionType_UndefinedResolutionType
}

type RevocationRequestDocflow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RevocationRequest   *SignedAttachmentV3  `protobuf:"bytes,1,req,name=RevocationRequest" json:"RevocationRequest,omitempty"`
	SentAt              *Timestamp           `protobuf:"bytes,2,opt,name=SentAt" json:"SentAt,omitempty"`
	DeliveredAt         *Timestamp           `protobuf:"bytes,3,opt,name=DeliveredAt" json:"DeliveredAt,omitempty"`
	RoamingNotification *RoamingNotification `protobuf:"bytes,4,opt,name=RoamingNotification" json:"RoamingNotification,omitempty"`
	PlainText           *string              `protobuf:"bytes,5,opt,name=PlainText" json:"PlainText,omitempty"`
}

func (x *RevocationRequestDocflow) Reset() {
	*x = RevocationRequestDocflow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[194]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RevocationRequestDocflow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RevocationRequestDocflow) ProtoMessage() {}

func (x *RevocationRequestDocflow) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[194]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RevocationRequestDocflow.ProtoReflect.Descriptor instead.
func (*RevocationRequestDocflow) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{194}
}

func (x *RevocationRequestDocflow) GetRevocationRequest() *SignedAttachmentV3 {
	if x != nil {
		return x.RevocationRequest
	}
	return nil
}

func (x *RevocationRequestDocflow) GetSentAt() *Timestamp {
	if x != nil {
		return x.SentAt
	}
	return nil
}

func (x *RevocationRequestDocflow) GetDeliveredAt() *Timestamp {
	if x != nil {
		return x.DeliveredAt
	}
	return nil
}

func (x *RevocationRequestDocflow) GetRoamingNotification() *RoamingNotification {
	if x != nil {
		return x.RoamingNotification
	}
	return nil
}

func (x *RevocationRequestDocflow) GetPlainText() string {
	if x != nil && x.PlainText != nil {
		return *x.PlainText
	}
	return ""
}

type RevocationResponseDocflow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecipientSignature *SignatureV3               `protobuf:"bytes,1,opt,name=RecipientSignature" json:"RecipientSignature,omitempty"`
	SignatureRejection *SignatureRejectionDocflow `protobuf:"bytes,2,opt,name=SignatureRejection" json:"SignatureRejection,omitempty"`
}

func (x *RevocationResponseDocflow) Reset() {
	*x = RevocationResponseDocflow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[195]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RevocationResponseDocflow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RevocationResponseDocflow) ProtoMessage() {}

func (x *RevocationResponseDocflow) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[195]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RevocationResponseDocflow.ProtoReflect.Descriptor instead.
func (*RevocationResponseDocflow) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{195}
}

func (x *RevocationResponseDocflow) GetRecipientSignature() *SignatureV3 {
	if x != nil {
		return x.RecipientSignature
	}
	return nil
}

func (x *RevocationResponseDocflow) GetSignatureRejection() *SignatureRejectionDocflow {
	if x != nil {
		return x.SignatureRejection
	}
	return nil
}

type AmendmentRequestDocflow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsFinished          *bool                `protobuf:"varint,1,req,name=IsFinished" json:"IsFinished,omitempty"`
	AmendmentRequest    *SignedAttachmentV3  `protobuf:"bytes,2,opt,name=AmendmentRequest" json:"AmendmentRequest,omitempty"`
	SentAt              *Timestamp           `protobuf:"bytes,3,opt,name=SentAt" json:"SentAt,omitempty"`
	DeliveredAt         *Timestamp           `protobuf:"bytes,4,opt,name=DeliveredAt" json:"DeliveredAt,omitempty"`
	Receipt             *ReceiptDocflowV3    `protobuf:"bytes,5,opt,name=Receipt" json:"Receipt,omitempty"`
	AmendmentFlags      *int32               `protobuf:"varint,6,req,name=AmendmentFlags" json:"AmendmentFlags,omitempty"`
	PlainText           *string              `protobuf:"bytes,7,opt,name=PlainText" json:"PlainText,omitempty"`
	ConfirmationDocflow *ConfirmationDocflow `protobuf:"bytes,8,opt,name=ConfirmationDocflow" json:"ConfirmationDocflow,omitempty"`
}

func (x *AmendmentRequestDocflow) Reset() {
	*x = AmendmentRequestDocflow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[196]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AmendmentRequestDocflow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AmendmentRequestDocflow) ProtoMessage() {}

func (x *AmendmentRequestDocflow) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[196]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AmendmentRequestDocflow.ProtoReflect.Descriptor instead.
func (*AmendmentRequestDocflow) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{196}
}

func (x *AmendmentRequestDocflow) GetIsFinished() bool {
	if x != nil && x.IsFinished != nil {
		return *x.IsFinished
	}
	return false
}

func (x *AmendmentRequestDocflow) GetAmendmentRequest() *SignedAttachmentV3 {
	if x != nil {
		return x.AmendmentRequest
	}
	return nil
}

func (x *AmendmentRequestDocflow) GetSentAt() *Timestamp {
	if x != nil {
		return x.SentAt
	}
	return nil
}

func (x *AmendmentRequestDocflow) GetDeliveredAt() *Timestamp {
	if x != nil {
		return x.DeliveredAt
	}
	return nil
}

func (x *AmendmentRequestDocflow) GetReceipt() *ReceiptDocflowV3 {
	if x != nil {
		return x.Receipt
	}
	return nil
}

func (x *AmendmentRequestDocflow) GetAmendmentFlags() int32 {
	if x != nil && x.AmendmentFlags != nil {
		return *x.AmendmentFlags
	}
	return 0
}

func (x *AmendmentRequestDocflow) GetPlainText() string {
	if x != nil && x.PlainText != nil {
		return *x.PlainText
	}
	return ""
}

func (x *AmendmentRequestDocflow) GetConfirmationDocflow() *ConfirmationDocflow {
	if x != nil {
		return x.ConfirmationDocflow
	}
	return nil
}

type ParticipantResponseDocflow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsFinished     *bool                      `protobuf:"varint,1,req,name=IsFinished" json:"IsFinished,omitempty"`
	Signature      *SignatureV3               `protobuf:"bytes,2,opt,name=Signature" json:"Signature,omitempty"`
	Title          *SignedAttachmentV3        `protobuf:"bytes,3,opt,name=Title" json:"Title,omitempty"`
	Rejection      *SignatureRejectionDocflow `protobuf:"bytes,4,opt,name=Rejection" json:"Rejection,omitempty"`
	SentAt         *Timestamp                 `protobuf:"bytes,5,opt,name=SentAt" json:"SentAt,omitempty"`
	DeliveredAt    *Timestamp                 `protobuf:"bytes,6,opt,name=DeliveredAt" json:"DeliveredAt,omitempty"`
	ResponseStatus *RecipientResponseStatus   `protobuf:"varint,7,req,name=ResponseStatus,enum=RecipientResponseStatus" json:"ResponseStatus,omitempty"`
}

func (x *ParticipantResponseDocflow) Reset() {
	*x = ParticipantResponseDocflow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[197]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParticipantResponseDocflow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParticipantResponseDocflow) ProtoMessage() {}

func (x *ParticipantResponseDocflow) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[197]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParticipantResponseDocflow.ProtoReflect.Descriptor instead.
func (*ParticipantResponseDocflow) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{197}
}

func (x *ParticipantResponseDocflow) GetIsFinished() bool {
	if x != nil && x.IsFinished != nil {
		return *x.IsFinished
	}
	return false
}

func (x *ParticipantResponseDocflow) GetSignature() *SignatureV3 {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *ParticipantResponseDocflow) GetTitle() *SignedAttachmentV3 {
	if x != nil {
		return x.Title
	}
	return nil
}

func (x *ParticipantResponseDocflow) GetRejection() *SignatureRejectionDocflow {
	if x != nil {
		return x.Rejection
	}
	return nil
}

func (x *ParticipantResponseDocflow) GetSentAt() *Timestamp {
	if x != nil {
		return x.SentAt
	}
	return nil
}

func (x *ParticipantResponseDocflow) GetDeliveredAt() *Timestamp {
	if x != nil {
		return x.DeliveredAt
	}
	return nil
}

func (x *ParticipantResponseDocflow) GetResponseStatus() RecipientResponseStatus {
	if x != nil && x.ResponseStatus != nil {
		return *x.ResponseStatus
	}
	return RecipientResponseStatus_RecipientResponseStatusUnknown
}

type SignatureRejectionDocflow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SignatureRejection *SignedAttachmentV3 `protobuf:"bytes,1,req,name=SignatureRejection" json:"SignatureRejection,omitempty"`
	IsFormal           *bool               `protobuf:"varint,2,req,name=IsFormal" json:"IsFormal,omitempty"`
	DeliveredAt        *Timestamp          `protobuf:"bytes,3,opt,name=DeliveredAt" json:"DeliveredAt,omitempty"`
	PlainText          *string             `protobuf:"bytes,4,opt,name=PlainText" json:"PlainText,omitempty"`
}

func (x *SignatureRejectionDocflow) Reset() {
	*x = SignatureRejectionDocflow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[198]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignatureRejectionDocflow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignatureRejectionDocflow) ProtoMessage() {}

func (x *SignatureRejectionDocflow) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[198]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignatureRejectionDocflow.ProtoReflect.Descriptor instead.
func (*SignatureRejectionDocflow) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{198}
}

func (x *SignatureRejectionDocflow) GetSignatureRejection() *SignedAttachmentV3 {
	if x != nil {
		return x.SignatureRejection
	}
	return nil
}

func (x *SignatureRejectionDocflow) GetIsFormal() bool {
	if x != nil && x.IsFormal != nil {
		return *x.IsFormal
	}
	return false
}

func (x *SignatureRejectionDocflow) GetDeliveredAt() *Timestamp {
	if x != nil {
		return x.DeliveredAt
	}
	return nil
}

func (x *SignatureRejectionDocflow) GetPlainText() string {
	if x != nil && x.PlainText != nil {
		return *x.PlainText
	}
	return ""
}

type ConfirmationDocflow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsFinished             *bool                        `protobuf:"varint,1,req,name=IsFinished" json:"IsFinished,omitempty"`
	ConfirmationAttachment *SignedAttachmentV3          `protobuf:"bytes,2,opt,name=ConfirmationAttachment" json:"ConfirmationAttachment,omitempty"`
	ConfirmedAt            *Timestamp                   `protobuf:"bytes,3,opt,name=ConfirmedAt" json:"ConfirmedAt,omitempty"`
	Receipt                *ReceiptDocflowV3            `protobuf:"bytes,4,opt,name=Receipt" json:"Receipt,omitempty"`
	RoamingConfirmation    *OperatorConfirmationDocflow `protobuf:"bytes,5,opt,name=RoamingConfirmation" json:"RoamingConfirmation,omitempty"`
}

func (x *ConfirmationDocflow) Reset() {
	*x = ConfirmationDocflow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[199]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfirmationDocflow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfirmationDocflow) ProtoMessage() {}

func (x *ConfirmationDocflow) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[199]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfirmationDocflow.ProtoReflect.Descriptor instead.
func (*ConfirmationDocflow) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{199}
}

func (x *ConfirmationDocflow) GetIsFinished() bool {
	if x != nil && x.IsFinished != nil {
		return *x.IsFinished
	}
	return false
}

func (x *ConfirmationDocflow) GetConfirmationAttachment() *SignedAttachmentV3 {
	if x != nil {
		return x.ConfirmationAttachment
	}
	return nil
}

func (x *ConfirmationDocflow) GetConfirmedAt() *Timestamp {
	if x != nil {
		return x.ConfirmedAt
	}
	return nil
}

func (x *ConfirmationDocflow) GetReceipt() *ReceiptDocflowV3 {
	if x != nil {
		return x.Receipt
	}
	return nil
}

func (x *ConfirmationDocflow) GetRoamingConfirmation() *OperatorConfirmationDocflow {
	if x != nil {
		return x.RoamingConfirmation
	}
	return nil
}

type ReceiptDocflowV3 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsFinished        *bool                 `protobuf:"varint,1,req,name=IsFinished" json:"IsFinished,omitempty"`
	ReceiptAttachment *SignedAttachmentV3   `protobuf:"bytes,2,opt,name=ReceiptAttachment" json:"ReceiptAttachment,omitempty"`
	SentAt            *Timestamp            `protobuf:"bytes,3,opt,name=SentAt" json:"SentAt,omitempty"`
	DeliveredAt       *Timestamp            `protobuf:"bytes,4,opt,name=DeliveredAt" json:"DeliveredAt,omitempty"`
	Confirmation      *ConfirmationDocflow  `protobuf:"bytes,5,opt,name=Confirmation" json:"Confirmation,omitempty"`
	Status            *GeneralReceiptStatus `protobuf:"varint,6,req,name=Status,enum=GeneralReceiptStatus" json:"Status,omitempty"`
}

func (x *ReceiptDocflowV3) Reset() {
	*x = ReceiptDocflowV3{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[200]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReceiptDocflowV3) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReceiptDocflowV3) ProtoMessage() {}

func (x *ReceiptDocflowV3) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[200]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReceiptDocflowV3.ProtoReflect.Descriptor instead.
func (*ReceiptDocflowV3) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{200}
}

func (x *ReceiptDocflowV3) GetIsFinished() bool {
	if x != nil && x.IsFinished != nil {
		return *x.IsFinished
	}
	return false
}

func (x *ReceiptDocflowV3) GetReceiptAttachment() *SignedAttachmentV3 {
	if x != nil {
		return x.ReceiptAttachment
	}
	return nil
}

func (x *ReceiptDocflowV3) GetSentAt() *Timestamp {
	if x != nil {
		return x.SentAt
	}
	return nil
}

func (x *ReceiptDocflowV3) GetDeliveredAt() *Timestamp {
	if x != nil {
		return x.DeliveredAt
	}
	return nil
}

func (x *ReceiptDocflowV3) GetConfirmation() *ConfirmationDocflow {
	if x != nil {
		return x.Confirmation
	}
	return nil
}

func (x *ReceiptDocflowV3) GetStatus() GeneralReceiptStatus {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return GeneralReceiptStatus_GeneralReceiptStatusUnknown
}

type OperatorConfirmationDocflow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConfirmationAttachment *SignedAttachmentV3 `protobuf:"bytes,1,opt,name=ConfirmationAttachment" json:"ConfirmationAttachment,omitempty"`
	ConfirmedAt            *Timestamp          `protobuf:"bytes,2,opt,name=ConfirmedAt" json:"ConfirmedAt,omitempty"`
}

func (x *OperatorConfirmationDocflow) Reset() {
	*x = OperatorConfirmationDocflow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[201]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OperatorConfirmationDocflow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperatorConfirmationDocflow) ProtoMessage() {}

func (x *OperatorConfirmationDocflow) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[201]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperatorConfirmationDocflow.ProtoReflect.Descriptor instead.
func (*OperatorConfirmationDocflow) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{201}
}

func (x *OperatorConfirmationDocflow) GetConfirmationAttachment() *SignedAttachmentV3 {
	if x != nil {
		return x.ConfirmationAttachment
	}
	return nil
}

func (x *OperatorConfirmationDocflow) GetConfirmedAt() *Timestamp {
	if x != nil {
		return x.ConfirmedAt
	}
	return nil
}

type SenderTitleDocflow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsFinished            *bool                  `protobuf:"varint,1,req,name=IsFinished" json:"IsFinished,omitempty"`
	Attachment            *SignedAttachmentV3    `protobuf:"bytes,2,req,name=Attachment" json:"Attachment,omitempty"`
	SentAt                *Timestamp             `protobuf:"bytes,3,opt,name=SentAt" json:"SentAt,omitempty"`
	DeliveredAt           *Timestamp             `protobuf:"bytes,4,opt,name=DeliveredAt" json:"DeliveredAt,omitempty"`
	RoamingNotification   *RoamingNotification   `protobuf:"bytes,5,opt,name=RoamingNotification" json:"RoamingNotification,omitempty"`
	SenderSignatureStatus *SenderSignatureStatus `protobuf:"varint,6,req,name=SenderSignatureStatus,enum=SenderSignatureStatus" json:"SenderSignatureStatus,omitempty"`
}

func (x *SenderTitleDocflow) Reset() {
	*x = SenderTitleDocflow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[202]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SenderTitleDocflow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SenderTitleDocflow) ProtoMessage() {}

func (x *SenderTitleDocflow) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[202]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SenderTitleDocflow.ProtoReflect.Descriptor instead.
func (*SenderTitleDocflow) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{202}
}

func (x *SenderTitleDocflow) GetIsFinished() bool {
	if x != nil && x.IsFinished != nil {
		return *x.IsFinished
	}
	return false
}

func (x *SenderTitleDocflow) GetAttachment() *SignedAttachmentV3 {
	if x != nil {
		return x.Attachment
	}
	return nil
}

func (x *SenderTitleDocflow) GetSentAt() *Timestamp {
	if x != nil {
		return x.SentAt
	}
	return nil
}

func (x *SenderTitleDocflow) GetDeliveredAt() *Timestamp {
	if x != nil {
		return x.DeliveredAt
	}
	return nil
}

func (x *SenderTitleDocflow) GetRoamingNotification() *RoamingNotification {
	if x != nil {
		return x.RoamingNotification
	}
	return nil
}

func (x *SenderTitleDocflow) GetSenderSignatureStatus() SenderSignatureStatus {
	if x != nil && x.SenderSignatureStatus != nil {
		return *x.SenderSignatureStatus
	}
	return SenderSignatureStatus_UnknownSenderSignatureStatus
}

type RoamingNotification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Notification *Entity `protobuf:"bytes,1,req,name=Notification" json:"Notification,omitempty"`
	IsSuccess    *bool   `protobuf:"varint,2,req,name=IsSuccess" json:"IsSuccess,omitempty"`
}

func (x *RoamingNotification) Reset() {
	*x = RoamingNotification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[203]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoamingNotification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoamingNotification) ProtoMessage() {}

func (x *RoamingNotification) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[203]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoamingNotification.ProtoReflect.Descriptor instead.
func (*RoamingNotification) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{203}
}

func (x *RoamingNotification) GetNotification() *Entity {
	if x != nil {
		return x.Notification
	}
	return nil
}

func (x *RoamingNotification) GetIsSuccess() bool {
	if x != nil && x.IsSuccess != nil {
		return *x.IsSuccess
	}
	return false
}

type SignedAttachmentV3 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Attachment    *Attachment  `protobuf:"bytes,1,req,name=Attachment" json:"Attachment,omitempty"`
	Signature     *SignatureV3 `protobuf:"bytes,2,opt,name=Signature" json:"Signature,omitempty"`
	Comment       *Entity      `protobuf:"bytes,3,opt,name=Comment" json:"Comment,omitempty"`
	ContentTypeId *string      `protobuf:"bytes,4,req,name=ContentTypeId" json:"ContentTypeId,omitempty"`
}

func (x *SignedAttachmentV3) Reset() {
	*x = SignedAttachmentV3{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[204]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignedAttachmentV3) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignedAttachmentV3) ProtoMessage() {}

func (x *SignedAttachmentV3) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[204]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignedAttachmentV3.ProtoReflect.Descriptor instead.
func (*SignedAttachmentV3) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{204}
}

func (x *SignedAttachmentV3) GetAttachment() *Attachment {
	if x != nil {
		return x.Attachment
	}
	return nil
}

func (x *SignedAttachmentV3) GetSignature() *SignatureV3 {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *SignedAttachmentV3) GetComment() *Entity {
	if x != nil {
		return x.Comment
	}
	return nil
}

func (x *SignedAttachmentV3) GetContentTypeId() string {
	if x != nil && x.ContentTypeId != nil {
		return *x.ContentTypeId
	}
	return ""
}

type Attachment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Entity             *Entity `protobuf:"bytes,1,opt,name=Entity" json:"Entity,omitempty"`
	AttachmentFilename *string `protobuf:"bytes,2,opt,name=AttachmentFilename" json:"AttachmentFilename,omitempty"`
	DisplayFilename    *string `protobuf:"bytes,3,opt,name=DisplayFilename" json:"DisplayFilename,omitempty"`
}

func (x *Attachment) Reset() {
	*x = Attachment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[205]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Attachment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Attachment) ProtoMessage() {}

func (x *Attachment) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[205]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Attachment.ProtoReflect.Descriptor instead.
func (*Attachment) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{205}
}

func (x *Attachment) GetEntity() *Entity {
	if x != nil {
		return x.Entity
	}
	return nil
}

func (x *Attachment) GetAttachmentFilename() string {
	if x != nil && x.AttachmentFilename != nil {
		return *x.AttachmentFilename
	}
	return ""
}

func (x *Attachment) GetDisplayFilename() string {
	if x != nil && x.DisplayFilename != nil {
		return *x.DisplayFilename
	}
	return ""
}

type SignatureV3 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cms                *Entity                      `protobuf:"bytes,1,req,name=Cms" json:"Cms,omitempty"`
	CadesT             *Entity                      `protobuf:"bytes,2,opt,name=CadesT" json:"CadesT,omitempty"`
	SignerBoxId        *string                      `protobuf:"bytes,3,req,name=SignerBoxId" json:"SignerBoxId,omitempty"`
	SignerDepartmentId *string                      `protobuf:"bytes,4,req,name=SignerDepartmentId" json:"SignerDepartmentId,omitempty"`
	IsValid            *bool                        `protobuf:"varint,5,req,name=IsValid" json:"IsValid,omitempty"`
	VerificationResult *SignatureVerificationResult `protobuf:"bytes,6,opt,name=VerificationResult" json:"VerificationResult,omitempty"`
	DeliveredAt        *Timestamp                   `protobuf:"bytes,7,opt,name=DeliveredAt" json:"DeliveredAt,omitempty"`
	PowerOfAttorney    *SignaturePowerOfAttorney    `protobuf:"bytes,8,opt,name=PowerOfAttorney" json:"PowerOfAttorney,omitempty"`
}

func (x *SignatureV3) Reset() {
	*x = SignatureV3{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[206]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignatureV3) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignatureV3) ProtoMessage() {}

func (x *SignatureV3) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[206]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignatureV3.ProtoReflect.Descriptor instead.
func (*SignatureV3) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{206}
}

func (x *SignatureV3) GetCms() *Entity {
	if x != nil {
		return x.Cms
	}
	return nil
}

func (x *SignatureV3) GetCadesT() *Entity {
	if x != nil {
		return x.CadesT
	}
	return nil
}

func (x *SignatureV3) GetSignerBoxId() string {
	if x != nil && x.SignerBoxId != nil {
		return *x.SignerBoxId
	}
	return ""
}

func (x *SignatureV3) GetSignerDepartmentId() string {
	if x != nil && x.SignerDepartmentId != nil {
		return *x.SignerDepartmentId
	}
	return ""
}

func (x *SignatureV3) GetIsValid() bool {
	if x != nil && x.IsValid != nil {
		return *x.IsValid
	}
	return false
}

func (x *SignatureV3) GetVerificationResult() *SignatureVerificationResult {
	if x != nil {
		return x.VerificationResult
	}
	return nil
}

func (x *SignatureV3) GetDeliveredAt() *Timestamp {
	if x != nil {
		return x.DeliveredAt
	}
	return nil
}

func (x *SignatureV3) GetPowerOfAttorney() *SignaturePowerOfAttorney {
	if x != nil {
		return x.PowerOfAttorney
	}
	return nil
}

type SignatureVerificationResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsValid            *bool                          `protobuf:"varint,1,req,name=IsValid" json:"IsValid,omitempty"`
	CertificateStatus  *CertificateVerificationResult `protobuf:"bytes,2,opt,name=CertificateStatus" json:"CertificateStatus,omitempty"`
	SignatureTimestamp *Timestamp                     `protobuf:"bytes,3,opt,name=SignatureTimestamp" json:"SignatureTimestamp,omitempty"`
}

func (x *SignatureVerificationResult) Reset() {
	*x = SignatureVerificationResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[207]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignatureVerificationResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignatureVerificationResult) ProtoMessage() {}

func (x *SignatureVerificationResult) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[207]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignatureVerificationResult.ProtoReflect.Descriptor instead.
func (*SignatureVerificationResult) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{207}
}

func (x *SignatureVerificationResult) GetIsValid() bool {
	if x != nil && x.IsValid != nil {
		return *x.IsValid
	}
	return false
}

func (x *SignatureVerificationResult) GetCertificateStatus() *CertificateVerificationResult {
	if x != nil {
		return x.CertificateStatus
	}
	return nil
}

func (x *SignatureVerificationResult) GetSignatureTimestamp() *Timestamp {
	if x != nil {
		return x.SignatureTimestamp
	}
	return nil
}

type SignaturePowerOfAttorney struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Entity        *Entity                          `protobuf:"bytes,1,req,name=Entity" json:"Entity,omitempty"`
	FullId        *PowerOfAttorneyFullId           `protobuf:"bytes,2,req,name=FullId" json:"FullId,omitempty"`
	Status        *PowerOfAttorneyValidationStatus `protobuf:"bytes,3,opt,name=Status" json:"Status,omitempty"`
	StatusChanges []*PowerOfAttorneyStatusChange   `protobuf:"bytes,4,rep,name=StatusChanges" json:"StatusChanges,omitempty"`
}

func (x *SignaturePowerOfAttorney) Reset() {
	*x = SignaturePowerOfAttorney{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[208]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignaturePowerOfAttorney) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignaturePowerOfAttorney) ProtoMessage() {}

func (x *SignaturePowerOfAttorney) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[208]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignaturePowerOfAttorney.ProtoReflect.Descriptor instead.
func (*SignaturePowerOfAttorney) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{208}
}

func (x *SignaturePowerOfAttorney) GetEntity() *Entity {
	if x != nil {
		return x.Entity
	}
	return nil
}

func (x *SignaturePowerOfAttorney) GetFullId() *PowerOfAttorneyFullId {
	if x != nil {
		return x.FullId
	}
	return nil
}

func (x *SignaturePowerOfAttorney) GetStatus() *PowerOfAttorneyValidationStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *SignaturePowerOfAttorney) GetStatusChanges() []*PowerOfAttorneyStatusChange {
	if x != nil {
		return x.StatusChanges
	}
	return nil
}

type PowerOfAttorneyStatusChange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Entity                *Entity                          `protobuf:"bytes,1,req,name=Entity" json:"Entity,omitempty"`
	PowerOfAttorneyStatus *PowerOfAttorneyValidationStatus `protobuf:"bytes,2,req,name=PowerOfAttorneyStatus" json:"PowerOfAttorneyStatus,omitempty"`
}

func (x *PowerOfAttorneyStatusChange) Reset() {
	*x = PowerOfAttorneyStatusChange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[209]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PowerOfAttorneyStatusChange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PowerOfAttorneyStatusChange) ProtoMessage() {}

func (x *PowerOfAttorneyStatusChange) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[209]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PowerOfAttorneyStatusChange.ProtoReflect.Descriptor instead.
func (*PowerOfAttorneyStatusChange) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{209}
}

func (x *PowerOfAttorneyStatusChange) GetEntity() *Entity {
	if x != nil {
		return x.Entity
	}
	return nil
}

func (x *PowerOfAttorneyStatusChange) GetPowerOfAttorneyStatus() *PowerOfAttorneyValidationStatus {
	if x != nil {
		return x.PowerOfAttorneyStatus
	}
	return nil
}

type CertificateVerificationResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsValid          *bool                      `protobuf:"varint,2,req,name=IsValid" json:"IsValid,omitempty"`
	CertificateChain []*CertificateChainElement `protobuf:"bytes,3,rep,name=CertificateChain" json:"CertificateChain,omitempty"`
	VerificationTime *Timestamp                 `protobuf:"bytes,4,req,name=VerificationTime" json:"VerificationTime,omitempty"`
}

func (x *CertificateVerificationResult) Reset() {
	*x = CertificateVerificationResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[210]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CertificateVerificationResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CertificateVerificationResult) ProtoMessage() {}

func (x *CertificateVerificationResult) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[210]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CertificateVerificationResult.ProtoReflect.Descriptor instead.
func (*CertificateVerificationResult) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{210}
}

func (x *CertificateVerificationResult) GetIsValid() bool {
	if x != nil && x.IsValid != nil {
		return *x.IsValid
	}
	return false
}

func (x *CertificateVerificationResult) GetCertificateChain() []*CertificateChainElement {
	if x != nil {
		return x.CertificateChain
	}
	return nil
}

func (x *CertificateVerificationResult) GetVerificationTime() *Timestamp {
	if x != nil {
		return x.VerificationTime
	}
	return nil
}

type CertificateChainElement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CertificateChainStatusFlags *int32 `protobuf:"varint,1,req,name=CertificateChainStatusFlags" json:"CertificateChainStatusFlags,omitempty"`
	DerCertificate              []byte `protobuf:"bytes,2,req,name=DerCertificate" json:"DerCertificate,omitempty"`
}

func (x *CertificateChainElement) Reset() {
	*x = CertificateChainElement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[211]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CertificateChainElement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CertificateChainElement) ProtoMessage() {}

func (x *CertificateChainElement) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[211]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CertificateChainElement.ProtoReflect.Descriptor instead.
func (*CertificateChainElement) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{211}
}

func (x *CertificateChainElement) GetCertificateChainStatusFlags() int32 {
	if x != nil && x.CertificateChainStatusFlags != nil {
		return *x.CertificateChainStatusFlags
	}
	return 0
}

func (x *CertificateChainElement) GetDerCertificate() []byte {
	if x != nil {
		return x.DerCertificate
	}
	return nil
}

type GetDocflowsByPacketIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PacketId            *string `protobuf:"bytes,1,req,name=PacketId" json:"PacketId,omitempty"`
	Count               *int32  `protobuf:"varint,2,opt,name=Count,def=100" json:"Count,omitempty"`
	InjectEntityContent *bool   `protobuf:"varint,3,opt,name=InjectEntityContent,def=0" json:"InjectEntityContent,omitempty"`
	AfterIndexKey       []byte  `protobuf:"bytes,4,opt,name=AfterIndexKey" json:"AfterIndexKey,omitempty"`
}

// Default values for GetDocflowsByPacketIdRequest fields.
const (
	Default_GetDocflowsByPacketIdRequest_Count               = int32(100)
	Default_GetDocflowsByPacketIdRequest_InjectEntityContent = bool(false)
)

func (x *GetDocflowsByPacketIdRequest) Reset() {
	*x = GetDocflowsByPacketIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[212]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDocflowsByPacketIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDocflowsByPacketIdRequest) ProtoMessage() {}

func (x *GetDocflowsByPacketIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[212]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDocflowsByPacketIdRequest.ProtoReflect.Descriptor instead.
func (*GetDocflowsByPacketIdRequest) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{212}
}

func (x *GetDocflowsByPacketIdRequest) GetPacketId() string {
	if x != nil && x.PacketId != nil {
		return *x.PacketId
	}
	return ""
}

func (x *GetDocflowsByPacketIdRequest) GetCount() int32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return Default_GetDocflowsByPacketIdRequest_Count
}

func (x *GetDocflowsByPacketIdRequest) GetInjectEntityContent() bool {
	if x != nil && x.InjectEntityContent != nil {
		return *x.InjectEntityContent
	}
	return Default_GetDocflowsByPacketIdRequest_InjectEntityContent
}

func (x *GetDocflowsByPacketIdRequest) GetAfterIndexKey() []byte {
	if x != nil {
		return x.AfterIndexKey
	}
	return nil
}

type GetDocflowsByPacketIdResponseV3 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Documents        []*FetchedDocumentV3 `protobuf:"bytes,1,rep,name=Documents" json:"Documents,omitempty"`
	NextPageIndexKey []byte               `protobuf:"bytes,2,opt,name=NextPageIndexKey" json:"NextPageIndexKey,omitempty"`
}

func (x *GetDocflowsByPacketIdResponseV3) Reset() {
	*x = GetDocflowsByPacketIdResponseV3{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[213]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDocflowsByPacketIdResponseV3) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDocflowsByPacketIdResponseV3) ProtoMessage() {}

func (x *GetDocflowsByPacketIdResponseV3) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[213]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDocflowsByPacketIdResponseV3.ProtoReflect.Descriptor instead.
func (*GetDocflowsByPacketIdResponseV3) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{213}
}

func (x *GetDocflowsByPacketIdResponseV3) GetDocuments() []*FetchedDocumentV3 {
	if x != nil {
		return x.Documents
	}
	return nil
}

func (x *GetDocflowsByPacketIdResponseV3) GetNextPageIndexKey() []byte {
	if x != nil {
		return x.NextPageIndexKey
	}
	return nil
}

type FetchedDocumentV3 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Document *DocumentWithDocflowV3 `protobuf:"bytes,1,req,name=Document" json:"Document,omitempty"`
	IndexKey []byte                 `protobuf:"bytes,2,req,name=IndexKey" json:"IndexKey,omitempty"`
}

func (x *FetchedDocumentV3) Reset() {
	*x = FetchedDocumentV3{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[214]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchedDocumentV3) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchedDocumentV3) ProtoMessage() {}

func (x *FetchedDocumentV3) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[214]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchedDocumentV3.ProtoReflect.Descriptor instead.
func (*FetchedDocumentV3) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{214}
}

func (x *FetchedDocumentV3) GetDocument() *DocumentWithDocflowV3 {
	if x != nil {
		return x.Document
	}
	return nil
}

func (x *FetchedDocumentV3) GetIndexKey() []byte {
	if x != nil {
		return x.IndexKey
	}
	return nil
}

type SearchDocflowsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QueryString         *string      `protobuf:"bytes,1,req,name=QueryString" json:"QueryString,omitempty"`
	Count               *int32       `protobuf:"varint,2,opt,name=Count,def=100" json:"Count,omitempty"`
	FirstIndex          *int32       `protobuf:"varint,3,opt,name=FirstIndex" json:"FirstIndex,omitempty"`
	Scope               *SearchScope `protobuf:"varint,4,opt,name=Scope,enum=SearchScope,def=0" json:"Scope,omitempty"`
	InjectEntityContent *bool        `protobuf:"varint,5,opt,name=InjectEntityContent,def=0" json:"InjectEntityContent,omitempty"`
}

// Default values for SearchDocflowsRequest fields.
const (
	Default_SearchDocflowsRequest_Count               = int32(100)
	Default_SearchDocflowsRequest_Scope               = SearchScope_SearchScopeAny
	Default_SearchDocflowsRequest_InjectEntityContent = bool(false)
)

func (x *SearchDocflowsRequest) Reset() {
	*x = SearchDocflowsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[215]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchDocflowsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchDocflowsRequest) ProtoMessage() {}

func (x *SearchDocflowsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[215]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchDocflowsRequest.ProtoReflect.Descriptor instead.
func (*SearchDocflowsRequest) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{215}
}

func (x *SearchDocflowsRequest) GetQueryString() string {
	if x != nil && x.QueryString != nil {
		return *x.QueryString
	}
	return ""
}

func (x *SearchDocflowsRequest) GetCount() int32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return Default_SearchDocflowsRequest_Count
}

func (x *SearchDocflowsRequest) GetFirstIndex() int32 {
	if x != nil && x.FirstIndex != nil {
		return *x.FirstIndex
	}
	return 0
}

func (x *SearchDocflowsRequest) GetScope() SearchScope {
	if x != nil && x.Scope != nil {
		return *x.Scope
	}
	return Default_SearchDocflowsRequest_Scope
}

func (x *SearchDocflowsRequest) GetInjectEntityContent() bool {
	if x != nil && x.InjectEntityContent != nil {
		return *x.InjectEntityContent
	}
	return Default_SearchDocflowsRequest_InjectEntityContent
}

type SearchDocflowsResponseV3 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Documents         []*DocumentWithDocflowV3 `protobuf:"bytes,1,rep,name=Documents" json:"Documents,omitempty"`
	HaveMoreDocuments *bool                    `protobuf:"varint,2,opt,name=HaveMoreDocuments" json:"HaveMoreDocuments,omitempty"`
}

func (x *SearchDocflowsResponseV3) Reset() {
	*x = SearchDocflowsResponseV3{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[216]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchDocflowsResponseV3) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchDocflowsResponseV3) ProtoMessage() {}

func (x *SearchDocflowsResponseV3) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[216]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchDocflowsResponseV3.ProtoReflect.Descriptor instead.
func (*SearchDocflowsResponseV3) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{216}
}

func (x *SearchDocflowsResponseV3) GetDocuments() []*DocumentWithDocflowV3 {
	if x != nil {
		return x.Documents
	}
	return nil
}

func (x *SearchDocflowsResponseV3) GetHaveMoreDocuments() bool {
	if x != nil && x.HaveMoreDocuments != nil {
		return *x.HaveMoreDocuments
	}
	return false
}

type GetDocflowEventsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filter                         *TimeBasedFilter `protobuf:"bytes,1,req,name=Filter" json:"Filter,omitempty"`
	AfterIndexKey                  []byte           `protobuf:"bytes,2,opt,name=AfterIndexKey" json:"AfterIndexKey,omitempty"`
	PopulateDocuments              *bool            `protobuf:"varint,3,opt,name=PopulateDocuments,def=0" json:"PopulateDocuments,omitempty"`
	InjectEntityContent            *bool            `protobuf:"varint,4,opt,name=InjectEntityContent,def=0" json:"InjectEntityContent,omitempty"`
	PopulatePreviousDocumentStates *bool            `protobuf:"varint,5,opt,name=PopulatePreviousDocumentStates,def=0" json:"PopulatePreviousDocumentStates,omitempty"`
	MessageTypes                   []string         `protobuf:"bytes,6,rep,name=MessageTypes" json:"MessageTypes,omitempty"`
	DocumentDirections             []string         `protobuf:"bytes,7,rep,name=DocumentDirections" json:"DocumentDirections,omitempty"`
	DepartmentId                   *string          `protobuf:"bytes,8,opt,name=DepartmentId" json:"DepartmentId,omitempty"`
	TypeNamedIds                   []string         `protobuf:"bytes,9,rep,name=TypeNamedIds" json:"TypeNamedIds,omitempty"`
	CounteragentBoxId              *string          `protobuf:"bytes,10,opt,name=CounteragentBoxId" json:"CounteragentBoxId,omitempty"`
	Limit                          *int32           `protobuf:"varint,11,opt,name=Limit,def=100" json:"Limit,omitempty"`
}

// Default values for GetDocflowEventsRequest fields.
const (
	Default_GetDocflowEventsRequest_PopulateDocuments              = bool(false)
	Default_GetDocflowEventsRequest_InjectEntityContent            = bool(false)
	Default_GetDocflowEventsRequest_PopulatePreviousDocumentStates = bool(false)
	Default_GetDocflowEventsRequest_Limit                          = int32(100)
)

func (x *GetDocflowEventsRequest) Reset() {
	*x = GetDocflowEventsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[217]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDocflowEventsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDocflowEventsRequest) ProtoMessage() {}

func (x *GetDocflowEventsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[217]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDocflowEventsRequest.ProtoReflect.Descriptor instead.
func (*GetDocflowEventsRequest) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{217}
}

func (x *GetDocflowEventsRequest) GetFilter() *TimeBasedFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *GetDocflowEventsRequest) GetAfterIndexKey() []byte {
	if x != nil {
		return x.AfterIndexKey
	}
	return nil
}

func (x *GetDocflowEventsRequest) GetPopulateDocuments() bool {
	if x != nil && x.PopulateDocuments != nil {
		return *x.PopulateDocuments
	}
	return Default_GetDocflowEventsRequest_PopulateDocuments
}

func (x *GetDocflowEventsRequest) GetInjectEntityContent() bool {
	if x != nil && x.InjectEntityContent != nil {
		return *x.InjectEntityContent
	}
	return Default_GetDocflowEventsRequest_InjectEntityContent
}

func (x *GetDocflowEventsRequest) GetPopulatePreviousDocumentStates() bool {
	if x != nil && x.PopulatePreviousDocumentStates != nil {
		return *x.PopulatePreviousDocumentStates
	}
	return Default_GetDocflowEventsRequest_PopulatePreviousDocumentStates
}

func (x *GetDocflowEventsRequest) GetMessageTypes() []string {
	if x != nil {
		return x.MessageTypes
	}
	return nil
}

func (x *GetDocflowEventsRequest) GetDocumentDirections() []string {
	if x != nil {
		return x.DocumentDirections
	}
	return nil
}

func (x *GetDocflowEventsRequest) GetDepartmentId() string {
	if x != nil && x.DepartmentId != nil {
		return *x.DepartmentId
	}
	return ""
}

func (x *GetDocflowEventsRequest) GetTypeNamedIds() []string {
	if x != nil {
		return x.TypeNamedIds
	}
	return nil
}

func (x *GetDocflowEventsRequest) GetCounteragentBoxId() string {
	if x != nil && x.CounteragentBoxId != nil {
		return *x.CounteragentBoxId
	}
	return ""
}

func (x *GetDocflowEventsRequest) GetLimit() int32 {
	if x != nil && x.Limit != nil {
		return *x.Limit
	}
	return Default_GetDocflowEventsRequest_Limit
}

type TimeBasedFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromTimestamp *Timestamp     `protobuf:"bytes,1,opt,name=FromTimestamp" json:"FromTimestamp,omitempty"`
	ToTimestamp   *Timestamp     `protobuf:"bytes,2,opt,name=ToTimestamp" json:"ToTimestamp,omitempty"`
	SortDirection *SortDirection `protobuf:"varint,3,opt,name=SortDirection,enum=SortDirection,def=1" json:"SortDirection,omitempty"`
}

// Default values for TimeBasedFilter fields.
const (
	Default_TimeBasedFilter_SortDirection = SortDirection_Ascending
)

func (x *TimeBasedFilter) Reset() {
	*x = TimeBasedFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[218]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimeBasedFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimeBasedFilter) ProtoMessage() {}

func (x *TimeBasedFilter) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[218]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimeBasedFilter.ProtoReflect.Descriptor instead.
func (*TimeBasedFilter) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{218}
}

func (x *TimeBasedFilter) GetFromTimestamp() *Timestamp {
	if x != nil {
		return x.FromTimestamp
	}
	return nil
}

func (x *TimeBasedFilter) GetToTimestamp() *Timestamp {
	if x != nil {
		return x.ToTimestamp
	}
	return nil
}

func (x *TimeBasedFilter) GetSortDirection() SortDirection {
	if x != nil && x.SortDirection != nil {
		return *x.SortDirection
	}
	return Default_TimeBasedFilter_SortDirection
}

type GetDocflowEventsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalCount     *int32            `protobuf:"varint,1,opt,name=TotalCount" json:"TotalCount,omitempty"`
	Events         []*DocflowEventV3 `protobuf:"bytes,2,rep,name=Events" json:"Events,omitempty"`
	TotalCountType *TotalCountType   `protobuf:"varint,3,req,name=TotalCountType,enum=TotalCountType" json:"TotalCountType,omitempty"`
}

func (x *GetDocflowEventsResponse) Reset() {
	*x = GetDocflowEventsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[219]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDocflowEventsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDocflowEventsResponse) ProtoMessage() {}

func (x *GetDocflowEventsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[219]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDocflowEventsResponse.ProtoReflect.Descriptor instead.
func (*GetDocflowEventsResponse) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{219}
}

func (x *GetDocflowEventsResponse) GetTotalCount() int32 {
	if x != nil && x.TotalCount != nil {
		return *x.TotalCount
	}
	return 0
}

func (x *GetDocflowEventsResponse) GetEvents() []*DocflowEventV3 {
	if x != nil {
		return x.Events
	}
	return nil
}

func (x *GetDocflowEventsResponse) GetTotalCountType() TotalCountType {
	if x != nil && x.TotalCountType != nil {
		return *x.TotalCountType
	}
	return TotalCountType_UnknownCountType
}

type DocflowEventV3 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId               *string                `protobuf:"bytes,1,opt,name=EventId" json:"EventId,omitempty"`
	Timestamp             *Timestamp             `protobuf:"bytes,2,opt,name=Timestamp" json:"Timestamp,omitempty"`
	DocumentId            *DocumentId            `protobuf:"bytes,3,opt,name=DocumentId" json:"DocumentId,omitempty"`
	IndexKey              []byte                 `protobuf:"bytes,4,opt,name=IndexKey" json:"IndexKey,omitempty"`
	Document              *DocumentWithDocflowV3 `protobuf:"bytes,5,opt,name=Document" json:"Document,omitempty"`
	PreviousEventId       *string                `protobuf:"bytes,6,opt,name=PreviousEventId" json:"PreviousEventId,omitempty"`
	PreviousDocumentState *DocumentWithDocflowV3 `protobuf:"bytes,7,opt,name=PreviousDocumentState" json:"PreviousDocumentState,omitempty"`
}

func (x *DocflowEventV3) Reset() {
	*x = DocflowEventV3{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[220]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DocflowEventV3) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DocflowEventV3) ProtoMessage() {}

func (x *DocflowEventV3) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[220]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DocflowEventV3.ProtoReflect.Descriptor instead.
func (*DocflowEventV3) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{220}
}

func (x *DocflowEventV3) GetEventId() string {
	if x != nil && x.EventId != nil {
		return *x.EventId
	}
	return ""
}

func (x *DocflowEventV3) GetTimestamp() *Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *DocflowEventV3) GetDocumentId() *DocumentId {
	if x != nil {
		return x.DocumentId
	}
	return nil
}

func (x *DocflowEventV3) GetIndexKey() []byte {
	if x != nil {
		return x.IndexKey
	}
	return nil
}

func (x *DocflowEventV3) GetDocument() *DocumentWithDocflowV3 {
	if x != nil {
		return x.Document
	}
	return nil
}

func (x *DocflowEventV3) GetPreviousEventId() string {
	if x != nil && x.PreviousEventId != nil {
		return *x.PreviousEventId
	}
	return ""
}

func (x *DocflowEventV3) GetPreviousDocumentState() *DocumentWithDocflowV3 {
	if x != nil {
		return x.PreviousDocumentState
	}
	return nil
}

type CustomPrintFormDetectionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DocumentIds []*DocumentId `protobuf:"bytes,1,rep,name=DocumentIds" json:"DocumentIds,omitempty"`
}

func (x *CustomPrintFormDetectionRequest) Reset() {
	*x = CustomPrintFormDetectionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[221]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomPrintFormDetectionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomPrintFormDetectionRequest) ProtoMessage() {}

func (x *CustomPrintFormDetectionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[221]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomPrintFormDetectionRequest.ProtoReflect.Descriptor instead.
func (*CustomPrintFormDetectionRequest) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{221}
}

func (x *CustomPrintFormDetectionRequest) GetDocumentIds() []*DocumentId {
	if x != nil {
		return x.DocumentIds
	}
	return nil
}

type CustomPrintFormDetectionResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*CustomPrintFormDetectionItemResult `protobuf:"bytes,1,rep,name=Items" json:"Items,omitempty"`
}

func (x *CustomPrintFormDetectionResult) Reset() {
	*x = CustomPrintFormDetectionResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[222]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomPrintFormDetectionResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomPrintFormDetectionResult) ProtoMessage() {}

func (x *CustomPrintFormDetectionResult) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[222]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomPrintFormDetectionResult.ProtoReflect.Descriptor instead.
func (*CustomPrintFormDetectionResult) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{222}
}

func (x *CustomPrintFormDetectionResult) GetItems() []*CustomPrintFormDetectionItemResult {
	if x != nil {
		return x.Items
	}
	return nil
}

type CustomPrintFormDetectionItemResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DocumentId         *DocumentId `protobuf:"bytes,1,req,name=DocumentId" json:"DocumentId,omitempty"`
	HasCustomPrintForm *bool       `protobuf:"varint,2,req,name=HasCustomPrintForm" json:"HasCustomPrintForm,omitempty"`
}

func (x *CustomPrintFormDetectionItemResult) Reset() {
	*x = CustomPrintFormDetectionItemResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[223]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomPrintFormDetectionItemResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomPrintFormDetectionItemResult) ProtoMessage() {}

func (x *CustomPrintFormDetectionItemResult) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[223]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomPrintFormDetectionItemResult.ProtoReflect.Descriptor instead.
func (*CustomPrintFormDetectionItemResult) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{223}
}

func (x *CustomPrintFormDetectionItemResult) GetDocumentId() *DocumentId {
	if x != nil {
		return x.DocumentId
	}
	return nil
}

func (x *CustomPrintFormDetectionItemResult) GetHasCustomPrintForm() bool {
	if x != nil && x.HasCustomPrintForm != nil {
		return *x.HasCustomPrintForm
	}
	return false
}

type ForwardDocumentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ToBoxId    *string     `protobuf:"bytes,1,req,name=ToBoxId" json:"ToBoxId,omitempty"`
	DocumentId *DocumentId `protobuf:"bytes,2,req,name=DocumentId" json:"DocumentId,omitempty"`
}

func (x *ForwardDocumentRequest) Reset() {
	*x = ForwardDocumentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[224]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ForwardDocumentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ForwardDocumentRequest) ProtoMessage() {}

func (x *ForwardDocumentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[224]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ForwardDocumentRequest.ProtoReflect.Descriptor instead.
func (*ForwardDocumentRequest) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{224}
}

func (x *ForwardDocumentRequest) GetToBoxId() string {
	if x != nil && x.ToBoxId != nil {
		return *x.ToBoxId
	}
	return ""
}

func (x *ForwardDocumentRequest) GetDocumentId() *DocumentId {
	if x != nil {
		return x.DocumentId
	}
	return nil
}

type ForwardDocumentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ForwardTimestamp    *Timestamp           `protobuf:"bytes,1,opt,name=ForwardTimestamp" json:"ForwardTimestamp,omitempty"`
	ForwardedDocumentId *ForwardedDocumentId `protobuf:"bytes,2,opt,name=ForwardedDocumentId" json:"ForwardedDocumentId,omitempty"`
}

func (x *ForwardDocumentResponse) Reset() {
	*x = ForwardDocumentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[225]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ForwardDocumentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ForwardDocumentResponse) ProtoMessage() {}

func (x *ForwardDocumentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[225]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ForwardDocumentResponse.ProtoReflect.Descriptor instead.
func (*ForwardDocumentResponse) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{225}
}

func (x *ForwardDocumentResponse) GetForwardTimestamp() *Timestamp {
	if x != nil {
		return x.ForwardTimestamp
	}
	return nil
}

func (x *ForwardDocumentResponse) GetForwardedDocumentId() *ForwardedDocumentId {
	if x != nil {
		return x.ForwardedDocumentId
	}
	return nil
}

type ForwardedDocumentId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromBoxId      *string     `protobuf:"bytes,1,opt,name=FromBoxId" json:"FromBoxId,omitempty"`
	DocumentId     *DocumentId `protobuf:"bytes,2,opt,name=DocumentId" json:"DocumentId,omitempty"`
	ForwardEventId *string     `protobuf:"bytes,3,opt,name=ForwardEventId" json:"ForwardEventId,omitempty"`
}

func (x *ForwardedDocumentId) Reset() {
	*x = ForwardedDocumentId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[226]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ForwardedDocumentId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ForwardedDocumentId) ProtoMessage() {}

func (x *ForwardedDocumentId) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[226]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ForwardedDocumentId.ProtoReflect.Descriptor instead.
func (*ForwardedDocumentId) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{226}
}

func (x *ForwardedDocumentId) GetFromBoxId() string {
	if x != nil && x.FromBoxId != nil {
		return *x.FromBoxId
	}
	return ""
}

func (x *ForwardedDocumentId) GetDocumentId() *DocumentId {
	if x != nil {
		return x.DocumentId
	}
	return nil
}

func (x *ForwardedDocumentId) GetForwardEventId() string {
	if x != nil && x.ForwardEventId != nil {
		return *x.ForwardEventId
	}
	return ""
}

type ForwardedDocument struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ForwardTimestamp    *Timestamp           `protobuf:"bytes,1,opt,name=ForwardTimestamp" json:"ForwardTimestamp,omitempty"`
	ForwardedDocumentId *ForwardedDocumentId `protobuf:"bytes,2,opt,name=ForwardedDocumentId" json:"ForwardedDocumentId,omitempty"`
	DocumentWithDocflow *DocumentWithDocflow `protobuf:"bytes,3,opt,name=DocumentWithDocflow" json:"DocumentWithDocflow,omitempty"`
}

func (x *ForwardedDocument) Reset() {
	*x = ForwardedDocument{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[227]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ForwardedDocument) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ForwardedDocument) ProtoMessage() {}

func (x *ForwardedDocument) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[227]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ForwardedDocument.ProtoReflect.Descriptor instead.
func (*ForwardedDocument) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{227}
}

func (x *ForwardedDocument) GetForwardTimestamp() *Timestamp {
	if x != nil {
		return x.ForwardTimestamp
	}
	return nil
}

func (x *ForwardedDocument) GetForwardedDocumentId() *ForwardedDocumentId {
	if x != nil {
		return x.ForwardedDocumentId
	}
	return nil
}

func (x *ForwardedDocument) GetDocumentWithDocflow() *DocumentWithDocflow {
	if x != nil {
		return x.DocumentWithDocflow
	}
	return nil
}

type DocumentWithDocflow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DocumentId             *DocumentId             `protobuf:"bytes,1,opt,name=DocumentId" json:"DocumentId,omitempty"`
	LastEventId            *string                 `protobuf:"bytes,2,opt,name=LastEventId" json:"LastEventId,omitempty"`
	LastEventTimestamp     *Timestamp              `protobuf:"bytes,3,opt,name=LastEventTimestamp" json:"LastEventTimestamp,omitempty"`
	DocumentInfo           *DocumentInfo           `protobuf:"bytes,4,opt,name=DocumentInfo" json:"DocumentInfo,omitempty"`
	Docflow                *Docflow                `protobuf:"bytes,5,opt,name=Docflow" json:"Docflow,omitempty"`
	InitialDocumentIds     []*DocumentId           `protobuf:"bytes,6,rep,name=InitialDocumentIds" json:"InitialDocumentIds,omitempty"`
	SubordinateDocumentIds []*DocumentId           `protobuf:"bytes,7,rep,name=SubordinateDocumentIds" json:"SubordinateDocumentIds,omitempty"`
	ForwardDocumentEvents  []*ForwardDocumentEvent `protobuf:"bytes,8,rep,name=ForwardDocumentEvents" json:"ForwardDocumentEvents,omitempty"`
}

func (x *DocumentWithDocflow) Reset() {
	*x = DocumentWithDocflow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[228]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DocumentWithDocflow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DocumentWithDocflow) ProtoMessage() {}

func (x *DocumentWithDocflow) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[228]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DocumentWithDocflow.ProtoReflect.Descriptor instead.
func (*DocumentWithDocflow) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{228}
}

func (x *DocumentWithDocflow) GetDocumentId() *DocumentId {
	if x != nil {
		return x.DocumentId
	}
	return nil
}

func (x *DocumentWithDocflow) GetLastEventId() string {
	if x != nil && x.LastEventId != nil {
		return *x.LastEventId
	}
	return ""
}

func (x *DocumentWithDocflow) GetLastEventTimestamp() *Timestamp {
	if x != nil {
		return x.LastEventTimestamp
	}
	return nil
}

func (x *DocumentWithDocflow) GetDocumentInfo() *DocumentInfo {
	if x != nil {
		return x.DocumentInfo
	}
	return nil
}

func (x *DocumentWithDocflow) GetDocflow() *Docflow {
	if x != nil {
		return x.Docflow
	}
	return nil
}

func (x *DocumentWithDocflow) GetInitialDocumentIds() []*DocumentId {
	if x != nil {
		return x.InitialDocumentIds
	}
	return nil
}

func (x *DocumentWithDocflow) GetSubordinateDocumentIds() []*DocumentId {
	if x != nil {
		return x.SubordinateDocumentIds
	}
	return nil
}

func (x *DocumentWithDocflow) GetForwardDocumentEvents() []*ForwardDocumentEvent {
	if x != nil {
		return x.ForwardDocumentEvents
	}
	return nil
}

type DocumentInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DocumentType                    *DocumentType                       `protobuf:"varint,1,opt,name=DocumentType,enum=DocumentType,def=-1" json:"DocumentType,omitempty"`
	DocumentDirection               *DocumentDirection                  `protobuf:"varint,2,opt,name=DocumentDirection,enum=DocumentDirection,def=0" json:"DocumentDirection,omitempty"`
	IsTest                          *bool                               `protobuf:"varint,3,opt,name=IsTest" json:"IsTest,omitempty"`
	CustomDocumentId                *string                             `protobuf:"bytes,4,opt,name=CustomDocumentId" json:"CustomDocumentId,omitempty"`
	FromDepartmentId                *string                             `protobuf:"bytes,5,opt,name=FromDepartmentId" json:"FromDepartmentId,omitempty"`
	ToDepartmentId                  *string                             `protobuf:"bytes,6,opt,name=ToDepartmentId" json:"ToDepartmentId,omitempty"`
	CounteragentBoxId               *string                             `protobuf:"bytes,7,opt,name=CounteragentBoxId" json:"CounteragentBoxId,omitempty"`
	DocumentDateAndNumber           *DocumentDateAndNumber              `protobuf:"bytes,8,opt,name=DocumentDateAndNumber" json:"DocumentDateAndNumber,omitempty"`
	BasicDocumentInfo               *BasicDocumentInfo                  `protobuf:"bytes,9,opt,name=BasicDocumentInfo" json:"BasicDocumentInfo,omitempty"`
	InvoiceInfo                     *InvoiceDocumentInfo                `protobuf:"bytes,10,opt,name=InvoiceInfo" json:"InvoiceInfo,omitempty"`
	InvoiceCorrectionInfo           *InvoiceCorrectionDocumentInfo      `protobuf:"bytes,11,opt,name=InvoiceCorrectionInfo" json:"InvoiceCorrectionInfo,omitempty"`
	PriceListInfo                   *PriceListDocumentInfo              `protobuf:"bytes,12,opt,name=PriceListInfo" json:"PriceListInfo,omitempty"`
	ContractInfo                    *ContractDocumentInfo               `protobuf:"bytes,13,opt,name=ContractInfo" json:"ContractInfo,omitempty"`
	SupplementaryAgreementInfo      *SupplementaryAgreementDocumentInfo `protobuf:"bytes,14,opt,name=SupplementaryAgreementInfo" json:"SupplementaryAgreementInfo,omitempty"`
	UniversalTransferDocumentInfo   *UniversalTransferDocumentInfo      `protobuf:"bytes,15,opt,name=UniversalTransferDocumentInfo" json:"UniversalTransferDocumentInfo,omitempty"`
	UniversalCorrectionDocumentInfo *UniversalCorrectionDocumentInfo    `protobuf:"bytes,16,opt,name=UniversalCorrectionDocumentInfo" json:"UniversalCorrectionDocumentInfo,omitempty"`
	AttachmentVersion               *string                             `protobuf:"bytes,17,opt,name=AttachmentVersion" json:"AttachmentVersion,omitempty"`
	Version                         *string                             `protobuf:"bytes,18,req,name=Version" json:"Version,omitempty"`
}

// Default values for DocumentInfo fields.
const (
	Default_DocumentInfo_DocumentType      = DocumentType_UnknownDocumentTypeDT
	Default_DocumentInfo_DocumentDirection = DocumentDirection_UnknownDocumentDirection
)

func (x *DocumentInfo) Reset() {
	*x = DocumentInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[229]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DocumentInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DocumentInfo) ProtoMessage() {}

func (x *DocumentInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[229]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DocumentInfo.ProtoReflect.Descriptor instead.
func (*DocumentInfo) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{229}
}

func (x *DocumentInfo) GetDocumentType() DocumentType {
	if x != nil && x.DocumentType != nil {
		return *x.DocumentType
	}
	return Default_DocumentInfo_DocumentType
}

func (x *DocumentInfo) GetDocumentDirection() DocumentDirection {
	if x != nil && x.DocumentDirection != nil {
		return *x.DocumentDirection
	}
	return Default_DocumentInfo_DocumentDirection
}

func (x *DocumentInfo) GetIsTest() bool {
	if x != nil && x.IsTest != nil {
		return *x.IsTest
	}
	return false
}

func (x *DocumentInfo) GetCustomDocumentId() string {
	if x != nil && x.CustomDocumentId != nil {
		return *x.CustomDocumentId
	}
	return ""
}

func (x *DocumentInfo) GetFromDepartmentId() string {
	if x != nil && x.FromDepartmentId != nil {
		return *x.FromDepartmentId
	}
	return ""
}

func (x *DocumentInfo) GetToDepartmentId() string {
	if x != nil && x.ToDepartmentId != nil {
		return *x.ToDepartmentId
	}
	return ""
}

func (x *DocumentInfo) GetCounteragentBoxId() string {
	if x != nil && x.CounteragentBoxId != nil {
		return *x.CounteragentBoxId
	}
	return ""
}

func (x *DocumentInfo) GetDocumentDateAndNumber() *DocumentDateAndNumber {
	if x != nil {
		return x.DocumentDateAndNumber
	}
	return nil
}

func (x *DocumentInfo) GetBasicDocumentInfo() *BasicDocumentInfo {
	if x != nil {
		return x.BasicDocumentInfo
	}
	return nil
}

func (x *DocumentInfo) GetInvoiceInfo() *InvoiceDocumentInfo {
	if x != nil {
		return x.InvoiceInfo
	}
	return nil
}

func (x *DocumentInfo) GetInvoiceCorrectionInfo() *InvoiceCorrectionDocumentInfo {
	if x != nil {
		return x.InvoiceCorrectionInfo
	}
	return nil
}

func (x *DocumentInfo) GetPriceListInfo() *PriceListDocumentInfo {
	if x != nil {
		return x.PriceListInfo
	}
	return nil
}

func (x *DocumentInfo) GetContractInfo() *ContractDocumentInfo {
	if x != nil {
		return x.ContractInfo
	}
	return nil
}

func (x *DocumentInfo) GetSupplementaryAgreementInfo() *SupplementaryAgreementDocumentInfo {
	if x != nil {
		return x.SupplementaryAgreementInfo
	}
	return nil
}

func (x *DocumentInfo) GetUniversalTransferDocumentInfo() *UniversalTransferDocumentInfo {
	if x != nil {
		return x.UniversalTransferDocumentInfo
	}
	return nil
}

func (x *DocumentInfo) GetUniversalCorrectionDocumentInfo() *UniversalCorrectionDocumentInfo {
	if x != nil {
		return x.UniversalCorrectionDocumentInfo
	}
	return nil
}

func (x *DocumentInfo) GetAttachmentVersion() string {
	if x != nil && x.AttachmentVersion != nil {
		return *x.AttachmentVersion
	}
	return ""
}

func (x *DocumentInfo) GetVersion() string {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return ""
}

type UniversalCorrectionDocumentInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalInc                                *string                `protobuf:"bytes,1,opt,name=TotalInc" json:"TotalInc,omitempty"`
	TotalDec                                *string                `protobuf:"bytes,2,opt,name=TotalDec" json:"TotalDec,omitempty"`
	VatInc                                  *string                `protobuf:"bytes,3,opt,name=VatInc" json:"VatInc,omitempty"`
	VatDec                                  *string                `protobuf:"bytes,4,opt,name=VatDec" json:"VatDec,omitempty"`
	CurrencyCode                            *int32                 `protobuf:"varint,5,opt,name=CurrencyCode" json:"CurrencyCode,omitempty"`
	Grounds                                 *string                `protobuf:"bytes,6,opt,name=Grounds" json:"Grounds,omitempty"`
	Function                                *FunctionType          `protobuf:"varint,7,req,name=Function,enum=FunctionType" json:"Function,omitempty"`
	OriginalDocumentDateAndNumber           *DocumentDateAndNumber `protobuf:"bytes,8,opt,name=OriginalDocumentDateAndNumber" json:"OriginalDocumentDateAndNumber,omitempty"`
	OriginalDocumentRevisionDateAndNumber   *DocumentDateAndNumber `protobuf:"bytes,9,opt,name=OriginalDocumentRevisionDateAndNumber" json:"OriginalDocumentRevisionDateAndNumber,omitempty"`
	OriginalDocumentCorrectionDateAndNumber *DocumentDateAndNumber `protobuf:"bytes,10,opt,name=OriginalDocumentCorrectionDateAndNumber" json:"OriginalDocumentCorrectionDateAndNumber,omitempty"`
}

func (x *UniversalCorrectionDocumentInfo) Reset() {
	*x = UniversalCorrectionDocumentInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[230]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UniversalCorrectionDocumentInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UniversalCorrectionDocumentInfo) ProtoMessage() {}

func (x *UniversalCorrectionDocumentInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[230]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UniversalCorrectionDocumentInfo.ProtoReflect.Descriptor instead.
func (*UniversalCorrectionDocumentInfo) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{230}
}

func (x *UniversalCorrectionDocumentInfo) GetTotalInc() string {
	if x != nil && x.TotalInc != nil {
		return *x.TotalInc
	}
	return ""
}

func (x *UniversalCorrectionDocumentInfo) GetTotalDec() string {
	if x != nil && x.TotalDec != nil {
		return *x.TotalDec
	}
	return ""
}

func (x *UniversalCorrectionDocumentInfo) GetVatInc() string {
	if x != nil && x.VatInc != nil {
		return *x.VatInc
	}
	return ""
}

func (x *UniversalCorrectionDocumentInfo) GetVatDec() string {
	if x != nil && x.VatDec != nil {
		return *x.VatDec
	}
	return ""
}

func (x *UniversalCorrectionDocumentInfo) GetCurrencyCode() int32 {
	if x != nil && x.CurrencyCode != nil {
		return *x.CurrencyCode
	}
	return 0
}

func (x *UniversalCorrectionDocumentInfo) GetGrounds() string {
	if x != nil && x.Grounds != nil {
		return *x.Grounds
	}
	return ""
}

func (x *UniversalCorrectionDocumentInfo) GetFunction() FunctionType {
	if x != nil && x.Function != nil {
		return *x.Function
	}
	return FunctionType_Invoice
}

func (x *UniversalCorrectionDocumentInfo) GetOriginalDocumentDateAndNumber() *DocumentDateAndNumber {
	if x != nil {
		return x.OriginalDocumentDateAndNumber
	}
	return nil
}

func (x *UniversalCorrectionDocumentInfo) GetOriginalDocumentRevisionDateAndNumber() *DocumentDateAndNumber {
	if x != nil {
		return x.OriginalDocumentRevisionDateAndNumber
	}
	return nil
}

func (x *UniversalCorrectionDocumentInfo) GetOriginalDocumentCorrectionDateAndNumber() *DocumentDateAndNumber {
	if x != nil {
		return x.OriginalDocumentCorrectionDateAndNumber
	}
	return nil
}

type UniversalTransferDocumentInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total                         *string                `protobuf:"bytes,1,opt,name=Total" json:"Total,omitempty"`
	Vat                           *string                `protobuf:"bytes,2,opt,name=Vat" json:"Vat,omitempty"`
	CurrencyCode                  *int32                 `protobuf:"varint,3,opt,name=CurrencyCode" json:"CurrencyCode,omitempty"`
	Grounds                       *string                `protobuf:"bytes,4,opt,name=Grounds" json:"Grounds,omitempty"`
	Function                      *FunctionType          `protobuf:"varint,5,req,name=Function,enum=FunctionType" json:"Function,omitempty"`
	OriginalDocumentDateAndNumber *DocumentDateAndNumber `protobuf:"bytes,6,opt,name=OriginalDocumentDateAndNumber" json:"OriginalDocumentDateAndNumber,omitempty"`
}

func (x *UniversalTransferDocumentInfo) Reset() {
	*x = UniversalTransferDocumentInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[231]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UniversalTransferDocumentInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UniversalTransferDocumentInfo) ProtoMessage() {}

func (x *UniversalTransferDocumentInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[231]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UniversalTransferDocumentInfo.ProtoReflect.Descriptor instead.
func (*UniversalTransferDocumentInfo) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{231}
}

func (x *UniversalTransferDocumentInfo) GetTotal() string {
	if x != nil && x.Total != nil {
		return *x.Total
	}
	return ""
}

func (x *UniversalTransferDocumentInfo) GetVat() string {
	if x != nil && x.Vat != nil {
		return *x.Vat
	}
	return ""
}

func (x *UniversalTransferDocumentInfo) GetCurrencyCode() int32 {
	if x != nil && x.CurrencyCode != nil {
		return *x.CurrencyCode
	}
	return 0
}

func (x *UniversalTransferDocumentInfo) GetGrounds() string {
	if x != nil && x.Grounds != nil {
		return *x.Grounds
	}
	return ""
}

func (x *UniversalTransferDocumentInfo) GetFunction() FunctionType {
	if x != nil && x.Function != nil {
		return *x.Function
	}
	return FunctionType_Invoice
}

func (x *UniversalTransferDocumentInfo) GetOriginalDocumentDateAndNumber() *DocumentDateAndNumber {
	if x != nil {
		return x.OriginalDocumentDateAndNumber
	}
	return nil
}

type ContractDocumentInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContractPrice *string `protobuf:"bytes,1,opt,name=ContractPrice" json:"ContractPrice,omitempty"`
	ContractType  *string `protobuf:"bytes,2,opt,name=ContractType" json:"ContractType,omitempty"`
}

func (x *ContractDocumentInfo) Reset() {
	*x = ContractDocumentInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[232]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContractDocumentInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContractDocumentInfo) ProtoMessage() {}

func (x *ContractDocumentInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[232]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContractDocumentInfo.ProtoReflect.Descriptor instead.
func (*ContractDocumentInfo) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{232}
}

func (x *ContractDocumentInfo) GetContractPrice() string {
	if x != nil && x.ContractPrice != nil {
		return *x.ContractPrice
	}
	return ""
}

func (x *ContractDocumentInfo) GetContractType() string {
	if x != nil && x.ContractType != nil {
		return *x.ContractType
	}
	return ""
}

type SupplementaryAgreementDocumentInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContractType                  *string                `protobuf:"bytes,1,opt,name=ContractType" json:"ContractType,omitempty"`
	ContractDocumentDateAndNumber *DocumentDateAndNumber `protobuf:"bytes,2,req,name=ContractDocumentDateAndNumber" json:"ContractDocumentDateAndNumber,omitempty"`
	DocumentDateAndNumber         *DocumentDateAndNumber `protobuf:"bytes,3,req,name=DocumentDateAndNumber" json:"DocumentDateAndNumber,omitempty"`
	Total                         *string                `protobuf:"bytes,4,opt,name=Total" json:"Total,omitempty"`
}

func (x *SupplementaryAgreementDocumentInfo) Reset() {
	*x = SupplementaryAgreementDocumentInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[233]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SupplementaryAgreementDocumentInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SupplementaryAgreementDocumentInfo) ProtoMessage() {}

func (x *SupplementaryAgreementDocumentInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[233]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SupplementaryAgreementDocumentInfo.ProtoReflect.Descriptor instead.
func (*SupplementaryAgreementDocumentInfo) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{233}
}

func (x *SupplementaryAgreementDocumentInfo) GetContractType() string {
	if x != nil && x.ContractType != nil {
		return *x.ContractType
	}
	return ""
}

func (x *SupplementaryAgreementDocumentInfo) GetContractDocumentDateAndNumber() *DocumentDateAndNumber {
	if x != nil {
		return x.ContractDocumentDateAndNumber
	}
	return nil
}

func (x *SupplementaryAgreementDocumentInfo) GetDocumentDateAndNumber() *DocumentDateAndNumber {
	if x != nil {
		return x.DocumentDateAndNumber
	}
	return nil
}

func (x *SupplementaryAgreementDocumentInfo) GetTotal() string {
	if x != nil && x.Total != nil {
		return *x.Total
	}
	return ""
}

type PriceListDocumentInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PriceListEffectiveDate        *string                `protobuf:"bytes,1,opt,name=PriceListEffectiveDate" json:"PriceListEffectiveDate,omitempty"`
	ContractDocumentDateAndNumber *DocumentDateAndNumber `protobuf:"bytes,2,opt,name=ContractDocumentDateAndNumber" json:"ContractDocumentDateAndNumber,omitempty"`
}

func (x *PriceListDocumentInfo) Reset() {
	*x = PriceListDocumentInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[234]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PriceListDocumentInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PriceListDocumentInfo) ProtoMessage() {}

func (x *PriceListDocumentInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[234]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PriceListDocumentInfo.ProtoReflect.Descriptor instead.
func (*PriceListDocumentInfo) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{234}
}

func (x *PriceListDocumentInfo) GetPriceListEffectiveDate() string {
	if x != nil && x.PriceListEffectiveDate != nil {
		return *x.PriceListEffectiveDate
	}
	return ""
}

func (x *PriceListDocumentInfo) GetContractDocumentDateAndNumber() *DocumentDateAndNumber {
	if x != nil {
		return x.ContractDocumentDateAndNumber
	}
	return nil
}

type InvoiceDocumentInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total                        *string                `protobuf:"bytes,1,opt,name=Total" json:"Total,omitempty"`
	Vat                          *string                `protobuf:"bytes,2,opt,name=Vat" json:"Vat,omitempty"`
	CurrencyCode                 *int32                 `protobuf:"varint,3,opt,name=CurrencyCode" json:"CurrencyCode,omitempty"`
	OriginalInvoiceDateAndNumber *DocumentDateAndNumber `protobuf:"bytes,4,opt,name=OriginalInvoiceDateAndNumber" json:"OriginalInvoiceDateAndNumber,omitempty"`
}

func (x *InvoiceDocumentInfo) Reset() {
	*x = InvoiceDocumentInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[235]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InvoiceDocumentInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InvoiceDocumentInfo) ProtoMessage() {}

func (x *InvoiceDocumentInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[235]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InvoiceDocumentInfo.ProtoReflect.Descriptor instead.
func (*InvoiceDocumentInfo) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{235}
}

func (x *InvoiceDocumentInfo) GetTotal() string {
	if x != nil && x.Total != nil {
		return *x.Total
	}
	return ""
}

func (x *InvoiceDocumentInfo) GetVat() string {
	if x != nil && x.Vat != nil {
		return *x.Vat
	}
	return ""
}

func (x *InvoiceDocumentInfo) GetCurrencyCode() int32 {
	if x != nil && x.CurrencyCode != nil {
		return *x.CurrencyCode
	}
	return 0
}

func (x *InvoiceDocumentInfo) GetOriginalInvoiceDateAndNumber() *DocumentDateAndNumber {
	if x != nil {
		return x.OriginalInvoiceDateAndNumber
	}
	return nil
}

type InvoiceCorrectionDocumentInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalInc                               *string                `protobuf:"bytes,1,opt,name=TotalInc" json:"TotalInc,omitempty"`
	TotalDec                               *string                `protobuf:"bytes,2,opt,name=TotalDec" json:"TotalDec,omitempty"`
	VatInc                                 *string                `protobuf:"bytes,3,opt,name=VatInc" json:"VatInc,omitempty"`
	VatDec                                 *string                `protobuf:"bytes,4,opt,name=VatDec" json:"VatDec,omitempty"`
	CurrencyCode                           *int32                 `protobuf:"varint,5,opt,name=CurrencyCode" json:"CurrencyCode,omitempty"`
	OriginalInvoiceDateAndNumber           *DocumentDateAndNumber `protobuf:"bytes,6,opt,name=OriginalInvoiceDateAndNumber" json:"OriginalInvoiceDateAndNumber,omitempty"`
	OriginalInvoiceRevisionDateAndNumber   *DocumentDateAndNumber `protobuf:"bytes,7,opt,name=OriginalInvoiceRevisionDateAndNumber" json:"OriginalInvoiceRevisionDateAndNumber,omitempty"`
	OriginalInvoiceCorrectionDateAndNumber *DocumentDateAndNumber `protobuf:"bytes,8,opt,name=OriginalInvoiceCorrectionDateAndNumber" json:"OriginalInvoiceCorrectionDateAndNumber,omitempty"`
}

func (x *InvoiceCorrectionDocumentInfo) Reset() {
	*x = InvoiceCorrectionDocumentInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[236]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InvoiceCorrectionDocumentInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InvoiceCorrectionDocumentInfo) ProtoMessage() {}

func (x *InvoiceCorrectionDocumentInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[236]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InvoiceCorrectionDocumentInfo.ProtoReflect.Descriptor instead.
func (*InvoiceCorrectionDocumentInfo) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{236}
}

func (x *InvoiceCorrectionDocumentInfo) GetTotalInc() string {
	if x != nil && x.TotalInc != nil {
		return *x.TotalInc
	}
	return ""
}

func (x *InvoiceCorrectionDocumentInfo) GetTotalDec() string {
	if x != nil && x.TotalDec != nil {
		return *x.TotalDec
	}
	return ""
}

func (x *InvoiceCorrectionDocumentInfo) GetVatInc() string {
	if x != nil && x.VatInc != nil {
		return *x.VatInc
	}
	return ""
}

func (x *InvoiceCorrectionDocumentInfo) GetVatDec() string {
	if x != nil && x.VatDec != nil {
		return *x.VatDec
	}
	return ""
}

func (x *InvoiceCorrectionDocumentInfo) GetCurrencyCode() int32 {
	if x != nil && x.CurrencyCode != nil {
		return *x.CurrencyCode
	}
	return 0
}

func (x *InvoiceCorrectionDocumentInfo) GetOriginalInvoiceDateAndNumber() *DocumentDateAndNumber {
	if x != nil {
		return x.OriginalInvoiceDateAndNumber
	}
	return nil
}

func (x *InvoiceCorrectionDocumentInfo) GetOriginalInvoiceRevisionDateAndNumber() *DocumentDateAndNumber {
	if x != nil {
		return x.OriginalInvoiceRevisionDateAndNumber
	}
	return nil
}

func (x *InvoiceCorrectionDocumentInfo) GetOriginalInvoiceCorrectionDateAndNumber() *DocumentDateAndNumber {
	if x != nil {
		return x.OriginalInvoiceCorrectionDateAndNumber
	}
	return nil
}

type BasicDocumentInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total   *string `protobuf:"bytes,1,opt,name=Total" json:"Total,omitempty"`
	NoVat   *bool   `protobuf:"varint,2,opt,name=NoVat" json:"NoVat,omitempty"`
	Vat     *string `protobuf:"bytes,3,opt,name=Vat" json:"Vat,omitempty"`
	Grounds *string `protobuf:"bytes,4,opt,name=Grounds" json:"Grounds,omitempty"`
}

func (x *BasicDocumentInfo) Reset() {
	*x = BasicDocumentInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[237]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BasicDocumentInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BasicDocumentInfo) ProtoMessage() {}

func (x *BasicDocumentInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[237]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BasicDocumentInfo.ProtoReflect.Descriptor instead.
func (*BasicDocumentInfo) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{237}
}

func (x *BasicDocumentInfo) GetTotal() string {
	if x != nil && x.Total != nil {
		return *x.Total
	}
	return ""
}

func (x *BasicDocumentInfo) GetNoVat() bool {
	if x != nil && x.NoVat != nil {
		return *x.NoVat
	}
	return false
}

func (x *BasicDocumentInfo) GetVat() string {
	if x != nil && x.Vat != nil {
		return *x.Vat
	}
	return ""
}

func (x *BasicDocumentInfo) GetGrounds() string {
	if x != nil && x.Grounds != nil {
		return *x.Grounds
	}
	return ""
}

type Docflow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsFinished                               *bool                                     `protobuf:"varint,1,opt,name=IsFinished" json:"IsFinished,omitempty"`
	DocumentAttachment                       *SignedAttachment                         `protobuf:"bytes,2,opt,name=DocumentAttachment" json:"DocumentAttachment,omitempty"`
	DepartmentId                             *string                                   `protobuf:"bytes,3,opt,name=DepartmentId" json:"DepartmentId,omitempty"`
	DocumentIsDeleted                        *bool                                     `protobuf:"varint,4,opt,name=DocumentIsDeleted" json:"DocumentIsDeleted,omitempty"`
	DocflowStatus                            *DocflowStatus                            `protobuf:"bytes,5,opt,name=DocflowStatus" json:"DocflowStatus,omitempty"`
	SendTimestamp                            *Timestamp                                `protobuf:"bytes,6,opt,name=SendTimestamp" json:"SendTimestamp,omitempty"`
	DeliveryTimestamp                        *Timestamp                                `protobuf:"bytes,7,opt,name=DeliveryTimestamp" json:"DeliveryTimestamp,omitempty"`
	InboundInvoiceDocflow                    *InboundInvoiceDocflow                    `protobuf:"bytes,8,opt,name=InboundInvoiceDocflow" json:"InboundInvoiceDocflow,omitempty"`
	OutboundInvoiceDocflow                   *OutboundInvoiceDocflow                   `protobuf:"bytes,9,opt,name=OutboundInvoiceDocflow" json:"OutboundInvoiceDocflow,omitempty"`
	XmlBilateralDocflow                      *XmlBilateralDocflow                      `protobuf:"bytes,10,opt,name=XmlBilateralDocflow" json:"XmlBilateralDocflow,omitempty"`
	BilateralDocflow                         *BilateralDocflow                         `protobuf:"bytes,11,opt,name=BilateralDocflow" json:"BilateralDocflow,omitempty"`
	UnilateralDocflow                        *UnilateralDocflow                        `protobuf:"bytes,12,opt,name=UnilateralDocflow" json:"UnilateralDocflow,omitempty"`
	RevocationDocflow                        *RevocationDocflow                        `protobuf:"bytes,13,opt,name=RevocationDocflow" json:"RevocationDocflow,omitempty"`
	ResolutionDocflow                        *ResolutionDocflow                        `protobuf:"bytes,14,opt,name=ResolutionDocflow" json:"ResolutionDocflow,omitempty"`
	CanDocumentBeRevokedUnilaterallyBySender *bool                                     `protobuf:"varint,15,opt,name=CanDocumentBeRevokedUnilaterallyBySender" json:"CanDocumentBeRevokedUnilaterallyBySender,omitempty"`
	PacketId                                 *string                                   `protobuf:"bytes,16,opt,name=PacketId" json:"PacketId,omitempty"`
	CustomData                               []*CustomDataItem                         `protobuf:"bytes,17,rep,name=CustomData" json:"CustomData,omitempty"`
	InboundUniversalTransferDocumentDocflow  *InboundUniversalTransferDocumentDocflow  `protobuf:"bytes,18,opt,name=InboundUniversalTransferDocumentDocflow" json:"InboundUniversalTransferDocumentDocflow,omitempty"`
	OutboundUniversalTransferDocumentDocflow *OutboundUniversalTransferDocumentDocflow `protobuf:"bytes,19,opt,name=OutboundUniversalTransferDocumentDocflow" json:"OutboundUniversalTransferDocumentDocflow,omitempty"`
	RoamingNotification                      *RoamingNotification                      `protobuf:"bytes,20,opt,name=RoamingNotification" json:"RoamingNotification,omitempty"`
}

func (x *Docflow) Reset() {
	*x = Docflow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[238]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Docflow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Docflow) ProtoMessage() {}

func (x *Docflow) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[238]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Docflow.ProtoReflect.Descriptor instead.
func (*Docflow) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{238}
}

func (x *Docflow) GetIsFinished() bool {
	if x != nil && x.IsFinished != nil {
		return *x.IsFinished
	}
	return false
}

func (x *Docflow) GetDocumentAttachment() *SignedAttachment {
	if x != nil {
		return x.DocumentAttachment
	}
	return nil
}

func (x *Docflow) GetDepartmentId() string {
	if x != nil && x.DepartmentId != nil {
		return *x.DepartmentId
	}
	return ""
}

func (x *Docflow) GetDocumentIsDeleted() bool {
	if x != nil && x.DocumentIsDeleted != nil {
		return *x.DocumentIsDeleted
	}
	return false
}

func (x *Docflow) GetDocflowStatus() *DocflowStatus {
	if x != nil {
		return x.DocflowStatus
	}
	return nil
}

func (x *Docflow) GetSendTimestamp() *Timestamp {
	if x != nil {
		return x.SendTimestamp
	}
	return nil
}

func (x *Docflow) GetDeliveryTimestamp() *Timestamp {
	if x != nil {
		return x.DeliveryTimestamp
	}
	return nil
}

func (x *Docflow) GetInboundInvoiceDocflow() *InboundInvoiceDocflow {
	if x != nil {
		return x.InboundInvoiceDocflow
	}
	return nil
}

func (x *Docflow) GetOutboundInvoiceDocflow() *OutboundInvoiceDocflow {
	if x != nil {
		return x.OutboundInvoiceDocflow
	}
	return nil
}

func (x *Docflow) GetXmlBilateralDocflow() *XmlBilateralDocflow {
	if x != nil {
		return x.XmlBilateralDocflow
	}
	return nil
}

func (x *Docflow) GetBilateralDocflow() *BilateralDocflow {
	if x != nil {
		return x.BilateralDocflow
	}
	return nil
}

func (x *Docflow) GetUnilateralDocflow() *UnilateralDocflow {
	if x != nil {
		return x.UnilateralDocflow
	}
	return nil
}

func (x *Docflow) GetRevocationDocflow() *RevocationDocflow {
	if x != nil {
		return x.RevocationDocflow
	}
	return nil
}

func (x *Docflow) GetResolutionDocflow() *ResolutionDocflow {
	if x != nil {
		return x.ResolutionDocflow
	}
	return nil
}

func (x *Docflow) GetCanDocumentBeRevokedUnilaterallyBySender() bool {
	if x != nil && x.CanDocumentBeRevokedUnilaterallyBySender != nil {
		return *x.CanDocumentBeRevokedUnilaterallyBySender
	}
	return false
}

func (x *Docflow) GetPacketId() string {
	if x != nil && x.PacketId != nil {
		return *x.PacketId
	}
	return ""
}

func (x *Docflow) GetCustomData() []*CustomDataItem {
	if x != nil {
		return x.CustomData
	}
	return nil
}

func (x *Docflow) GetInboundUniversalTransferDocumentDocflow() *InboundUniversalTransferDocumentDocflow {
	if x != nil {
		return x.InboundUniversalTransferDocumentDocflow
	}
	return nil
}

func (x *Docflow) GetOutboundUniversalTransferDocumentDocflow() *OutboundUniversalTransferDocumentDocflow {
	if x != nil {
		return x.OutboundUniversalTransferDocumentDocflow
	}
	return nil
}

func (x *Docflow) GetRoamingNotification() *RoamingNotification {
	if x != nil {
		return x.RoamingNotification
	}
	return nil
}

type ResolutionDocflow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ResolutionDocflow) Reset() {
	*x = ResolutionDocflow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[239]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResolutionDocflow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResolutionDocflow) ProtoMessage() {}

func (x *ResolutionDocflow) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[239]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResolutionDocflow.ProtoReflect.Descriptor instead.
func (*ResolutionDocflow) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{239}
}

type RevocationDocflow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsFinished                         *bool                               `protobuf:"varint,1,opt,name=IsFinished" json:"IsFinished,omitempty"`
	RevocationRequestAttachment        *SignedAttachment                   `protobuf:"bytes,2,opt,name=RevocationRequestAttachment" json:"RevocationRequestAttachment,omitempty"`
	RecipientSignatureDocflow          *RecipientSignatureDocflow          `protobuf:"bytes,3,opt,name=RecipientSignatureDocflow" json:"RecipientSignatureDocflow,omitempty"`
	RecipientSignatureRejectionDocflow *RecipientSignatureRejectionDocflow `protobuf:"bytes,4,opt,name=RecipientSignatureRejectionDocflow" json:"RecipientSignatureRejectionDocflow,omitempty"`
	InitiatorBoxId                     *string                             `protobuf:"bytes,5,opt,name=InitiatorBoxId" json:"InitiatorBoxId,omitempty"`
	IsRevocationAccepted               *bool                               `protobuf:"varint,6,opt,name=IsRevocationAccepted" json:"IsRevocationAccepted,omitempty"`
	IsRevocationRejected               *bool                               `protobuf:"varint,7,opt,name=IsRevocationRejected" json:"IsRevocationRejected,omitempty"`
}

func (x *RevocationDocflow) Reset() {
	*x = RevocationDocflow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[240]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RevocationDocflow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RevocationDocflow) ProtoMessage() {}

func (x *RevocationDocflow) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[240]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RevocationDocflow.ProtoReflect.Descriptor instead.
func (*RevocationDocflow) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{240}
}

func (x *RevocationDocflow) GetIsFinished() bool {
	if x != nil && x.IsFinished != nil {
		return *x.IsFinished
	}
	return false
}

func (x *RevocationDocflow) GetRevocationRequestAttachment() *SignedAttachment {
	if x != nil {
		return x.RevocationRequestAttachment
	}
	return nil
}

func (x *RevocationDocflow) GetRecipientSignatureDocflow() *RecipientSignatureDocflow {
	if x != nil {
		return x.RecipientSignatureDocflow
	}
	return nil
}

func (x *RevocationDocflow) GetRecipientSignatureRejectionDocflow() *RecipientSignatureRejectionDocflow {
	if x != nil {
		return x.RecipientSignatureRejectionDocflow
	}
	return nil
}

func (x *RevocationDocflow) GetInitiatorBoxId() string {
	if x != nil && x.InitiatorBoxId != nil {
		return *x.InitiatorBoxId
	}
	return ""
}

func (x *RevocationDocflow) GetIsRevocationAccepted() bool {
	if x != nil && x.IsRevocationAccepted != nil {
		return *x.IsRevocationAccepted
	}
	return false
}

func (x *RevocationDocflow) GetIsRevocationRejected() bool {
	if x != nil && x.IsRevocationRejected != nil {
		return *x.IsRevocationRejected
	}
	return false
}

type RecipientSignatureRejectionDocflow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsFinished                            *bool             `protobuf:"varint,1,opt,name=IsFinished" json:"IsFinished,omitempty"`
	RecipientSignatureRejectionAttachment *SignedAttachment `protobuf:"bytes,2,opt,name=RecipientSignatureRejectionAttachment" json:"RecipientSignatureRejectionAttachment,omitempty"`
	DeliveryTimestamp                     *Timestamp        `protobuf:"bytes,3,opt,name=DeliveryTimestamp" json:"DeliveryTimestamp,omitempty"`
}

func (x *RecipientSignatureRejectionDocflow) Reset() {
	*x = RecipientSignatureRejectionDocflow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[241]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecipientSignatureRejectionDocflow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecipientSignatureRejectionDocflow) ProtoMessage() {}

func (x *RecipientSignatureRejectionDocflow) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[241]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecipientSignatureRejectionDocflow.ProtoReflect.Descriptor instead.
func (*RecipientSignatureRejectionDocflow) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{241}
}

func (x *RecipientSignatureRejectionDocflow) GetIsFinished() bool {
	if x != nil && x.IsFinished != nil {
		return *x.IsFinished
	}
	return false
}

func (x *RecipientSignatureRejectionDocflow) GetRecipientSignatureRejectionAttachment() *SignedAttachment {
	if x != nil {
		return x.RecipientSignatureRejectionAttachment
	}
	return nil
}

func (x *RecipientSignatureRejectionDocflow) GetDeliveryTimestamp() *Timestamp {
	if x != nil {
		return x.DeliveryTimestamp
	}
	return nil
}

type RecipientSignatureDocflow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsFinished         *bool      `protobuf:"varint,1,opt,name=IsFinished" json:"IsFinished,omitempty"`
	RecipientSignature *Signature `protobuf:"bytes,2,opt,name=RecipientSignature" json:"RecipientSignature,omitempty"`
	DeliveryTimestamp  *Timestamp `protobuf:"bytes,3,opt,name=DeliveryTimestamp" json:"DeliveryTimestamp,omitempty"`
}

func (x *RecipientSignatureDocflow) Reset() {
	*x = RecipientSignatureDocflow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[242]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecipientSignatureDocflow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecipientSignatureDocflow) ProtoMessage() {}

func (x *RecipientSignatureDocflow) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[242]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecipientSignatureDocflow.ProtoReflect.Descriptor instead.
func (*RecipientSignatureDocflow) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{242}
}

func (x *RecipientSignatureDocflow) GetIsFinished() bool {
	if x != nil && x.IsFinished != nil {
		return *x.IsFinished
	}
	return false
}

func (x *RecipientSignatureDocflow) GetRecipientSignature() *Signature {
	if x != nil {
		return x.RecipientSignature
	}
	return nil
}

func (x *RecipientSignatureDocflow) GetDeliveryTimestamp() *Timestamp {
	if x != nil {
		return x.DeliveryTimestamp
	}
	return nil
}

type ReceiptDocflow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsFinished        *bool             `protobuf:"varint,1,opt,name=IsFinished" json:"IsFinished,omitempty"`
	ReceiptAttachment *SignedAttachment `protobuf:"bytes,2,opt,name=ReceiptAttachment" json:"ReceiptAttachment,omitempty"`
}

func (x *ReceiptDocflow) Reset() {
	*x = ReceiptDocflow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[243]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReceiptDocflow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReceiptDocflow) ProtoMessage() {}

func (x *ReceiptDocflow) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[243]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReceiptDocflow.ProtoReflect.Descriptor instead.
func (*ReceiptDocflow) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{243}
}

func (x *ReceiptDocflow) GetIsFinished() bool {
	if x != nil && x.IsFinished != nil {
		return *x.IsFinished
	}
	return false
}

func (x *ReceiptDocflow) GetReceiptAttachment() *SignedAttachment {
	if x != nil {
		return x.ReceiptAttachment
	}
	return nil
}

type UnilateralDocflow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsFinished                  *bool           `protobuf:"varint,1,opt,name=IsFinished" json:"IsFinished,omitempty"`
	ReceiptDocflow              *ReceiptDocflow `protobuf:"bytes,2,opt,name=ReceiptDocflow" json:"ReceiptDocflow,omitempty"`
	IsReceiptRequested          *bool           `protobuf:"varint,3,opt,name=IsReceiptRequested" json:"IsReceiptRequested,omitempty"`
	CanDocumentBeReceipted      *bool           `protobuf:"varint,4,opt,name=CanDocumentBeReceipted" json:"CanDocumentBeReceipted,omitempty"`
	CanDocumentBeSignedBySender *bool           `protobuf:"varint,5,opt,name=CanDocumentBeSignedBySender" json:"CanDocumentBeSignedBySender,omitempty"`
}

func (x *UnilateralDocflow) Reset() {
	*x = UnilateralDocflow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[244]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnilateralDocflow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnilateralDocflow) ProtoMessage() {}

func (x *UnilateralDocflow) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[244]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnilateralDocflow.ProtoReflect.Descriptor instead.
func (*UnilateralDocflow) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{244}
}

func (x *UnilateralDocflow) GetIsFinished() bool {
	if x != nil && x.IsFinished != nil {
		return *x.IsFinished
	}
	return false
}

func (x *UnilateralDocflow) GetReceiptDocflow() *ReceiptDocflow {
	if x != nil {
		return x.ReceiptDocflow
	}
	return nil
}

func (x *UnilateralDocflow) GetIsReceiptRequested() bool {
	if x != nil && x.IsReceiptRequested != nil {
		return *x.IsReceiptRequested
	}
	return false
}

func (x *UnilateralDocflow) GetCanDocumentBeReceipted() bool {
	if x != nil && x.CanDocumentBeReceipted != nil {
		return *x.CanDocumentBeReceipted
	}
	return false
}

func (x *UnilateralDocflow) GetCanDocumentBeSignedBySender() bool {
	if x != nil && x.CanDocumentBeSignedBySender != nil {
		return *x.CanDocumentBeSignedBySender
	}
	return false
}

type XmlBilateralDocflow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsFinished                               *bool                               `protobuf:"varint,1,opt,name=IsFinished" json:"IsFinished,omitempty"`
	ReceiptDocflow                           *ReceiptDocflow                     `protobuf:"bytes,2,opt,name=ReceiptDocflow" json:"ReceiptDocflow,omitempty"`
	BuyerTitleDocflow                        *BuyerTitleDocflow                  `protobuf:"bytes,3,opt,name=BuyerTitleDocflow" json:"BuyerTitleDocflow,omitempty"`
	RecipientSignatureRejectionDocflow       *RecipientSignatureRejectionDocflow `protobuf:"bytes,4,opt,name=RecipientSignatureRejectionDocflow" json:"RecipientSignatureRejectionDocflow,omitempty"`
	IsReceiptRequested                       *bool                               `protobuf:"varint,5,opt,name=IsReceiptRequested" json:"IsReceiptRequested,omitempty"`
	IsDocumentSignedByRecipient              *bool                               `protobuf:"varint,6,opt,name=IsDocumentSignedByRecipient" json:"IsDocumentSignedByRecipient,omitempty"`
	IsDocumentRejectedByRecipient            *bool                               `protobuf:"varint,7,opt,name=IsDocumentRejectedByRecipient" json:"IsDocumentRejectedByRecipient,omitempty"`
	CanDocumentBeReceipted                   *bool                               `protobuf:"varint,8,opt,name=CanDocumentBeReceipted" json:"CanDocumentBeReceipted,omitempty"`
	CanDocumentBeSignedBySender              *bool                               `protobuf:"varint,9,opt,name=CanDocumentBeSignedBySender" json:"CanDocumentBeSignedBySender,omitempty"`
	CanDocumentBeSignedOrRejectedByRecipient *bool                               `protobuf:"varint,10,opt,name=CanDocumentBeSignedOrRejectedByRecipient" json:"CanDocumentBeSignedOrRejectedByRecipient,omitempty"`
}

func (x *XmlBilateralDocflow) Reset() {
	*x = XmlBilateralDocflow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[245]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *XmlBilateralDocflow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*XmlBilateralDocflow) ProtoMessage() {}

func (x *XmlBilateralDocflow) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[245]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use XmlBilateralDocflow.ProtoReflect.Descriptor instead.
func (*XmlBilateralDocflow) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{245}
}

func (x *XmlBilateralDocflow) GetIsFinished() bool {
	if x != nil && x.IsFinished != nil {
		return *x.IsFinished
	}
	return false
}

func (x *XmlBilateralDocflow) GetReceiptDocflow() *ReceiptDocflow {
	if x != nil {
		return x.ReceiptDocflow
	}
	return nil
}

func (x *XmlBilateralDocflow) GetBuyerTitleDocflow() *BuyerTitleDocflow {
	if x != nil {
		return x.BuyerTitleDocflow
	}
	return nil
}

func (x *XmlBilateralDocflow) GetRecipientSignatureRejectionDocflow() *RecipientSignatureRejectionDocflow {
	if x != nil {
		return x.RecipientSignatureRejectionDocflow
	}
	return nil
}

func (x *XmlBilateralDocflow) GetIsReceiptRequested() bool {
	if x != nil && x.IsReceiptRequested != nil {
		return *x.IsReceiptRequested
	}
	return false
}

func (x *XmlBilateralDocflow) GetIsDocumentSignedByRecipient() bool {
	if x != nil && x.IsDocumentSignedByRecipient != nil {
		return *x.IsDocumentSignedByRecipient
	}
	return false
}

func (x *XmlBilateralDocflow) GetIsDocumentRejectedByRecipient() bool {
	if x != nil && x.IsDocumentRejectedByRecipient != nil {
		return *x.IsDocumentRejectedByRecipient
	}
	return false
}

func (x *XmlBilateralDocflow) GetCanDocumentBeReceipted() bool {
	if x != nil && x.CanDocumentBeReceipted != nil {
		return *x.CanDocumentBeReceipted
	}
	return false
}

func (x *XmlBilateralDocflow) GetCanDocumentBeSignedBySender() bool {
	if x != nil && x.CanDocumentBeSignedBySender != nil {
		return *x.CanDocumentBeSignedBySender
	}
	return false
}

func (x *XmlBilateralDocflow) GetCanDocumentBeSignedOrRejectedByRecipient() bool {
	if x != nil && x.CanDocumentBeSignedOrRejectedByRecipient != nil {
		return *x.CanDocumentBeSignedOrRejectedByRecipient
	}
	return false
}

type BuyerTitleDocflow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsFinished           *bool             `protobuf:"varint,1,opt,name=IsFinished" json:"IsFinished,omitempty"`
	BuyerTitleAttachment *SignedAttachment `protobuf:"bytes,2,opt,name=BuyerTitleAttachment" json:"BuyerTitleAttachment,omitempty"`
	SendTimestamp        *Timestamp        `protobuf:"bytes,3,opt,name=SendTimestamp" json:"SendTimestamp,omitempty"`
	DeliveryTimestamp    *Timestamp        `protobuf:"bytes,4,opt,name=DeliveryTimestamp" json:"DeliveryTimestamp,omitempty"`
}

func (x *BuyerTitleDocflow) Reset() {
	*x = BuyerTitleDocflow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[246]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuyerTitleDocflow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuyerTitleDocflow) ProtoMessage() {}

func (x *BuyerTitleDocflow) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[246]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuyerTitleDocflow.ProtoReflect.Descriptor instead.
func (*BuyerTitleDocflow) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{246}
}

func (x *BuyerTitleDocflow) GetIsFinished() bool {
	if x != nil && x.IsFinished != nil {
		return *x.IsFinished
	}
	return false
}

func (x *BuyerTitleDocflow) GetBuyerTitleAttachment() *SignedAttachment {
	if x != nil {
		return x.BuyerTitleAttachment
	}
	return nil
}

func (x *BuyerTitleDocflow) GetSendTimestamp() *Timestamp {
	if x != nil {
		return x.SendTimestamp
	}
	return nil
}

func (x *BuyerTitleDocflow) GetDeliveryTimestamp() *Timestamp {
	if x != nil {
		return x.DeliveryTimestamp
	}
	return nil
}

type BilateralDocflow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsFinished                               *bool                               `protobuf:"varint,1,opt,name=IsFinished" json:"IsFinished,omitempty"`
	ReceiptDocflow                           *ReceiptDocflow                     `protobuf:"bytes,2,opt,name=ReceiptDocflow" json:"ReceiptDocflow,omitempty"`
	RecipientSignatureDocflow                *RecipientSignatureDocflow          `protobuf:"bytes,3,opt,name=RecipientSignatureDocflow" json:"RecipientSignatureDocflow,omitempty"`
	RecipientSignatureRejectionDocflow       *RecipientSignatureRejectionDocflow `protobuf:"bytes,4,opt,name=RecipientSignatureRejectionDocflow" json:"RecipientSignatureRejectionDocflow,omitempty"`
	IsReceiptRequested                       *bool                               `protobuf:"varint,5,opt,name=IsReceiptRequested" json:"IsReceiptRequested,omitempty"`
	IsRecipientSignatureRequested            *bool                               `protobuf:"varint,6,opt,name=IsRecipientSignatureRequested" json:"IsRecipientSignatureRequested,omitempty"`
	IsDocumentSignedByRecipient              *bool                               `protobuf:"varint,7,opt,name=IsDocumentSignedByRecipient" json:"IsDocumentSignedByRecipient,omitempty"`
	IsDocumentRejectedByRecipient            *bool                               `protobuf:"varint,8,opt,name=IsDocumentRejectedByRecipient" json:"IsDocumentRejectedByRecipient,omitempty"`
	CanDocumentBeReceipted                   *bool                               `protobuf:"varint,9,opt,name=CanDocumentBeReceipted" json:"CanDocumentBeReceipted,omitempty"`
	CanDocumentBeSignedBySender              *bool                               `protobuf:"varint,10,opt,name=CanDocumentBeSignedBySender" json:"CanDocumentBeSignedBySender,omitempty"`
	CanDocumentBeSignedOrRejectedByRecipient *bool                               `protobuf:"varint,11,opt,name=CanDocumentBeSignedOrRejectedByRecipient" json:"CanDocumentBeSignedOrRejectedByRecipient,omitempty"`
}

func (x *BilateralDocflow) Reset() {
	*x = BilateralDocflow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[247]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BilateralDocflow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BilateralDocflow) ProtoMessage() {}

func (x *BilateralDocflow) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[247]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BilateralDocflow.ProtoReflect.Descriptor instead.
func (*BilateralDocflow) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{247}
}

func (x *BilateralDocflow) GetIsFinished() bool {
	if x != nil && x.IsFinished != nil {
		return *x.IsFinished
	}
	return false
}

func (x *BilateralDocflow) GetReceiptDocflow() *ReceiptDocflow {
	if x != nil {
		return x.ReceiptDocflow
	}
	return nil
}

func (x *BilateralDocflow) GetRecipientSignatureDocflow() *RecipientSignatureDocflow {
	if x != nil {
		return x.RecipientSignatureDocflow
	}
	return nil
}

func (x *BilateralDocflow) GetRecipientSignatureRejectionDocflow() *RecipientSignatureRejectionDocflow {
	if x != nil {
		return x.RecipientSignatureRejectionDocflow
	}
	return nil
}

func (x *BilateralDocflow) GetIsReceiptRequested() bool {
	if x != nil && x.IsReceiptRequested != nil {
		return *x.IsReceiptRequested
	}
	return false
}

func (x *BilateralDocflow) GetIsRecipientSignatureRequested() bool {
	if x != nil && x.IsRecipientSignatureRequested != nil {
		return *x.IsRecipientSignatureRequested
	}
	return false
}

func (x *BilateralDocflow) GetIsDocumentSignedByRecipient() bool {
	if x != nil && x.IsDocumentSignedByRecipient != nil {
		return *x.IsDocumentSignedByRecipient
	}
	return false
}

func (x *BilateralDocflow) GetIsDocumentRejectedByRecipient() bool {
	if x != nil && x.IsDocumentRejectedByRecipient != nil {
		return *x.IsDocumentRejectedByRecipient
	}
	return false
}

func (x *BilateralDocflow) GetCanDocumentBeReceipted() bool {
	if x != nil && x.CanDocumentBeReceipted != nil {
		return *x.CanDocumentBeReceipted
	}
	return false
}

func (x *BilateralDocflow) GetCanDocumentBeSignedBySender() bool {
	if x != nil && x.CanDocumentBeSignedBySender != nil {
		return *x.CanDocumentBeSignedBySender
	}
	return false
}

func (x *BilateralDocflow) GetCanDocumentBeSignedOrRejectedByRecipient() bool {
	if x != nil && x.CanDocumentBeSignedOrRejectedByRecipient != nil {
		return *x.CanDocumentBeSignedOrRejectedByRecipient
	}
	return false
}

type OutboundInvoiceDocflow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsFinished                  *bool                            `protobuf:"varint,1,opt,name=IsFinished" json:"IsFinished,omitempty"`
	ReceiptDocflow              *ReceiptDocflow                  `protobuf:"bytes,2,opt,name=ReceiptDocflow" json:"ReceiptDocflow,omitempty"`
	ConfirmationDocflow         *InvoiceConfirmationDocflow      `protobuf:"bytes,3,opt,name=ConfirmationDocflow" json:"ConfirmationDocflow,omitempty"`
	CorrectionRequestDocflow    *InvoiceCorrectionRequestDocflow `protobuf:"bytes,4,opt,name=CorrectionRequestDocflow" json:"CorrectionRequestDocflow,omitempty"`
	ConfirmationTimestamp       *Timestamp                       `protobuf:"bytes,5,opt,name=ConfirmationTimestamp" json:"ConfirmationTimestamp,omitempty"`
	IsAmendmentRequested        *bool                            `protobuf:"varint,6,opt,name=IsAmendmentRequested" json:"IsAmendmentRequested,omitempty"`
	IsRevised                   *bool                            `protobuf:"varint,7,opt,name=IsRevised" json:"IsRevised,omitempty"`
	IsCorrected                 *bool                            `protobuf:"varint,8,opt,name=IsCorrected" json:"IsCorrected,omitempty"`
	CanDocumentBeSignedBySender *bool                            `protobuf:"varint,9,opt,name=CanDocumentBeSignedBySender" json:"CanDocumentBeSignedBySender,omitempty"`
}

func (x *OutboundInvoiceDocflow) Reset() {
	*x = OutboundInvoiceDocflow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[248]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OutboundInvoiceDocflow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OutboundInvoiceDocflow) ProtoMessage() {}

func (x *OutboundInvoiceDocflow) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[248]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OutboundInvoiceDocflow.ProtoReflect.Descriptor instead.
func (*OutboundInvoiceDocflow) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{248}
}

func (x *OutboundInvoiceDocflow) GetIsFinished() bool {
	if x != nil && x.IsFinished != nil {
		return *x.IsFinished
	}
	return false
}

func (x *OutboundInvoiceDocflow) GetReceiptDocflow() *ReceiptDocflow {
	if x != nil {
		return x.ReceiptDocflow
	}
	return nil
}

func (x *OutboundInvoiceDocflow) GetConfirmationDocflow() *InvoiceConfirmationDocflow {
	if x != nil {
		return x.ConfirmationDocflow
	}
	return nil
}

func (x *OutboundInvoiceDocflow) GetCorrectionRequestDocflow() *InvoiceCorrectionRequestDocflow {
	if x != nil {
		return x.CorrectionRequestDocflow
	}
	return nil
}

func (x *OutboundInvoiceDocflow) GetConfirmationTimestamp() *Timestamp {
	if x != nil {
		return x.ConfirmationTimestamp
	}
	return nil
}

func (x *OutboundInvoiceDocflow) GetIsAmendmentRequested() bool {
	if x != nil && x.IsAmendmentRequested != nil {
		return *x.IsAmendmentRequested
	}
	return false
}

func (x *OutboundInvoiceDocflow) GetIsRevised() bool {
	if x != nil && x.IsRevised != nil {
		return *x.IsRevised
	}
	return false
}

func (x *OutboundInvoiceDocflow) GetIsCorrected() bool {
	if x != nil && x.IsCorrected != nil {
		return *x.IsCorrected
	}
	return false
}

func (x *OutboundInvoiceDocflow) GetCanDocumentBeSignedBySender() bool {
	if x != nil && x.CanDocumentBeSignedBySender != nil {
		return *x.CanDocumentBeSignedBySender
	}
	return false
}

type InvoiceConfirmationDocflow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsFinished             *bool             `protobuf:"varint,1,opt,name=IsFinished" json:"IsFinished,omitempty"`
	ConfirmationAttachment *SignedAttachment `protobuf:"bytes,2,opt,name=ConfirmationAttachment" json:"ConfirmationAttachment,omitempty"`
	ReceiptDocflow         *ReceiptDocflow   `protobuf:"bytes,3,opt,name=ReceiptDocflow" json:"ReceiptDocflow,omitempty"`
}

func (x *InvoiceConfirmationDocflow) Reset() {
	*x = InvoiceConfirmationDocflow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[249]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InvoiceConfirmationDocflow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InvoiceConfirmationDocflow) ProtoMessage() {}

func (x *InvoiceConfirmationDocflow) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[249]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InvoiceConfirmationDocflow.ProtoReflect.Descriptor instead.
func (*InvoiceConfirmationDocflow) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{249}
}

func (x *InvoiceConfirmationDocflow) GetIsFinished() bool {
	if x != nil && x.IsFinished != nil {
		return *x.IsFinished
	}
	return false
}

func (x *InvoiceConfirmationDocflow) GetConfirmationAttachment() *SignedAttachment {
	if x != nil {
		return x.ConfirmationAttachment
	}
	return nil
}

func (x *InvoiceConfirmationDocflow) GetReceiptDocflow() *ReceiptDocflow {
	if x != nil {
		return x.ReceiptDocflow
	}
	return nil
}

type InvoiceCorrectionRequestDocflow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsFinished                  *bool             `protobuf:"varint,1,opt,name=IsFinished" json:"IsFinished,omitempty"`
	CorrectionRequestAttachment *SignedAttachment `protobuf:"bytes,2,opt,name=CorrectionRequestAttachment" json:"CorrectionRequestAttachment,omitempty"`
	ReceiptDocflow              *ReceiptDocflow   `protobuf:"bytes,3,opt,name=ReceiptDocflow" json:"ReceiptDocflow,omitempty"`
}

func (x *InvoiceCorrectionRequestDocflow) Reset() {
	*x = InvoiceCorrectionRequestDocflow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[250]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InvoiceCorrectionRequestDocflow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InvoiceCorrectionRequestDocflow) ProtoMessage() {}

func (x *InvoiceCorrectionRequestDocflow) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[250]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InvoiceCorrectionRequestDocflow.ProtoReflect.Descriptor instead.
func (*InvoiceCorrectionRequestDocflow) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{250}
}

func (x *InvoiceCorrectionRequestDocflow) GetIsFinished() bool {
	if x != nil && x.IsFinished != nil {
		return *x.IsFinished
	}
	return false
}

func (x *InvoiceCorrectionRequestDocflow) GetCorrectionRequestAttachment() *SignedAttachment {
	if x != nil {
		return x.CorrectionRequestAttachment
	}
	return nil
}

func (x *InvoiceCorrectionRequestDocflow) GetReceiptDocflow() *ReceiptDocflow {
	if x != nil {
		return x.ReceiptDocflow
	}
	return nil
}

type InboundInvoiceDocflow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsFinished               *bool                            `protobuf:"varint,1,opt,name=IsFinished" json:"IsFinished,omitempty"`
	ReceiptDocflow           *InboundInvoiceReceiptDocflow    `protobuf:"bytes,2,opt,name=ReceiptDocflow" json:"ReceiptDocflow,omitempty"`
	ConfirmationDocflow      *InvoiceConfirmationDocflow      `protobuf:"bytes,3,opt,name=ConfirmationDocflow" json:"ConfirmationDocflow,omitempty"`
	CorrectionRequestDocflow *InvoiceCorrectionRequestDocflow `protobuf:"bytes,4,opt,name=CorrectionRequestDocflow" json:"CorrectionRequestDocflow,omitempty"`
	ConfirmationTimestamp    *Timestamp                       `protobuf:"bytes,5,opt,name=ConfirmationTimestamp" json:"ConfirmationTimestamp,omitempty"`
	IsAmendmentRequested     *bool                            `protobuf:"varint,6,opt,name=IsAmendmentRequested" json:"IsAmendmentRequested,omitempty"`
	IsRevised                *bool                            `protobuf:"varint,7,opt,name=IsRevised" json:"IsRevised,omitempty"`
	IsCorrected              *bool                            `protobuf:"varint,8,opt,name=IsCorrected" json:"IsCorrected,omitempty"`
}

func (x *InboundInvoiceDocflow) Reset() {
	*x = InboundInvoiceDocflow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[251]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InboundInvoiceDocflow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InboundInvoiceDocflow) ProtoMessage() {}

func (x *InboundInvoiceDocflow) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[251]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InboundInvoiceDocflow.ProtoReflect.Descriptor instead.
func (*InboundInvoiceDocflow) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{251}
}

func (x *InboundInvoiceDocflow) GetIsFinished() bool {
	if x != nil && x.IsFinished != nil {
		return *x.IsFinished
	}
	return false
}

func (x *InboundInvoiceDocflow) GetReceiptDocflow() *InboundInvoiceReceiptDocflow {
	if x != nil {
		return x.ReceiptDocflow
	}
	return nil
}

func (x *InboundInvoiceDocflow) GetConfirmationDocflow() *InvoiceConfirmationDocflow {
	if x != nil {
		return x.ConfirmationDocflow
	}
	return nil
}

func (x *InboundInvoiceDocflow) GetCorrectionRequestDocflow() *InvoiceCorrectionRequestDocflow {
	if x != nil {
		return x.CorrectionRequestDocflow
	}
	return nil
}

func (x *InboundInvoiceDocflow) GetConfirmationTimestamp() *Timestamp {
	if x != nil {
		return x.ConfirmationTimestamp
	}
	return nil
}

func (x *InboundInvoiceDocflow) GetIsAmendmentRequested() bool {
	if x != nil && x.IsAmendmentRequested != nil {
		return *x.IsAmendmentRequested
	}
	return false
}

func (x *InboundInvoiceDocflow) GetIsRevised() bool {
	if x != nil && x.IsRevised != nil {
		return *x.IsRevised
	}
	return false
}

func (x *InboundInvoiceDocflow) GetIsCorrected() bool {
	if x != nil && x.IsCorrected != nil {
		return *x.IsCorrected
	}
	return false
}

type InboundInvoiceReceiptDocflow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsFinished          *bool                       `protobuf:"varint,1,opt,name=IsFinished" json:"IsFinished,omitempty"`
	ReceiptAttachment   *SignedAttachment           `protobuf:"bytes,2,opt,name=ReceiptAttachment" json:"ReceiptAttachment,omitempty"`
	ConfirmationDocflow *InvoiceConfirmationDocflow `protobuf:"bytes,3,opt,name=ConfirmationDocflow" json:"ConfirmationDocflow,omitempty"`
}

func (x *InboundInvoiceReceiptDocflow) Reset() {
	*x = InboundInvoiceReceiptDocflow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[252]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InboundInvoiceReceiptDocflow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InboundInvoiceReceiptDocflow) ProtoMessage() {}

func (x *InboundInvoiceReceiptDocflow) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[252]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InboundInvoiceReceiptDocflow.ProtoReflect.Descriptor instead.
func (*InboundInvoiceReceiptDocflow) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{252}
}

func (x *InboundInvoiceReceiptDocflow) GetIsFinished() bool {
	if x != nil && x.IsFinished != nil {
		return *x.IsFinished
	}
	return false
}

func (x *InboundInvoiceReceiptDocflow) GetReceiptAttachment() *SignedAttachment {
	if x != nil {
		return x.ReceiptAttachment
	}
	return nil
}

func (x *InboundInvoiceReceiptDocflow) GetConfirmationDocflow() *InvoiceConfirmationDocflow {
	if x != nil {
		return x.ConfirmationDocflow
	}
	return nil
}

type InboundUniversalTransferDocumentDocflow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsFinished                               *bool                               `protobuf:"varint,1,opt,name=IsFinished" json:"IsFinished,omitempty"`
	ReceiptDocflow                           *InboundInvoiceReceiptDocflow       `protobuf:"bytes,2,opt,name=ReceiptDocflow" json:"ReceiptDocflow,omitempty"`
	ConfirmationDocflow                      *InvoiceConfirmationDocflow         `protobuf:"bytes,3,opt,name=ConfirmationDocflow" json:"ConfirmationDocflow,omitempty"`
	CorrectionRequestDocflow                 *InvoiceCorrectionRequestDocflow    `protobuf:"bytes,4,opt,name=CorrectionRequestDocflow" json:"CorrectionRequestDocflow,omitempty"`
	ConfirmationTimestamp                    *Timestamp                          `protobuf:"bytes,5,opt,name=ConfirmationTimestamp" json:"ConfirmationTimestamp,omitempty"`
	IsAmendmentRequested                     *bool                               `protobuf:"varint,6,opt,name=IsAmendmentRequested" json:"IsAmendmentRequested,omitempty"`
	IsRevised                                *bool                               `protobuf:"varint,7,opt,name=IsRevised" json:"IsRevised,omitempty"`
	IsCorrected                              *bool                               `protobuf:"varint,8,opt,name=IsCorrected" json:"IsCorrected,omitempty"`
	BuyerTitleDocflow                        *BuyerTitleDocflow                  `protobuf:"bytes,9,opt,name=BuyerTitleDocflow" json:"BuyerTitleDocflow,omitempty"`
	RecipientSignatureRejectionDocflow       *RecipientSignatureRejectionDocflow `protobuf:"bytes,10,opt,name=RecipientSignatureRejectionDocflow" json:"RecipientSignatureRejectionDocflow,omitempty"`
	IsReceiptRequested                       *bool                               `protobuf:"varint,11,opt,name=IsReceiptRequested" json:"IsReceiptRequested,omitempty"`
	IsRecipientSignatureRequested            *bool                               `protobuf:"varint,12,opt,name=IsRecipientSignatureRequested" json:"IsRecipientSignatureRequested,omitempty"`
	IsDocumentSignedByRecipient              *bool                               `protobuf:"varint,13,opt,name=IsDocumentSignedByRecipient" json:"IsDocumentSignedByRecipient,omitempty"`
	IsDocumentRejectedByRecipient            *bool                               `protobuf:"varint,14,opt,name=IsDocumentRejectedByRecipient" json:"IsDocumentRejectedByRecipient,omitempty"`
	CanDocumentBeReceipted                   *bool                               `protobuf:"varint,15,opt,name=CanDocumentBeReceipted" json:"CanDocumentBeReceipted,omitempty"`
	CanDocumentBeSignedOrRejectedByRecipient *bool                               `protobuf:"varint,16,opt,name=CanDocumentBeSignedOrRejectedByRecipient" json:"CanDocumentBeSignedOrRejectedByRecipient,omitempty"`
}

func (x *InboundUniversalTransferDocumentDocflow) Reset() {
	*x = InboundUniversalTransferDocumentDocflow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[253]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InboundUniversalTransferDocumentDocflow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InboundUniversalTransferDocumentDocflow) ProtoMessage() {}

func (x *InboundUniversalTransferDocumentDocflow) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[253]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InboundUniversalTransferDocumentDocflow.ProtoReflect.Descriptor instead.
func (*InboundUniversalTransferDocumentDocflow) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{253}
}

func (x *InboundUniversalTransferDocumentDocflow) GetIsFinished() bool {
	if x != nil && x.IsFinished != nil {
		return *x.IsFinished
	}
	return false
}

func (x *InboundUniversalTransferDocumentDocflow) GetReceiptDocflow() *InboundInvoiceReceiptDocflow {
	if x != nil {
		return x.ReceiptDocflow
	}
	return nil
}

func (x *InboundUniversalTransferDocumentDocflow) GetConfirmationDocflow() *InvoiceConfirmationDocflow {
	if x != nil {
		return x.ConfirmationDocflow
	}
	return nil
}

func (x *InboundUniversalTransferDocumentDocflow) GetCorrectionRequestDocflow() *InvoiceCorrectionRequestDocflow {
	if x != nil {
		return x.CorrectionRequestDocflow
	}
	return nil
}

func (x *InboundUniversalTransferDocumentDocflow) GetConfirmationTimestamp() *Timestamp {
	if x != nil {
		return x.ConfirmationTimestamp
	}
	return nil
}

func (x *InboundUniversalTransferDocumentDocflow) GetIsAmendmentRequested() bool {
	if x != nil && x.IsAmendmentRequested != nil {
		return *x.IsAmendmentRequested
	}
	return false
}

func (x *InboundUniversalTransferDocumentDocflow) GetIsRevised() bool {
	if x != nil && x.IsRevised != nil {
		return *x.IsRevised
	}
	return false
}

func (x *InboundUniversalTransferDocumentDocflow) GetIsCorrected() bool {
	if x != nil && x.IsCorrected != nil {
		return *x.IsCorrected
	}
	return false
}

func (x *InboundUniversalTransferDocumentDocflow) GetBuyerTitleDocflow() *BuyerTitleDocflow {
	if x != nil {
		return x.BuyerTitleDocflow
	}
	return nil
}

func (x *InboundUniversalTransferDocumentDocflow) GetRecipientSignatureRejectionDocflow() *RecipientSignatureRejectionDocflow {
	if x != nil {
		return x.RecipientSignatureRejectionDocflow
	}
	return nil
}

func (x *InboundUniversalTransferDocumentDocflow) GetIsReceiptRequested() bool {
	if x != nil && x.IsReceiptRequested != nil {
		return *x.IsReceiptRequested
	}
	return false
}

func (x *InboundUniversalTransferDocumentDocflow) GetIsRecipientSignatureRequested() bool {
	if x != nil && x.IsRecipientSignatureRequested != nil {
		return *x.IsRecipientSignatureRequested
	}
	return false
}

func (x *InboundUniversalTransferDocumentDocflow) GetIsDocumentSignedByRecipient() bool {
	if x != nil && x.IsDocumentSignedByRecipient != nil {
		return *x.IsDocumentSignedByRecipient
	}
	return false
}

func (x *InboundUniversalTransferDocumentDocflow) GetIsDocumentRejectedByRecipient() bool {
	if x != nil && x.IsDocumentRejectedByRecipient != nil {
		return *x.IsDocumentRejectedByRecipient
	}
	return false
}

func (x *InboundUniversalTransferDocumentDocflow) GetCanDocumentBeReceipted() bool {
	if x != nil && x.CanDocumentBeReceipted != nil {
		return *x.CanDocumentBeReceipted
	}
	return false
}

func (x *InboundUniversalTransferDocumentDocflow) GetCanDocumentBeSignedOrRejectedByRecipient() bool {
	if x != nil && x.CanDocumentBeSignedOrRejectedByRecipient != nil {
		return *x.CanDocumentBeSignedOrRejectedByRecipient
	}
	return false
}

type OutboundUniversalTransferDocumentDocflow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsFinished                               *bool                               `protobuf:"varint,1,opt,name=IsFinished" json:"IsFinished,omitempty"`
	ReceiptDocflow                           *ReceiptDocflow                     `protobuf:"bytes,2,opt,name=ReceiptDocflow" json:"ReceiptDocflow,omitempty"`
	ConfirmationDocflow                      *InvoiceConfirmationDocflow         `protobuf:"bytes,3,opt,name=ConfirmationDocflow" json:"ConfirmationDocflow,omitempty"`
	CorrectionRequestDocflow                 *InvoiceCorrectionRequestDocflow    `protobuf:"bytes,4,opt,name=CorrectionRequestDocflow" json:"CorrectionRequestDocflow,omitempty"`
	ConfirmationTimestamp                    *Timestamp                          `protobuf:"bytes,5,opt,name=ConfirmationTimestamp" json:"ConfirmationTimestamp,omitempty"`
	IsAmendmentRequested                     *bool                               `protobuf:"varint,6,opt,name=IsAmendmentRequested" json:"IsAmendmentRequested,omitempty"`
	IsRevised                                *bool                               `protobuf:"varint,7,opt,name=IsRevised" json:"IsRevised,omitempty"`
	IsCorrected                              *bool                               `protobuf:"varint,8,opt,name=IsCorrected" json:"IsCorrected,omitempty"`
	CanDocumentBeSignedBySender              *bool                               `protobuf:"varint,9,opt,name=CanDocumentBeSignedBySender" json:"CanDocumentBeSignedBySender,omitempty"`
	BuyerTitleDocflow                        *BuyerTitleDocflow                  `protobuf:"bytes,10,opt,name=BuyerTitleDocflow" json:"BuyerTitleDocflow,omitempty"`
	RecipientSignatureRejectionDocflow       *RecipientSignatureRejectionDocflow `protobuf:"bytes,11,opt,name=RecipientSignatureRejectionDocflow" json:"RecipientSignatureRejectionDocflow,omitempty"`
	IsReceiptRequested                       *bool                               `protobuf:"varint,12,opt,name=IsReceiptRequested" json:"IsReceiptRequested,omitempty"`
	IsRecipientSignatureRequested            *bool                               `protobuf:"varint,13,opt,name=IsRecipientSignatureRequested" json:"IsRecipientSignatureRequested,omitempty"`
	IsDocumentSignedByRecipient              *bool                               `protobuf:"varint,14,opt,name=IsDocumentSignedByRecipient" json:"IsDocumentSignedByRecipient,omitempty"`
	IsDocumentRejectedByRecipient            *bool                               `protobuf:"varint,15,opt,name=IsDocumentRejectedByRecipient" json:"IsDocumentRejectedByRecipient,omitempty"`
	CanDocumentBeReceipted                   *bool                               `protobuf:"varint,16,opt,name=CanDocumentBeReceipted" json:"CanDocumentBeReceipted,omitempty"`
	CanDocumentBeSignedOrRejectedByRecipient *bool                               `protobuf:"varint,17,opt,name=CanDocumentBeSignedOrRejectedByRecipient" json:"CanDocumentBeSignedOrRejectedByRecipient,omitempty"`
}

func (x *OutboundUniversalTransferDocumentDocflow) Reset() {
	*x = OutboundUniversalTransferDocumentDocflow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[254]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OutboundUniversalTransferDocumentDocflow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OutboundUniversalTransferDocumentDocflow) ProtoMessage() {}

func (x *OutboundUniversalTransferDocumentDocflow) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[254]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OutboundUniversalTransferDocumentDocflow.ProtoReflect.Descriptor instead.
func (*OutboundUniversalTransferDocumentDocflow) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{254}
}

func (x *OutboundUniversalTransferDocumentDocflow) GetIsFinished() bool {
	if x != nil && x.IsFinished != nil {
		return *x.IsFinished
	}
	return false
}

func (x *OutboundUniversalTransferDocumentDocflow) GetReceiptDocflow() *ReceiptDocflow {
	if x != nil {
		return x.ReceiptDocflow
	}
	return nil
}

func (x *OutboundUniversalTransferDocumentDocflow) GetConfirmationDocflow() *InvoiceConfirmationDocflow {
	if x != nil {
		return x.ConfirmationDocflow
	}
	return nil
}

func (x *OutboundUniversalTransferDocumentDocflow) GetCorrectionRequestDocflow() *InvoiceCorrectionRequestDocflow {
	if x != nil {
		return x.CorrectionRequestDocflow
	}
	return nil
}

func (x *OutboundUniversalTransferDocumentDocflow) GetConfirmationTimestamp() *Timestamp {
	if x != nil {
		return x.ConfirmationTimestamp
	}
	return nil
}

func (x *OutboundUniversalTransferDocumentDocflow) GetIsAmendmentRequested() bool {
	if x != nil && x.IsAmendmentRequested != nil {
		return *x.IsAmendmentRequested
	}
	return false
}

func (x *OutboundUniversalTransferDocumentDocflow) GetIsRevised() bool {
	if x != nil && x.IsRevised != nil {
		return *x.IsRevised
	}
	return false
}

func (x *OutboundUniversalTransferDocumentDocflow) GetIsCorrected() bool {
	if x != nil && x.IsCorrected != nil {
		return *x.IsCorrected
	}
	return false
}

func (x *OutboundUniversalTransferDocumentDocflow) GetCanDocumentBeSignedBySender() bool {
	if x != nil && x.CanDocumentBeSignedBySender != nil {
		return *x.CanDocumentBeSignedBySender
	}
	return false
}

func (x *OutboundUniversalTransferDocumentDocflow) GetBuyerTitleDocflow() *BuyerTitleDocflow {
	if x != nil {
		return x.BuyerTitleDocflow
	}
	return nil
}

func (x *OutboundUniversalTransferDocumentDocflow) GetRecipientSignatureRejectionDocflow() *RecipientSignatureRejectionDocflow {
	if x != nil {
		return x.RecipientSignatureRejectionDocflow
	}
	return nil
}

func (x *OutboundUniversalTransferDocumentDocflow) GetIsReceiptRequested() bool {
	if x != nil && x.IsReceiptRequested != nil {
		return *x.IsReceiptRequested
	}
	return false
}

func (x *OutboundUniversalTransferDocumentDocflow) GetIsRecipientSignatureRequested() bool {
	if x != nil && x.IsRecipientSignatureRequested != nil {
		return *x.IsRecipientSignatureRequested
	}
	return false
}

func (x *OutboundUniversalTransferDocumentDocflow) GetIsDocumentSignedByRecipient() bool {
	if x != nil && x.IsDocumentSignedByRecipient != nil {
		return *x.IsDocumentSignedByRecipient
	}
	return false
}

func (x *OutboundUniversalTransferDocumentDocflow) GetIsDocumentRejectedByRecipient() bool {
	if x != nil && x.IsDocumentRejectedByRecipient != nil {
		return *x.IsDocumentRejectedByRecipient
	}
	return false
}

func (x *OutboundUniversalTransferDocumentDocflow) GetCanDocumentBeReceipted() bool {
	if x != nil && x.CanDocumentBeReceipted != nil {
		return *x.CanDocumentBeReceipted
	}
	return false
}

func (x *OutboundUniversalTransferDocumentDocflow) GetCanDocumentBeSignedOrRejectedByRecipient() bool {
	if x != nil && x.CanDocumentBeSignedOrRejectedByRecipient != nil {
		return *x.CanDocumentBeSignedOrRejectedByRecipient
	}
	return false
}

type DocflowStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PrimaryStatus   *DocflowStatusModelOld `protobuf:"bytes,1,opt,name=PrimaryStatus" json:"PrimaryStatus,omitempty"`
	SecondaryStatus *DocflowStatusModelOld `protobuf:"bytes,2,opt,name=SecondaryStatus" json:"SecondaryStatus,omitempty"`
}

func (x *DocflowStatus) Reset() {
	*x = DocflowStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[255]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DocflowStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DocflowStatus) ProtoMessage() {}

func (x *DocflowStatus) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[255]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DocflowStatus.ProtoReflect.Descriptor instead.
func (*DocflowStatus) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{255}
}

func (x *DocflowStatus) GetPrimaryStatus() *DocflowStatusModelOld {
	if x != nil {
		return x.PrimaryStatus
	}
	return nil
}

func (x *DocflowStatus) GetSecondaryStatus() *DocflowStatusModelOld {
	if x != nil {
		return x.SecondaryStatus
	}
	return nil
}

type DocflowStatusModelOld struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Severity   *DocflowStatusSeverity `protobuf:"varint,1,opt,name=Severity,enum=DocflowStatusSeverity,def=0" json:"Severity,omitempty"`
	StatusText *string                `protobuf:"bytes,2,opt,name=StatusText" json:"StatusText,omitempty"`
	StatusHint *string                `protobuf:"bytes,3,opt,name=StatusHint" json:"StatusHint,omitempty"`
}

// Default values for DocflowStatusModelOld fields.
const (
	Default_DocflowStatusModelOld_Severity = DocflowStatusSeverity_UnknownDocflowStatusSeverityDocflowStatusSeverity
)

func (x *DocflowStatusModelOld) Reset() {
	*x = DocflowStatusModelOld{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[256]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DocflowStatusModelOld) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DocflowStatusModelOld) ProtoMessage() {}

func (x *DocflowStatusModelOld) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[256]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DocflowStatusModelOld.ProtoReflect.Descriptor instead.
func (*DocflowStatusModelOld) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{256}
}

func (x *DocflowStatusModelOld) GetSeverity() DocflowStatusSeverity {
	if x != nil && x.Severity != nil {
		return *x.Severity
	}
	return Default_DocflowStatusModelOld_Severity
}

func (x *DocflowStatusModelOld) GetStatusText() string {
	if x != nil && x.StatusText != nil {
		return *x.StatusText
	}
	return ""
}

func (x *DocflowStatusModelOld) GetStatusHint() string {
	if x != nil && x.StatusHint != nil {
		return *x.StatusHint
	}
	return ""
}

type SignedAttachment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Attachment *Attachment `protobuf:"bytes,1,opt,name=Attachment" json:"Attachment,omitempty"`
	Signature  *Signature  `protobuf:"bytes,2,opt,name=Signature" json:"Signature,omitempty"`
	Comment    *Entity     `protobuf:"bytes,3,opt,name=Comment" json:"Comment,omitempty"`
}

func (x *SignedAttachment) Reset() {
	*x = SignedAttachment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[257]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignedAttachment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignedAttachment) ProtoMessage() {}

func (x *SignedAttachment) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[257]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignedAttachment.ProtoReflect.Descriptor instead.
func (*SignedAttachment) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{257}
}

func (x *SignedAttachment) GetAttachment() *Attachment {
	if x != nil {
		return x.Attachment
	}
	return nil
}

func (x *SignedAttachment) GetSignature() *Signature {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *SignedAttachment) GetComment() *Entity {
	if x != nil {
		return x.Comment
	}
	return nil
}

type Signature struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Entity             *Entity                      `protobuf:"bytes,1,opt,name=Entity" json:"Entity,omitempty"`
	SignerBoxId        *string                      `protobuf:"bytes,2,opt,name=SignerBoxId" json:"SignerBoxId,omitempty"`
	SignerDepartmentId *string                      `protobuf:"bytes,3,opt,name=SignerDepartmentId" json:"SignerDepartmentId,omitempty"`
	IsValid            *bool                        `protobuf:"varint,4,opt,name=IsValid" json:"IsValid,omitempty"`
	VerificationResult *SignatureVerificationResult `protobuf:"bytes,5,opt,name=VerificationResult" json:"VerificationResult,omitempty"`
}

func (x *Signature) Reset() {
	*x = Signature{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[258]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Signature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Signature) ProtoMessage() {}

func (x *Signature) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[258]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Signature.ProtoReflect.Descriptor instead.
func (*Signature) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{258}
}

func (x *Signature) GetEntity() *Entity {
	if x != nil {
		return x.Entity
	}
	return nil
}

func (x *Signature) GetSignerBoxId() string {
	if x != nil && x.SignerBoxId != nil {
		return *x.SignerBoxId
	}
	return ""
}

func (x *Signature) GetSignerDepartmentId() string {
	if x != nil && x.SignerDepartmentId != nil {
		return *x.SignerDepartmentId
	}
	return ""
}

func (x *Signature) GetIsValid() bool {
	if x != nil && x.IsValid != nil {
		return *x.IsValid
	}
	return false
}

func (x *Signature) GetVerificationResult() *SignatureVerificationResult {
	if x != nil {
		return x.VerificationResult
	}
	return nil
}

type UniversalTransferDocumentSellerTitleInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Function               *FunctionType             `protobuf:"varint,1,req,name=Function,enum=FunctionType" json:"Function,omitempty"`           // Функция документа // Функция
	DocumentName           *string                   `protobuf:"bytes,2,opt,name=DocumentName" json:"DocumentName,omitempty"`                      // Наименование первичного документа, определенное организацией // НаимДокОпр
	DocumentDate           *string                   `protobuf:"bytes,3,req,name=DocumentDate" json:"DocumentDate,omitempty"`                      // дата УПД // ДатаСчФ
	DocumentNumber         *string                   `protobuf:"bytes,4,req,name=DocumentNumber" json:"DocumentNumber,omitempty"`                  // номер УПД // НомерСчФ
	Seller                 *ExtendedOrganizationInfo `protobuf:"bytes,5,req,name=Seller" json:"Seller,omitempty"`                                  // продавец // СвПрод
	Buyer                  *ExtendedOrganizationInfo `protobuf:"bytes,6,req,name=Buyer" json:"Buyer,omitempty"`                                    // покупатель //СвПокуп
	Shipper                *Shipper                  `protobuf:"bytes,7,opt,name=Shipper" json:"Shipper,omitempty"`                                // грузоотправитель //ГрузОт
	Consignee              *ExtendedOrganizationInfo `protobuf:"bytes,8,opt,name=Consignee" json:"Consignee,omitempty"`                            // грузополучатель //ГрузПолуч
	Signers                []*ExtendedSigner         `protobuf:"bytes,9,rep,name=Signers" json:"Signers,omitempty"`                                // подписант // Подписант
	PaymentDocuments       []*PaymentDocumentInfo    `protobuf:"bytes,10,rep,name=PaymentDocuments" json:"PaymentDocuments,omitempty"`             // платежно-расчетные документы // СвПРД
	InvoiceTable           *InvoiceTable             `protobuf:"bytes,11,opt,name=InvoiceTable" json:"InvoiceTable,omitempty"`                     // Сведения таблицы счета-фактуры // ТаблСчФакт
	Currency               *string                   `protobuf:"bytes,12,req,name=Currency" json:"Currency,omitempty"`                             // валюта (код) // КодОКВ
	CurrencyRate           *string                   `protobuf:"bytes,13,opt,name=CurrencyRate" json:"CurrencyRate,omitempty"`                     // Курс валюты // КурсВал
	RevisionDate           *string                   `protobuf:"bytes,14,opt,name=RevisionDate" json:"RevisionDate,omitempty"`                     // дата ИСФ (обязательно при формировании UniversalTransferDocumentSellerTitleRevision) // ДатаИспрСчФ
	RevisionNumber         *string                   `protobuf:"bytes,15,opt,name=RevisionNumber" json:"RevisionNumber,omitempty"`                 // номер ИСФ (обязательно при формировании UniversalTransferDocumentSellerTitleRevision) // НомИспрСчФ
	AdditionalInfoId       *AdditionalInfoId         `protobuf:"bytes,16,opt,name=AdditionalInfoId" json:"AdditionalInfoId,omitempty"`             // информационное поле документа // ИнфПолФХЖ1
	TransferInfo           *TransferInfo             `protobuf:"bytes,17,opt,name=TransferInfo" json:"TransferInfo,omitempty"`                     // Сведения о передаче (сдаче) // СвПродПер
	DocumentCreator        *string                   `protobuf:"bytes,18,req,name=DocumentCreator" json:"DocumentCreator,omitempty"`               // Составитель файла обмена счета-фактуры (информации продавца) // НаимЭконСубСост
	DocumentCreatorBase    *string                   `protobuf:"bytes,19,opt,name=DocumentCreatorBase" json:"DocumentCreatorBase,omitempty"`       // Основание, по которому экономический субъект является составителем файла обмена счета-фактуры //ОснДоверОргСост
	GovernmentContractInfo *string                   `protobuf:"bytes,20,opt,name=GovernmentContractInfo" json:"GovernmentContractInfo,omitempty"` // ИдГосКон
}

func (x *UniversalTransferDocumentSellerTitleInfo) Reset() {
	*x = UniversalTransferDocumentSellerTitleInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[259]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UniversalTransferDocumentSellerTitleInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UniversalTransferDocumentSellerTitleInfo) ProtoMessage() {}

func (x *UniversalTransferDocumentSellerTitleInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[259]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UniversalTransferDocumentSellerTitleInfo.ProtoReflect.Descriptor instead.
func (*UniversalTransferDocumentSellerTitleInfo) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{259}
}

func (x *UniversalTransferDocumentSellerTitleInfo) GetFunction() FunctionType {
	if x != nil && x.Function != nil {
		return *x.Function
	}
	return FunctionType_Invoice
}

func (x *UniversalTransferDocumentSellerTitleInfo) GetDocumentName() string {
	if x != nil && x.DocumentName != nil {
		return *x.DocumentName
	}
	return ""
}

func (x *UniversalTransferDocumentSellerTitleInfo) GetDocumentDate() string {
	if x != nil && x.DocumentDate != nil {
		return *x.DocumentDate
	}
	return ""
}

func (x *UniversalTransferDocumentSellerTitleInfo) GetDocumentNumber() string {
	if x != nil && x.DocumentNumber != nil {
		return *x.DocumentNumber
	}
	return ""
}

func (x *UniversalTransferDocumentSellerTitleInfo) GetSeller() *ExtendedOrganizationInfo {
	if x != nil {
		return x.Seller
	}
	return nil
}

func (x *UniversalTransferDocumentSellerTitleInfo) GetBuyer() *ExtendedOrganizationInfo {
	if x != nil {
		return x.Buyer
	}
	return nil
}

func (x *UniversalTransferDocumentSellerTitleInfo) GetShipper() *Shipper {
	if x != nil {
		return x.Shipper
	}
	return nil
}

func (x *UniversalTransferDocumentSellerTitleInfo) GetConsignee() *ExtendedOrganizationInfo {
	if x != nil {
		return x.Consignee
	}
	return nil
}

func (x *UniversalTransferDocumentSellerTitleInfo) GetSigners() []*ExtendedSigner {
	if x != nil {
		return x.Signers
	}
	return nil
}

func (x *UniversalTransferDocumentSellerTitleInfo) GetPaymentDocuments() []*PaymentDocumentInfo {
	if x != nil {
		return x.PaymentDocuments
	}
	return nil
}

func (x *UniversalTransferDocumentSellerTitleInfo) GetInvoiceTable() *InvoiceTable {
	if x != nil {
		return x.InvoiceTable
	}
	return nil
}

func (x *UniversalTransferDocumentSellerTitleInfo) GetCurrency() string {
	if x != nil && x.Currency != nil {
		return *x.Currency
	}
	return ""
}

func (x *UniversalTransferDocumentSellerTitleInfo) GetCurrencyRate() string {
	if x != nil && x.CurrencyRate != nil {
		return *x.CurrencyRate
	}
	return ""
}

func (x *UniversalTransferDocumentSellerTitleInfo) GetRevisionDate() string {
	if x != nil && x.RevisionDate != nil {
		return *x.RevisionDate
	}
	return ""
}

func (x *UniversalTransferDocumentSellerTitleInfo) GetRevisionNumber() string {
	if x != nil && x.RevisionNumber != nil {
		return *x.RevisionNumber
	}
	return ""
}

func (x *UniversalTransferDocumentSellerTitleInfo) GetAdditionalInfoId() *AdditionalInfoId {
	if x != nil {
		return x.AdditionalInfoId
	}
	return nil
}

func (x *UniversalTransferDocumentSellerTitleInfo) GetTransferInfo() *TransferInfo {
	if x != nil {
		return x.TransferInfo
	}
	return nil
}

func (x *UniversalTransferDocumentSellerTitleInfo) GetDocumentCreator() string {
	if x != nil && x.DocumentCreator != nil {
		return *x.DocumentCreator
	}
	return ""
}

func (x *UniversalTransferDocumentSellerTitleInfo) GetDocumentCreatorBase() string {
	if x != nil && x.DocumentCreatorBase != nil {
		return *x.DocumentCreatorBase
	}
	return ""
}

func (x *UniversalTransferDocumentSellerTitleInfo) GetGovernmentContractInfo() string {
	if x != nil && x.GovernmentContractInfo != nil {
		return *x.GovernmentContractInfo
	}
	return ""
}

type PaymentDocumentInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DocumentDate   *string `protobuf:"bytes,1,req,name=DocumentDate" json:"DocumentDate,omitempty"`
	DocumentNumber *string `protobuf:"bytes,2,req,name=DocumentNumber" json:"DocumentNumber,omitempty"`
}

func (x *PaymentDocumentInfo) Reset() {
	*x = PaymentDocumentInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[260]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaymentDocumentInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaymentDocumentInfo) ProtoMessage() {}

func (x *PaymentDocumentInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[260]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaymentDocumentInfo.ProtoReflect.Descriptor instead.
func (*PaymentDocumentInfo) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{260}
}

func (x *PaymentDocumentInfo) GetDocumentDate() string {
	if x != nil && x.DocumentDate != nil {
		return *x.DocumentDate
	}
	return ""
}

func (x *PaymentDocumentInfo) GetDocumentNumber() string {
	if x != nil && x.DocumentNumber != nil {
		return *x.DocumentNumber
	}
	return ""
}

type ExtendedSigner struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BoxId                       *string                `protobuf:"bytes,1,opt,name=BoxId" json:"BoxId,omitempty"`
	SignerCertificate           []byte                 `protobuf:"bytes,2,opt,name=SignerCertificate" json:"SignerCertificate,omitempty"`
	SignerCertificateThumbprint *string                `protobuf:"bytes,3,opt,name=SignerCertificateThumbprint" json:"SignerCertificateThumbprint,omitempty"`
	SignerDetails               *ExtendedSignerDetails `protobuf:"bytes,4,opt,name=SignerDetails" json:"SignerDetails,omitempty"`
	PowerOfAttorney             *PowerOfAttorneyToPost `protobuf:"bytes,5,opt,name=PowerOfAttorney" json:"PowerOfAttorney,omitempty"`
}

func (x *ExtendedSigner) Reset() {
	*x = ExtendedSigner{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[261]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExtendedSigner) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtendedSigner) ProtoMessage() {}

func (x *ExtendedSigner) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[261]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtendedSigner.ProtoReflect.Descriptor instead.
func (*ExtendedSigner) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{261}
}

func (x *ExtendedSigner) GetBoxId() string {
	if x != nil && x.BoxId != nil {
		return *x.BoxId
	}
	return ""
}

func (x *ExtendedSigner) GetSignerCertificate() []byte {
	if x != nil {
		return x.SignerCertificate
	}
	return nil
}

func (x *ExtendedSigner) GetSignerCertificateThumbprint() string {
	if x != nil && x.SignerCertificateThumbprint != nil {
		return *x.SignerCertificateThumbprint
	}
	return ""
}

func (x *ExtendedSigner) GetSignerDetails() *ExtendedSignerDetails {
	if x != nil {
		return x.SignerDetails
	}
	return nil
}

func (x *ExtendedSigner) GetPowerOfAttorney() *PowerOfAttorneyToPost {
	if x != nil {
		return x.PowerOfAttorney
	}
	return nil
}

type ExtendedSignerDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Surname                 *string       `protobuf:"bytes,1,req,name=Surname" json:"Surname,omitempty"`
	FirstName               *string       `protobuf:"bytes,2,req,name=FirstName" json:"FirstName,omitempty"`
	Patronymic              *string       `protobuf:"bytes,3,opt,name=Patronymic" json:"Patronymic,omitempty"`
	JobTitle                *string       `protobuf:"bytes,4,opt,name=JobTitle" json:"JobTitle,omitempty"`
	Inn                     *string       `protobuf:"bytes,5,opt,name=Inn" json:"Inn,omitempty"`
	RegistrationCertificate *string       `protobuf:"bytes,6,opt,name=RegistrationCertificate" json:"RegistrationCertificate,omitempty"`
	SignerType              *SignerType   `protobuf:"varint,7,req,name=SignerType,enum=SignerType,def=1" json:"SignerType,omitempty"`  // Физическое лицо-Индивидуальный предприниматель – представитель юридического лица (ФЛ-ИП-ЮЛ)
	SignerOrganizationName  *string       `protobuf:"bytes,8,opt,name=SignerOrganizationName" json:"SignerOrganizationName,omitempty"` // Наименование (НаимОрг)
	SignerInfo              *string       `protobuf:"bytes,9,opt,name=SignerInfo" json:"SignerInfo,omitempty"`                         // Иные сведения, идентифицирующие физическое лицо (ИныеСвед)
	SignerPowers            *SignerPowers `protobuf:"varint,10,req,name=SignerPowers,enum=SignerPowers" json:"SignerPowers,omitempty"` // Область полномочий (ОблПолн)
	SignerStatus            *SignerStatus `protobuf:"varint,11,req,name=SignerStatus,enum=SignerStatus" json:"SignerStatus,omitempty"` // Статус (Статус)
	SignerPowersBase        *string       `protobuf:"bytes,12,opt,name=SignerPowersBase" json:"SignerPowersBase,omitempty"`            // Основание полномочий (доверия) (ОснПолн)
	SignerOrgPowersBase     *string       `protobuf:"bytes,13,opt,name=SignerOrgPowersBase" json:"SignerOrgPowersBase,omitempty"`      // Основание полномочий (доверия) организации (ОснПолнОрг)
}

// Default values for ExtendedSignerDetails fields.
const (
	Default_ExtendedSignerDetails_SignerType = SignerType_LegalEntitySignerType
)

func (x *ExtendedSignerDetails) Reset() {
	*x = ExtendedSignerDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[262]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExtendedSignerDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtendedSignerDetails) ProtoMessage() {}

func (x *ExtendedSignerDetails) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[262]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtendedSignerDetails.ProtoReflect.Descriptor instead.
func (*ExtendedSignerDetails) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{262}
}

func (x *ExtendedSignerDetails) GetSurname() string {
	if x != nil && x.Surname != nil {
		return *x.Surname
	}
	return ""
}

func (x *ExtendedSignerDetails) GetFirstName() string {
	if x != nil && x.FirstName != nil {
		return *x.FirstName
	}
	return ""
}

func (x *ExtendedSignerDetails) GetPatronymic() string {
	if x != nil && x.Patronymic != nil {
		return *x.Patronymic
	}
	return ""
}

func (x *ExtendedSignerDetails) GetJobTitle() string {
	if x != nil && x.JobTitle != nil {
		return *x.JobTitle
	}
	return ""
}

func (x *ExtendedSignerDetails) GetInn() string {
	if x != nil && x.Inn != nil {
		return *x.Inn
	}
	return ""
}

func (x *ExtendedSignerDetails) GetRegistrationCertificate() string {
	if x != nil && x.RegistrationCertificate != nil {
		return *x.RegistrationCertificate
	}
	return ""
}

func (x *ExtendedSignerDetails) GetSignerType() SignerType {
	if x != nil && x.SignerType != nil {
		return *x.SignerType
	}
	return Default_ExtendedSignerDetails_SignerType
}

func (x *ExtendedSignerDetails) GetSignerOrganizationName() string {
	if x != nil && x.SignerOrganizationName != nil {
		return *x.SignerOrganizationName
	}
	return ""
}

func (x *ExtendedSignerDetails) GetSignerInfo() string {
	if x != nil && x.SignerInfo != nil {
		return *x.SignerInfo
	}
	return ""
}

func (x *ExtendedSignerDetails) GetSignerPowers() SignerPowers {
	if x != nil && x.SignerPowers != nil {
		return *x.SignerPowers
	}
	return SignerPowers_InvoiceSigner
}

func (x *ExtendedSignerDetails) GetSignerStatus() SignerStatus {
	if x != nil && x.SignerStatus != nil {
		return *x.SignerStatus
	}
	return SignerStatus_SellerEmployee
}

func (x *ExtendedSignerDetails) GetSignerPowersBase() string {
	if x != nil && x.SignerPowersBase != nil {
		return *x.SignerPowersBase
	}
	return ""
}

func (x *ExtendedSignerDetails) GetSignerOrgPowersBase() string {
	if x != nil && x.SignerOrgPowersBase != nil {
		return *x.SignerOrgPowersBase
	}
	return ""
}

type ExtendedSignerDetailsToPost struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JobTitle                *string       `protobuf:"bytes,1,opt,name=JobTitle" json:"JobTitle,omitempty"`
	RegistrationCertificate *string       `protobuf:"bytes,2,opt,name=RegistrationCertificate" json:"RegistrationCertificate,omitempty"`
	SignerType              *SignerType   `protobuf:"varint,3,req,name=SignerType,enum=SignerType" json:"SignerType,omitempty"`       // Физическое лицо-Индивидуальный предприниматель – представитель юридического лица (ФЛ-ИП-ЮЛ)
	SignerInfo              *string       `protobuf:"bytes,4,opt,name=SignerInfo" json:"SignerInfo,omitempty"`                        // Иные сведения, идентифицирующие лицо (Юл.ИныеСвед или СвИП.ИныеСвед  или ФЛ.ИныеСвед)
	SignerPowers            *SignerPowers `protobuf:"varint,5,req,name=SignerPowers,enum=SignerPowers" json:"SignerPowers,omitempty"` // Область полномочий (ОблПолн)
	SignerStatus            *SignerStatus `protobuf:"varint,6,req,name=SignerStatus,enum=SignerStatus" json:"SignerStatus,omitempty"` // Статус (Статус)
	SignerPowersBase        *string       `protobuf:"bytes,7,opt,name=SignerPowersBase" json:"SignerPowersBase,omitempty"`            // Основание полномочий (доверия) (ОснПолн)
	SignerOrgPowersBase     *string       `protobuf:"bytes,8,opt,name=SignerOrgPowersBase" json:"SignerOrgPowersBase,omitempty"`      // Основание полномочий (доверия) организации (ОснПолнОрг)
}

func (x *ExtendedSignerDetailsToPost) Reset() {
	*x = ExtendedSignerDetailsToPost{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[263]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExtendedSignerDetailsToPost) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtendedSignerDetailsToPost) ProtoMessage() {}

func (x *ExtendedSignerDetailsToPost) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[263]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtendedSignerDetailsToPost.ProtoReflect.Descriptor instead.
func (*ExtendedSignerDetailsToPost) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{263}
}

func (x *ExtendedSignerDetailsToPost) GetJobTitle() string {
	if x != nil && x.JobTitle != nil {
		return *x.JobTitle
	}
	return ""
}

func (x *ExtendedSignerDetailsToPost) GetRegistrationCertificate() string {
	if x != nil && x.RegistrationCertificate != nil {
		return *x.RegistrationCertificate
	}
	return ""
}

func (x *ExtendedSignerDetailsToPost) GetSignerType() SignerType {
	if x != nil && x.SignerType != nil {
		return *x.SignerType
	}
	return SignerType_LegalEntitySignerType
}

func (x *ExtendedSignerDetailsToPost) GetSignerInfo() string {
	if x != nil && x.SignerInfo != nil {
		return *x.SignerInfo
	}
	return ""
}

func (x *ExtendedSignerDetailsToPost) GetSignerPowers() SignerPowers {
	if x != nil && x.SignerPowers != nil {
		return *x.SignerPowers
	}
	return SignerPowers_InvoiceSigner
}

func (x *ExtendedSignerDetailsToPost) GetSignerStatus() SignerStatus {
	if x != nil && x.SignerStatus != nil {
		return *x.SignerStatus
	}
	return SignerStatus_SellerEmployee
}

func (x *ExtendedSignerDetailsToPost) GetSignerPowersBase() string {
	if x != nil && x.SignerPowersBase != nil {
		return *x.SignerPowersBase
	}
	return ""
}

func (x *ExtendedSignerDetailsToPost) GetSignerOrgPowersBase() string {
	if x != nil && x.SignerOrgPowersBase != nil {
		return *x.SignerOrgPowersBase
	}
	return ""
}

type Shipper struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SameAsSeller *bool                     `protobuf:"varint,1,opt,name=SameAsSeller" json:"SameAsSeller,omitempty"` // совпадает с продавцом // ОнЖе
	OrgInfo      *ExtendedOrganizationInfo `protobuf:"bytes,2,opt,name=OrgInfo" json:"OrgInfo,omitempty"`            // реквизиты организации // ГрузОтпр
}

func (x *Shipper) Reset() {
	*x = Shipper{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[264]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Shipper) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Shipper) ProtoMessage() {}

func (x *Shipper) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[264]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Shipper.ProtoReflect.Descriptor instead.
func (*Shipper) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{264}
}

func (x *Shipper) GetSameAsSeller() bool {
	if x != nil && x.SameAsSeller != nil {
		return *x.SameAsSeller
	}
	return false
}

func (x *Shipper) GetOrgInfo() *ExtendedOrganizationInfo {
	if x != nil {
		return x.OrgInfo
	}
	return nil
}

type InvoiceTable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items                []*ExtendedInvoiceItem `protobuf:"bytes,1,rep,name=Items" json:"Items,omitempty"`                               // информация о товарах // СведТов
	TotalWithVatExcluded *string                `protobuf:"bytes,2,opt,name=TotalWithVatExcluded" json:"TotalWithVatExcluded,omitempty"` // Сумма без учета налога // СтТовБезНДСВсего
	Vat                  *string                `protobuf:"bytes,3,req,name=Vat" json:"Vat,omitempty"`                                   // Сумма налога // СумНалВсего
	Total                *string                `protobuf:"bytes,4,req,name=Total" json:"Total,omitempty"`                               // Сумма всего // СтТовУчНалВсего
	TotalNet             *string                `protobuf:"bytes,5,opt,name=TotalNet" json:"TotalNet,omitempty"`                         // Нетто всего // НеттоВс
}

func (x *InvoiceTable) Reset() {
	*x = InvoiceTable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[265]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InvoiceTable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InvoiceTable) ProtoMessage() {}

func (x *InvoiceTable) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[265]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InvoiceTable.ProtoReflect.Descriptor instead.
func (*InvoiceTable) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{265}
}

func (x *InvoiceTable) GetItems() []*ExtendedInvoiceItem {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *InvoiceTable) GetTotalWithVatExcluded() string {
	if x != nil && x.TotalWithVatExcluded != nil {
		return *x.TotalWithVatExcluded
	}
	return ""
}

func (x *InvoiceTable) GetVat() string {
	if x != nil && x.Vat != nil {
		return *x.Vat
	}
	return ""
}

func (x *InvoiceTable) GetTotal() string {
	if x != nil && x.Total != nil {
		return *x.Total
	}
	return ""
}

func (x *InvoiceTable) GetTotalNet() string {
	if x != nil && x.TotalNet != nil {
		return *x.TotalNet
	}
	return ""
}

type ExtendedInvoiceItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Product                 *string               `protobuf:"bytes,1,req,name=Product" json:"Product,omitempty"`                                 // наименование товара // НаимТов
	Unit                    *string               `protobuf:"bytes,2,opt,name=Unit" json:"Unit,omitempty"`                                       // единицы измерения товара (код) // ОКЕИ_Тов
	UnitName                *string               `protobuf:"bytes,3,opt,name=UnitName" json:"UnitName,omitempty"`                               // наименование единицы измерения товара. Пользователь заполняет, если ОКЕИ_Тов=’0000’// НаимЕдИзм
	Quantity                *string               `protobuf:"bytes,4,opt,name=Quantity" json:"Quantity,omitempty"`                               // количество единиц товара // КолТов
	Price                   *string               `protobuf:"bytes,5,opt,name=Price" json:"Price,omitempty"`                                     // цена за единицу товара // ЦенаТов
	Excise                  *string               `protobuf:"bytes,6,opt,name=Excise" json:"Excise,omitempty"`                                   // акциз // СумАкциз
	TaxRate                 *TaxRate              `protobuf:"varint,7,req,name=TaxRate,enum=TaxRate" json:"TaxRate,omitempty"`                   // ставка налога // НалСт
	SubtotalWithVatExcluded *string               `protobuf:"bytes,8,opt,name=SubtotalWithVatExcluded" json:"SubtotalWithVatExcluded,omitempty"` // сумма без учета налога // СтТовБезНДС
	Vat                     *string               `protobuf:"bytes,9,opt,name=Vat" json:"Vat,omitempty"`                                         // сумма налога // СумНал
	Subtotal                *string               `protobuf:"bytes,10,req,name=Subtotal" json:"Subtotal,omitempty"`                              // сумма всего // СтТовУчНал
	CustomsDeclarations     []*CustomsDeclaration `protobuf:"bytes,11,rep,name=CustomsDeclarations" json:"CustomsDeclarations,omitempty"`        // номера таможенных деклараций // СвТД
	ItemMark                *ItemMark             `protobuf:"varint,12,opt,name=ItemMark,enum=ItemMark" json:"ItemMark,omitempty"`               // Признак товар-работа-услуга // ПрТовРаб
	AdditionalProperty      *string               `protobuf:"bytes,13,opt,name=AdditionalProperty" json:"AdditionalProperty,omitempty"`          // Дополнительная информация о признаке //ДопПризн
	ItemVendorCode          *string               `protobuf:"bytes,14,opt,name=ItemVendorCode" json:"ItemVendorCode,omitempty"`                  // Характеристика/код/артикул/сорт товара // КодТов
	ItemToRelease           *string               `protobuf:"bytes,15,opt,name=ItemToRelease" json:"ItemToRelease,omitempty"`                    // Количество надлежит отпустить // НадлОтп
	ItemAccountDebit        *string               `protobuf:"bytes,16,opt,name=ItemAccountDebit" json:"ItemAccountDebit,omitempty"`              // Корреспондирующие счета: дебет // КорСчДебет
	ItemAccountCredit       *string               `protobuf:"bytes,17,opt,name=ItemAccountCredit" json:"ItemAccountCredit,omitempty"`            // Корреспондирующие счета: кредит // КорСчКредит
	AdditionalInfo          []*AdditionalInfo     `protobuf:"bytes,18,rep,name=AdditionalInfo" json:"AdditionalInfo,omitempty"`                  // информационное поле документа // ИнфПолФХЖ2
}

func (x *ExtendedInvoiceItem) Reset() {
	*x = ExtendedInvoiceItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[266]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExtendedInvoiceItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtendedInvoiceItem) ProtoMessage() {}

func (x *ExtendedInvoiceItem) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[266]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtendedInvoiceItem.ProtoReflect.Descriptor instead.
func (*ExtendedInvoiceItem) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{266}
}

func (x *ExtendedInvoiceItem) GetProduct() string {
	if x != nil && x.Product != nil {
		return *x.Product
	}
	return ""
}

func (x *ExtendedInvoiceItem) GetUnit() string {
	if x != nil && x.Unit != nil {
		return *x.Unit
	}
	return ""
}

func (x *ExtendedInvoiceItem) GetUnitName() string {
	if x != nil && x.UnitName != nil {
		return *x.UnitName
	}
	return ""
}

func (x *ExtendedInvoiceItem) GetQuantity() string {
	if x != nil && x.Quantity != nil {
		return *x.Quantity
	}
	return ""
}

func (x *ExtendedInvoiceItem) GetPrice() string {
	if x != nil && x.Price != nil {
		return *x.Price
	}
	return ""
}

func (x *ExtendedInvoiceItem) GetExcise() string {
	if x != nil && x.Excise != nil {
		return *x.Excise
	}
	return ""
}

func (x *ExtendedInvoiceItem) GetTaxRate() TaxRate {
	if x != nil && x.TaxRate != nil {
		return *x.TaxRate
	}
	return TaxRate_NoVat
}

func (x *ExtendedInvoiceItem) GetSubtotalWithVatExcluded() string {
	if x != nil && x.SubtotalWithVatExcluded != nil {
		return *x.SubtotalWithVatExcluded
	}
	return ""
}

func (x *ExtendedInvoiceItem) GetVat() string {
	if x != nil && x.Vat != nil {
		return *x.Vat
	}
	return ""
}

func (x *ExtendedInvoiceItem) GetSubtotal() string {
	if x != nil && x.Subtotal != nil {
		return *x.Subtotal
	}
	return ""
}

func (x *ExtendedInvoiceItem) GetCustomsDeclarations() []*CustomsDeclaration {
	if x != nil {
		return x.CustomsDeclarations
	}
	return nil
}

func (x *ExtendedInvoiceItem) GetItemMark() ItemMark {
	if x != nil && x.ItemMark != nil {
		return *x.ItemMark
	}
	return ItemMark_NotSpecified
}

func (x *ExtendedInvoiceItem) GetAdditionalProperty() string {
	if x != nil && x.AdditionalProperty != nil {
		return *x.AdditionalProperty
	}
	return ""
}

func (x *ExtendedInvoiceItem) GetItemVendorCode() string {
	if x != nil && x.ItemVendorCode != nil {
		return *x.ItemVendorCode
	}
	return ""
}

func (x *ExtendedInvoiceItem) GetItemToRelease() string {
	if x != nil && x.ItemToRelease != nil {
		return *x.ItemToRelease
	}
	return ""
}

func (x *ExtendedInvoiceItem) GetItemAccountDebit() string {
	if x != nil && x.ItemAccountDebit != nil {
		return *x.ItemAccountDebit
	}
	return ""
}

func (x *ExtendedInvoiceItem) GetItemAccountCredit() string {
	if x != nil && x.ItemAccountCredit != nil {
		return *x.ItemAccountCredit
	}
	return ""
}

func (x *ExtendedInvoiceItem) GetAdditionalInfo() []*AdditionalInfo {
	if x != nil {
		return x.AdditionalInfo
	}
	return nil
}

type CustomsDeclaration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CountryCode       *string `protobuf:"bytes,1,req,name=CountryCode" json:"CountryCode,omitempty"`             // код страны происхождения товара
	DeclarationNumber *string `protobuf:"bytes,2,req,name=DeclarationNumber" json:"DeclarationNumber,omitempty"` // номер таможенной декларации
}

func (x *CustomsDeclaration) Reset() {
	*x = CustomsDeclaration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[267]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomsDeclaration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomsDeclaration) ProtoMessage() {}

func (x *CustomsDeclaration) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[267]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomsDeclaration.ProtoReflect.Descriptor instead.
func (*CustomsDeclaration) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{267}
}

func (x *CustomsDeclaration) GetCountryCode() string {
	if x != nil && x.CountryCode != nil {
		return *x.CountryCode
	}
	return ""
}

func (x *CustomsDeclaration) GetDeclarationNumber() string {
	if x != nil && x.DeclarationNumber != nil {
		return *x.DeclarationNumber
	}
	return ""
}

type TransferInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperationInfo            *string                   `protobuf:"bytes,1,req,name=OperationInfo" json:"OperationInfo,omitempty"`                        // Содержание операции // СодОпер
	OperationType            *string                   `protobuf:"bytes,2,opt,name=OperationType" json:"OperationType,omitempty"`                        // Вид операции // ВидОпер
	TransferDate             *string                   `protobuf:"bytes,3,opt,name=TransferDate" json:"TransferDate,omitempty"`                          // Дата отгрузки // ДатаПер
	TransferBase             []*TransferBase           `protobuf:"bytes,4,rep,name=TransferBase" json:"TransferBase,omitempty"`                          // Основание отгрузки //ОснПер
	TransferTextInfo         *string                   `protobuf:"bytes,5,opt,name=TransferTextInfo" json:"TransferTextInfo,omitempty"`                  // Сведения о транспортировке и грузе // СвТранГруз
	Waybill                  []*Waybill                `protobuf:"bytes,6,rep,name=Waybill" json:"Waybill,omitempty"`                                    // Транспортная накладная //ТранНакл
	Carrier                  *ExtendedOrganizationInfo `protobuf:"bytes,7,opt,name=Carrier" json:"Carrier,omitempty"`                                    // Перевозчик // Перевозчик
	Employee                 *EmployeeOld              `protobuf:"bytes,8,opt,name=Employee" json:"Employee,omitempty"`                                  // Работник организации продавца //РабОргПрод
	OtherIssuer              *OtherIssuer              `protobuf:"bytes,9,opt,name=OtherIssuer" json:"OtherIssuer,omitempty"`                            // Иное лицо //ИнЛицо
	CreatedThingTransferDate *string                   `protobuf:"bytes,10,opt,name=CreatedThingTransferDate" json:"CreatedThingTransferDate,omitempty"` // Дата передачи вещи, изготовленной по договору //ДатаПерВещ
	CreatedThingInfo         *string                   `protobuf:"bytes,11,opt,name=CreatedThingInfo" json:"CreatedThingInfo,omitempty"`                 // Сведения о передаче, изготовленной по договору //СвПерВещ
	AdditionalInfoId         *AdditionalInfoId         `protobuf:"bytes,12,opt,name=AdditionalInfoId" json:"AdditionalInfoId,omitempty"`                 // Информационное поле документа // ИнфПолФХЖ3
}

func (x *TransferInfo) Reset() {
	*x = TransferInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[268]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransferInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferInfo) ProtoMessage() {}

func (x *TransferInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[268]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferInfo.ProtoReflect.Descriptor instead.
func (*TransferInfo) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{268}
}

func (x *TransferInfo) GetOperationInfo() string {
	if x != nil && x.OperationInfo != nil {
		return *x.OperationInfo
	}
	return ""
}

func (x *TransferInfo) GetOperationType() string {
	if x != nil && x.OperationType != nil {
		return *x.OperationType
	}
	return ""
}

func (x *TransferInfo) GetTransferDate() string {
	if x != nil && x.TransferDate != nil {
		return *x.TransferDate
	}
	return ""
}

func (x *TransferInfo) GetTransferBase() []*TransferBase {
	if x != nil {
		return x.TransferBase
	}
	return nil
}

func (x *TransferInfo) GetTransferTextInfo() string {
	if x != nil && x.TransferTextInfo != nil {
		return *x.TransferTextInfo
	}
	return ""
}

func (x *TransferInfo) GetWaybill() []*Waybill {
	if x != nil {
		return x.Waybill
	}
	return nil
}

func (x *TransferInfo) GetCarrier() *ExtendedOrganizationInfo {
	if x != nil {
		return x.Carrier
	}
	return nil
}

func (x *TransferInfo) GetEmployee() *EmployeeOld {
	if x != nil {
		return x.Employee
	}
	return nil
}

func (x *TransferInfo) GetOtherIssuer() *OtherIssuer {
	if x != nil {
		return x.OtherIssuer
	}
	return nil
}

func (x *TransferInfo) GetCreatedThingTransferDate() string {
	if x != nil && x.CreatedThingTransferDate != nil {
		return *x.CreatedThingTransferDate
	}
	return ""
}

func (x *TransferInfo) GetCreatedThingInfo() string {
	if x != nil && x.CreatedThingInfo != nil {
		return *x.CreatedThingInfo
	}
	return ""
}

func (x *TransferInfo) GetAdditionalInfoId() *AdditionalInfoId {
	if x != nil {
		return x.AdditionalInfoId
	}
	return nil
}

type ExtendedOrganizationInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BoxId                                   *string  `protobuf:"bytes,1,opt,name=BoxId" json:"BoxId,omitempty"`
	OrgName                                 *string  `protobuf:"bytes,2,opt,name=OrgName" json:"OrgName,omitempty"`
	Inn                                     *string  `protobuf:"bytes,3,opt,name=Inn" json:"Inn,omitempty"`
	Kpp                                     *string  `protobuf:"bytes,4,opt,name=Kpp" json:"Kpp,omitempty"`
	Address                                 *Address `protobuf:"bytes,5,opt,name=Address" json:"Address,omitempty"`
	FnsParticipantId                        *string  `protobuf:"bytes,6,opt,name=FnsParticipantId" json:"FnsParticipantId,omitempty"`
	OrgType                                 *OrgType `protobuf:"varint,7,req,name=OrgType,enum=OrgType" json:"OrgType,omitempty"`
	Okopf                                   *string  `protobuf:"bytes,8,opt,name=Okopf" json:"Okopf,omitempty"`
	Okpo                                    *string  `protobuf:"bytes,9,opt,name=Okpo" json:"Okpo,omitempty"`
	Okdp                                    *string  `protobuf:"bytes,10,opt,name=Okdp" json:"Okdp,omitempty"`
	Phone                                   *string  `protobuf:"bytes,11,opt,name=Phone" json:"Phone,omitempty"`
	Email                                   *string  `protobuf:"bytes,12,opt,name=Email" json:"Email,omitempty"`
	CorrespondentAccount                    *string  `protobuf:"bytes,13,opt,name=CorrespondentAccount" json:"CorrespondentAccount,omitempty"`
	BankAccountNumber                       *string  `protobuf:"bytes,14,opt,name=BankAccountNumber" json:"BankAccountNumber,omitempty"`
	BankName                                *string  `protobuf:"bytes,15,opt,name=BankName" json:"BankName,omitempty"`
	BankId                                  *string  `protobuf:"bytes,16,opt,name=BankId" json:"BankId,omitempty"`
	Department                              *string  `protobuf:"bytes,17,opt,name=Department" json:"Department,omitempty"`
	OrganizationAdditionalInfo              *string  `protobuf:"bytes,18,opt,name=OrganizationAdditionalInfo" json:"OrganizationAdditionalInfo,omitempty"`
	OrganizationOrPersonInfo                *string  `protobuf:"bytes,19,opt,name=OrganizationOrPersonInfo" json:"OrganizationOrPersonInfo,omitempty"`
	IndividualEntityRegistrationCertificate *string  `protobuf:"bytes,20,opt,name=IndividualEntityRegistrationCertificate" json:"IndividualEntityRegistrationCertificate,omitempty"`
}

func (x *ExtendedOrganizationInfo) Reset() {
	*x = ExtendedOrganizationInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[269]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExtendedOrganizationInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtendedOrganizationInfo) ProtoMessage() {}

func (x *ExtendedOrganizationInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[269]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtendedOrganizationInfo.ProtoReflect.Descriptor instead.
func (*ExtendedOrganizationInfo) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{269}
}

func (x *ExtendedOrganizationInfo) GetBoxId() string {
	if x != nil && x.BoxId != nil {
		return *x.BoxId
	}
	return ""
}

func (x *ExtendedOrganizationInfo) GetOrgName() string {
	if x != nil && x.OrgName != nil {
		return *x.OrgName
	}
	return ""
}

func (x *ExtendedOrganizationInfo) GetInn() string {
	if x != nil && x.Inn != nil {
		return *x.Inn
	}
	return ""
}

func (x *ExtendedOrganizationInfo) GetKpp() string {
	if x != nil && x.Kpp != nil {
		return *x.Kpp
	}
	return ""
}

func (x *ExtendedOrganizationInfo) GetAddress() *Address {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *ExtendedOrganizationInfo) GetFnsParticipantId() string {
	if x != nil && x.FnsParticipantId != nil {
		return *x.FnsParticipantId
	}
	return ""
}

func (x *ExtendedOrganizationInfo) GetOrgType() OrgType {
	if x != nil && x.OrgType != nil {
		return *x.OrgType
	}
	return OrgType_LegalEntityOrgType
}

func (x *ExtendedOrganizationInfo) GetOkopf() string {
	if x != nil && x.Okopf != nil {
		return *x.Okopf
	}
	return ""
}

func (x *ExtendedOrganizationInfo) GetOkpo() string {
	if x != nil && x.Okpo != nil {
		return *x.Okpo
	}
	return ""
}

func (x *ExtendedOrganizationInfo) GetOkdp() string {
	if x != nil && x.Okdp != nil {
		return *x.Okdp
	}
	return ""
}

func (x *ExtendedOrganizationInfo) GetPhone() string {
	if x != nil && x.Phone != nil {
		return *x.Phone
	}
	return ""
}

func (x *ExtendedOrganizationInfo) GetEmail() string {
	if x != nil && x.Email != nil {
		return *x.Email
	}
	return ""
}

func (x *ExtendedOrganizationInfo) GetCorrespondentAccount() string {
	if x != nil && x.CorrespondentAccount != nil {
		return *x.CorrespondentAccount
	}
	return ""
}

func (x *ExtendedOrganizationInfo) GetBankAccountNumber() string {
	if x != nil && x.BankAccountNumber != nil {
		return *x.BankAccountNumber
	}
	return ""
}

func (x *ExtendedOrganizationInfo) GetBankName() string {
	if x != nil && x.BankName != nil {
		return *x.BankName
	}
	return ""
}

func (x *ExtendedOrganizationInfo) GetBankId() string {
	if x != nil && x.BankId != nil {
		return *x.BankId
	}
	return ""
}

func (x *ExtendedOrganizationInfo) GetDepartment() string {
	if x != nil && x.Department != nil {
		return *x.Department
	}
	return ""
}

func (x *ExtendedOrganizationInfo) GetOrganizationAdditionalInfo() string {
	if x != nil && x.OrganizationAdditionalInfo != nil {
		return *x.OrganizationAdditionalInfo
	}
	return ""
}

func (x *ExtendedOrganizationInfo) GetOrganizationOrPersonInfo() string {
	if x != nil && x.OrganizationOrPersonInfo != nil {
		return *x.OrganizationOrPersonInfo
	}
	return ""
}

func (x *ExtendedOrganizationInfo) GetIndividualEntityRegistrationCertificate() string {
	if x != nil && x.IndividualEntityRegistrationCertificate != nil {
		return *x.IndividualEntityRegistrationCertificate
	}
	return ""
}

type TransferBase struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseDocumentName   *string `protobuf:"bytes,1,req,name=BaseDocumentName" json:"BaseDocumentName,omitempty"`     // Наименование документа-основания отгрузки //НаимОсн
	BaseDocumentNumber *string `protobuf:"bytes,2,opt,name=BaseDocumentNumber" json:"BaseDocumentNumber,omitempty"` // Номер документа-основания отгрузки //НомОсн
	BaseDocumentDate   *string `protobuf:"bytes,3,opt,name=BaseDocumentDate" json:"BaseDocumentDate,omitempty"`     // Дата документа-основания отгрузки //ДатаОсн
	BaseDocumentInfo   *string `protobuf:"bytes,4,opt,name=BaseDocumentInfo" json:"BaseDocumentInfo,omitempty"`     // Дополнительные сведения документа-основания отгрузки //ДопСвОсн
}

func (x *TransferBase) Reset() {
	*x = TransferBase{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[270]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransferBase) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferBase) ProtoMessage() {}

func (x *TransferBase) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[270]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferBase.ProtoReflect.Descriptor instead.
func (*TransferBase) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{270}
}

func (x *TransferBase) GetBaseDocumentName() string {
	if x != nil && x.BaseDocumentName != nil {
		return *x.BaseDocumentName
	}
	return ""
}

func (x *TransferBase) GetBaseDocumentNumber() string {
	if x != nil && x.BaseDocumentNumber != nil {
		return *x.BaseDocumentNumber
	}
	return ""
}

func (x *TransferBase) GetBaseDocumentDate() string {
	if x != nil && x.BaseDocumentDate != nil {
		return *x.BaseDocumentDate
	}
	return ""
}

func (x *TransferBase) GetBaseDocumentInfo() string {
	if x != nil && x.BaseDocumentInfo != nil {
		return *x.BaseDocumentInfo
	}
	return ""
}

type Waybill struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransferDocumentNumber *string `protobuf:"bytes,1,req,name=TransferDocumentNumber" json:"TransferDocumentNumber,omitempty"` // Номер транспортной накладной // НомерТранНакл
	TransferDocumentDate   *string `protobuf:"bytes,2,req,name=TransferDocumentDate" json:"TransferDocumentDate,omitempty"`     // Дата транспортной накладной // ДатаТранНакл
}

func (x *Waybill) Reset() {
	*x = Waybill{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[271]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Waybill) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Waybill) ProtoMessage() {}

func (x *Waybill) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[271]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Waybill.ProtoReflect.Descriptor instead.
func (*Waybill) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{271}
}

func (x *Waybill) GetTransferDocumentNumber() string {
	if x != nil && x.TransferDocumentNumber != nil {
		return *x.TransferDocumentNumber
	}
	return ""
}

func (x *Waybill) GetTransferDocumentDate() string {
	if x != nil && x.TransferDocumentDate != nil {
		return *x.TransferDocumentDate
	}
	return ""
}

type EmployeeOld struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EmployeePosition   *string `protobuf:"bytes,1,req,name=EmployeePosition" json:"EmployeePosition,omitempty"`     // Должность // Должность
	EmployeeInfo       *string `protobuf:"bytes,2,opt,name=EmployeeInfo" json:"EmployeeInfo,omitempty"`             // Иные сведения, идентифицирующие физическое лицо // ИныеСвед
	EmployeeBase       *string `protobuf:"bytes,3,opt,name=EmployeeBase" json:"EmployeeBase,omitempty"`             // Основание полномочий представителя // ОснПолн
	TransferSurname    *string `protobuf:"bytes,4,req,name=TransferSurname" json:"TransferSurname,omitempty"`       // Фамилия //Фамилия
	TransferFirstName  *string `protobuf:"bytes,5,req,name=TransferFirstName" json:"TransferFirstName,omitempty"`   // Имя //Имя
	TransferPatronymic *string `protobuf:"bytes,6,opt,name=TransferPatronymic" json:"TransferPatronymic,omitempty"` // Отчество //Отчество
}

func (x *EmployeeOld) Reset() {
	*x = EmployeeOld{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[272]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmployeeOld) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmployeeOld) ProtoMessage() {}

func (x *EmployeeOld) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[272]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmployeeOld.ProtoReflect.Descriptor instead.
func (*EmployeeOld) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{272}
}

func (x *EmployeeOld) GetEmployeePosition() string {
	if x != nil && x.EmployeePosition != nil {
		return *x.EmployeePosition
	}
	return ""
}

func (x *EmployeeOld) GetEmployeeInfo() string {
	if x != nil && x.EmployeeInfo != nil {
		return *x.EmployeeInfo
	}
	return ""
}

func (x *EmployeeOld) GetEmployeeBase() string {
	if x != nil && x.EmployeeBase != nil {
		return *x.EmployeeBase
	}
	return ""
}

func (x *EmployeeOld) GetTransferSurname() string {
	if x != nil && x.TransferSurname != nil {
		return *x.TransferSurname
	}
	return ""
}

func (x *EmployeeOld) GetTransferFirstName() string {
	if x != nil && x.TransferFirstName != nil {
		return *x.TransferFirstName
	}
	return ""
}

func (x *EmployeeOld) GetTransferPatronymic() string {
	if x != nil && x.TransferPatronymic != nil {
		return *x.TransferPatronymic
	}
	return ""
}

type OtherIssuer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransferEmployeePosition *string `protobuf:"bytes,1,opt,name=TransferEmployeePosition" json:"TransferEmployeePosition,omitempty"` // Должность представителя организации // Должность //если заполнено - формируется структура «ПредОргПер», если не заполнено – «ФЛПер»
	TransferEmployeeInfo     *string `protobuf:"bytes,2,opt,name=TransferEmployeeInfo" json:"TransferEmployeeInfo,omitempty"`         // Иные сведения, идентифицирующие физическое лицо // ИныеСвед
	TransferOrganizationName *string `protobuf:"bytes,3,opt,name=TransferOrganizationName" json:"TransferOrganizationName,omitempty"` //Наименование организации, которой доверена передача // НаимОргПер
	TransferOrganizationBase *string `protobuf:"bytes,4,opt,name=TransferOrganizationBase" json:"TransferOrganizationBase,omitempty"` // Основание, по которому организации доверена передача // ОснДоверОргПер
	TransferEmployeeBase     *string `protobuf:"bytes,5,opt,name=TransferEmployeeBase" json:"TransferEmployeeBase,omitempty"`         //Основание полномочий представителя // ОснПолнПредПер (ОснДоверФЛ)
	TransferSurname          *string `protobuf:"bytes,6,req,name=TransferSurname" json:"TransferSurname,omitempty"`                   //Фамилия //Фамилия
	TransferFirstName        *string `protobuf:"bytes,7,req,name=TransferFirstName" json:"TransferFirstName,omitempty"`               //Имя //Имя
	TransferPatronymic       *string `protobuf:"bytes,8,opt,name=TransferPatronymic" json:"TransferPatronymic,omitempty"`             //Отчество //Отчество
}

func (x *OtherIssuer) Reset() {
	*x = OtherIssuer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[273]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OtherIssuer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OtherIssuer) ProtoMessage() {}

func (x *OtherIssuer) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[273]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OtherIssuer.ProtoReflect.Descriptor instead.
func (*OtherIssuer) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{273}
}

func (x *OtherIssuer) GetTransferEmployeePosition() string {
	if x != nil && x.TransferEmployeePosition != nil {
		return *x.TransferEmployeePosition
	}
	return ""
}

func (x *OtherIssuer) GetTransferEmployeeInfo() string {
	if x != nil && x.TransferEmployeeInfo != nil {
		return *x.TransferEmployeeInfo
	}
	return ""
}

func (x *OtherIssuer) GetTransferOrganizationName() string {
	if x != nil && x.TransferOrganizationName != nil {
		return *x.TransferOrganizationName
	}
	return ""
}

func (x *OtherIssuer) GetTransferOrganizationBase() string {
	if x != nil && x.TransferOrganizationBase != nil {
		return *x.TransferOrganizationBase
	}
	return ""
}

func (x *OtherIssuer) GetTransferEmployeeBase() string {
	if x != nil && x.TransferEmployeeBase != nil {
		return *x.TransferEmployeeBase
	}
	return ""
}

func (x *OtherIssuer) GetTransferSurname() string {
	if x != nil && x.TransferSurname != nil {
		return *x.TransferSurname
	}
	return ""
}

func (x *OtherIssuer) GetTransferFirstName() string {
	if x != nil && x.TransferFirstName != nil {
		return *x.TransferFirstName
	}
	return ""
}

func (x *OtherIssuer) GetTransferPatronymic() string {
	if x != nil && x.TransferPatronymic != nil {
		return *x.TransferPatronymic
	}
	return ""
}

type AdditionalInfoId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InfoFileId     *string           `protobuf:"bytes,1,opt,name=InfoFileId" json:"InfoFileId,omitempty"`         // Идентификатор файла информационного поля // ИдФайлИнфПол
	AdditionalInfo []*AdditionalInfo `protobuf:"bytes,2,rep,name=AdditionalInfo" json:"AdditionalInfo,omitempty"` //Текстовая информация // ТекстИнф
}

func (x *AdditionalInfoId) Reset() {
	*x = AdditionalInfoId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[274]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdditionalInfoId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdditionalInfoId) ProtoMessage() {}

func (x *AdditionalInfoId) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[274]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdditionalInfoId.ProtoReflect.Descriptor instead.
func (*AdditionalInfoId) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{274}
}

func (x *AdditionalInfoId) GetInfoFileId() string {
	if x != nil && x.InfoFileId != nil {
		return *x.InfoFileId
	}
	return ""
}

func (x *AdditionalInfoId) GetAdditionalInfo() []*AdditionalInfo {
	if x != nil {
		return x.AdditionalInfo
	}
	return nil
}

type AdditionalInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    *string `protobuf:"bytes,1,req,name=Id" json:"Id,omitempty"`       // Идентификатор
	Value *string `protobuf:"bytes,2,req,name=Value" json:"Value,omitempty"` // Значение
}

func (x *AdditionalInfo) Reset() {
	*x = AdditionalInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[275]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdditionalInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdditionalInfo) ProtoMessage() {}

func (x *AdditionalInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[275]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdditionalInfo.ProtoReflect.Descriptor instead.
func (*AdditionalInfo) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{275}
}

func (x *AdditionalInfo) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *AdditionalInfo) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

type DocumentList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalCount     *int32      `protobuf:"varint,1,req,name=TotalCount" json:"TotalCount,omitempty"`
	Documents      []*Document `protobuf:"bytes,2,rep,name=Documents" json:"Documents,omitempty"`
	HasMoreResults *bool       `protobuf:"varint,3,opt,name=HasMoreResults" json:"HasMoreResults,omitempty"`
}

func (x *DocumentList) Reset() {
	*x = DocumentList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[276]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DocumentList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DocumentList) ProtoMessage() {}

func (x *DocumentList) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[276]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DocumentList.ProtoReflect.Descriptor instead.
func (*DocumentList) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{276}
}

func (x *DocumentList) GetTotalCount() int32 {
	if x != nil && x.TotalCount != nil {
		return *x.TotalCount
	}
	return 0
}

func (x *DocumentList) GetDocuments() []*Document {
	if x != nil {
		return x.Documents
	}
	return nil
}

func (x *DocumentList) GetHasMoreResults() bool {
	if x != nil && x.HasMoreResults != nil {
		return *x.HasMoreResults
	}
	return false
}

type GetForwardedDocumentEventsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filter                     *TimeBasedFilter `protobuf:"bytes,1,req,name=Filter" json:"Filter,omitempty"`
	AfterIndexKey              []byte           `protobuf:"bytes,2,opt,name=AfterIndexKey" json:"AfterIndexKey,omitempty"`
	PopulateForwardedDocuments *bool            `protobuf:"varint,3,opt,name=PopulateForwardedDocuments,def=0" json:"PopulateForwardedDocuments,omitempty"`
	InjectEntityContent        *bool            `protobuf:"varint,4,opt,name=InjectEntityContent,def=0" json:"InjectEntityContent,omitempty"`
}

// Default values for GetForwardedDocumentEventsRequest fields.
const (
	Default_GetForwardedDocumentEventsRequest_PopulateForwardedDocuments = bool(false)
	Default_GetForwardedDocumentEventsRequest_InjectEntityContent        = bool(false)
)

func (x *GetForwardedDocumentEventsRequest) Reset() {
	*x = GetForwardedDocumentEventsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[277]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetForwardedDocumentEventsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetForwardedDocumentEventsRequest) ProtoMessage() {}

func (x *GetForwardedDocumentEventsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[277]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetForwardedDocumentEventsRequest.ProtoReflect.Descriptor instead.
func (*GetForwardedDocumentEventsRequest) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{277}
}

func (x *GetForwardedDocumentEventsRequest) GetFilter() *TimeBasedFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *GetForwardedDocumentEventsRequest) GetAfterIndexKey() []byte {
	if x != nil {
		return x.AfterIndexKey
	}
	return nil
}

func (x *GetForwardedDocumentEventsRequest) GetPopulateForwardedDocuments() bool {
	if x != nil && x.PopulateForwardedDocuments != nil {
		return *x.PopulateForwardedDocuments
	}
	return Default_GetForwardedDocumentEventsRequest_PopulateForwardedDocuments
}

func (x *GetForwardedDocumentEventsRequest) GetInjectEntityContent() bool {
	if x != nil && x.InjectEntityContent != nil {
		return *x.InjectEntityContent
	}
	return Default_GetForwardedDocumentEventsRequest_InjectEntityContent
}

type GetForwardedDocumentEventsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalCount     *int32                    `protobuf:"varint,1,req,name=TotalCount" json:"TotalCount,omitempty"`
	Events         []*ForwardedDocumentEvent `protobuf:"bytes,2,rep,name=Events" json:"Events,omitempty"`
	TotalCountType *TotalCountType           `protobuf:"varint,3,req,name=TotalCountType,enum=TotalCountType" json:"TotalCountType,omitempty"`
}

func (x *GetForwardedDocumentEventsResponse) Reset() {
	*x = GetForwardedDocumentEventsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[278]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetForwardedDocumentEventsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetForwardedDocumentEventsResponse) ProtoMessage() {}

func (x *GetForwardedDocumentEventsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[278]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetForwardedDocumentEventsResponse.ProtoReflect.Descriptor instead.
func (*GetForwardedDocumentEventsResponse) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{278}
}

func (x *GetForwardedDocumentEventsResponse) GetTotalCount() int32 {
	if x != nil && x.TotalCount != nil {
		return *x.TotalCount
	}
	return 0
}

func (x *GetForwardedDocumentEventsResponse) GetEvents() []*ForwardedDocumentEvent {
	if x != nil {
		return x.Events
	}
	return nil
}

func (x *GetForwardedDocumentEventsResponse) GetTotalCountType() TotalCountType {
	if x != nil && x.TotalCountType != nil {
		return *x.TotalCountType
	}
	return TotalCountType_UnknownCountType
}

type ForwardedDocumentEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp           *Timestamp           `protobuf:"bytes,1,req,name=Timestamp" json:"Timestamp,omitempty"`
	ForwardedDocumentId *ForwardedDocumentId `protobuf:"bytes,2,req,name=ForwardedDocumentId" json:"ForwardedDocumentId,omitempty"`
	IndexKey            []byte               `protobuf:"bytes,3,req,name=IndexKey" json:"IndexKey,omitempty"`
	ForwardedDocument   *ForwardedDocument   `protobuf:"bytes,4,opt,name=ForwardedDocument" json:"ForwardedDocument,omitempty"`
}

func (x *ForwardedDocumentEvent) Reset() {
	*x = ForwardedDocumentEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[279]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ForwardedDocumentEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ForwardedDocumentEvent) ProtoMessage() {}

func (x *ForwardedDocumentEvent) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[279]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ForwardedDocumentEvent.ProtoReflect.Descriptor instead.
func (*ForwardedDocumentEvent) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{279}
}

func (x *ForwardedDocumentEvent) GetTimestamp() *Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *ForwardedDocumentEvent) GetForwardedDocumentId() *ForwardedDocumentId {
	if x != nil {
		return x.ForwardedDocumentId
	}
	return nil
}

func (x *ForwardedDocumentEvent) GetIndexKey() []byte {
	if x != nil {
		return x.IndexKey
	}
	return nil
}

func (x *ForwardedDocumentEvent) GetForwardedDocument() *ForwardedDocument {
	if x != nil {
		return x.ForwardedDocument
	}
	return nil
}

type ResolutionRouteList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResolutionRoutes []*ResolutionRoute `protobuf:"bytes,1,rep,name=ResolutionRoutes" json:"ResolutionRoutes,omitempty"`
}

func (x *ResolutionRouteList) Reset() {
	*x = ResolutionRouteList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[280]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResolutionRouteList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResolutionRouteList) ProtoMessage() {}

func (x *ResolutionRouteList) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[280]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResolutionRouteList.ProtoReflect.Descriptor instead.
func (*ResolutionRouteList) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{280}
}

func (x *ResolutionRouteList) GetResolutionRoutes() []*ResolutionRoute {
	if x != nil {
		return x.ResolutionRoutes
	}
	return nil
}

type ResolutionRoute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RouteId *string `protobuf:"bytes,1,req,name=RouteId" json:"RouteId,omitempty"`
	Name    *string `protobuf:"bytes,2,req,name=Name" json:"Name,omitempty"`
}

func (x *ResolutionRoute) Reset() {
	*x = ResolutionRoute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[281]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResolutionRoute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResolutionRoute) ProtoMessage() {}

func (x *ResolutionRoute) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[281]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResolutionRoute.ProtoReflect.Descriptor instead.
func (*ResolutionRoute) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{281}
}

func (x *ResolutionRoute) GetRouteId() string {
	if x != nil && x.RouteId != nil {
		return *x.RouteId
	}
	return ""
}

func (x *ResolutionRoute) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

type GetForwardedDocumentsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ForwardedDocumentIds []*ForwardedDocumentId `protobuf:"bytes,1,rep,name=ForwardedDocumentIds" json:"ForwardedDocumentIds,omitempty"`
	InjectEntityContent  *bool                  `protobuf:"varint,2,opt,name=InjectEntityContent,def=0" json:"InjectEntityContent,omitempty"`
}

// Default values for GetForwardedDocumentsRequest fields.
const (
	Default_GetForwardedDocumentsRequest_InjectEntityContent = bool(false)
)

func (x *GetForwardedDocumentsRequest) Reset() {
	*x = GetForwardedDocumentsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[282]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetForwardedDocumentsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetForwardedDocumentsRequest) ProtoMessage() {}

func (x *GetForwardedDocumentsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[282]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetForwardedDocumentsRequest.ProtoReflect.Descriptor instead.
func (*GetForwardedDocumentsRequest) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{282}
}

func (x *GetForwardedDocumentsRequest) GetForwardedDocumentIds() []*ForwardedDocumentId {
	if x != nil {
		return x.ForwardedDocumentIds
	}
	return nil
}

func (x *GetForwardedDocumentsRequest) GetInjectEntityContent() bool {
	if x != nil && x.InjectEntityContent != nil {
		return *x.InjectEntityContent
	}
	return Default_GetForwardedDocumentsRequest_InjectEntityContent
}

type GetForwardedDocumentsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ForwardedDocuments []*ForwardedDocument `protobuf:"bytes,1,rep,name=ForwardedDocuments" json:"ForwardedDocuments,omitempty"`
}

func (x *GetForwardedDocumentsResponse) Reset() {
	*x = GetForwardedDocumentsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[283]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetForwardedDocumentsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetForwardedDocumentsResponse) ProtoMessage() {}

func (x *GetForwardedDocumentsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[283]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetForwardedDocumentsResponse.ProtoReflect.Descriptor instead.
func (*GetForwardedDocumentsResponse) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{283}
}

func (x *GetForwardedDocumentsResponse) GetForwardedDocuments() []*ForwardedDocument {
	if x != nil {
		return x.ForwardedDocuments
	}
	return nil
}

type DocumentsMoveOperation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BoxId          *string       `protobuf:"bytes,1,req,name=BoxId" json:"BoxId,omitempty"`
	ToDepartmentId *string       `protobuf:"bytes,2,opt,name=ToDepartmentId" json:"ToDepartmentId,omitempty"`
	DocumentIds    []*DocumentId `protobuf:"bytes,3,rep,name=DocumentIds" json:"DocumentIds,omitempty"`
}

func (x *DocumentsMoveOperation) Reset() {
	*x = DocumentsMoveOperation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[284]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DocumentsMoveOperation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DocumentsMoveOperation) ProtoMessage() {}

func (x *DocumentsMoveOperation) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[284]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DocumentsMoveOperation.ProtoReflect.Descriptor instead.
func (*DocumentsMoveOperation) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{284}
}

func (x *DocumentsMoveOperation) GetBoxId() string {
	if x != nil && x.BoxId != nil {
		return *x.BoxId
	}
	return ""
}

func (x *DocumentsMoveOperation) GetToDepartmentId() string {
	if x != nil && x.ToDepartmentId != nil {
		return *x.ToDepartmentId
	}
	return ""
}

func (x *DocumentsMoveOperation) GetDocumentIds() []*DocumentId {
	if x != nil {
		return x.DocumentIds
	}
	return nil
}

type DraftToSend struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BoxId              *string                    `protobuf:"bytes,1,req,name=BoxId" json:"BoxId,omitempty"`
	DraftId            *string                    `protobuf:"bytes,2,req,name=DraftId" json:"DraftId,omitempty"`
	ToBoxId            *string                    `protobuf:"bytes,3,opt,name=ToBoxId" json:"ToBoxId,omitempty"`
	ToDepartmentId     *string                    `protobuf:"bytes,4,opt,name=ToDepartmentId" json:"ToDepartmentId,omitempty"`
	DocumentSignatures []*DocumentSenderSignature `protobuf:"bytes,5,rep,name=DocumentSignatures" json:"DocumentSignatures,omitempty"`
}

func (x *DraftToSend) Reset() {
	*x = DraftToSend{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[285]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DraftToSend) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DraftToSend) ProtoMessage() {}

func (x *DraftToSend) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[285]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DraftToSend.ProtoReflect.Descriptor instead.
func (*DraftToSend) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{285}
}

func (x *DraftToSend) GetBoxId() string {
	if x != nil && x.BoxId != nil {
		return *x.BoxId
	}
	return ""
}

func (x *DraftToSend) GetDraftId() string {
	if x != nil && x.DraftId != nil {
		return *x.DraftId
	}
	return ""
}

func (x *DraftToSend) GetToBoxId() string {
	if x != nil && x.ToBoxId != nil {
		return *x.ToBoxId
	}
	return ""
}

func (x *DraftToSend) GetToDepartmentId() string {
	if x != nil && x.ToDepartmentId != nil {
		return *x.ToDepartmentId
	}
	return ""
}

func (x *DraftToSend) GetDocumentSignatures() []*DocumentSenderSignature {
	if x != nil {
		return x.DocumentSignatures
	}
	return nil
}

type DocumentSenderSignature struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ParentEntityId        *string                `protobuf:"bytes,1,req,name=ParentEntityId" json:"ParentEntityId,omitempty"`
	Signature             []byte                 `protobuf:"bytes,2,opt,name=Signature" json:"Signature,omitempty"`
	SignWithTestSignature *bool                  `protobuf:"varint,4,opt,name=SignWithTestSignature,def=0" json:"SignWithTestSignature,omitempty"`
	PatchedContentId      *string                `protobuf:"bytes,5,opt,name=PatchedContentId" json:"PatchedContentId,omitempty"`
	PowerOfAttorney       *PowerOfAttorneyToPost `protobuf:"bytes,6,opt,name=PowerOfAttorney" json:"PowerOfAttorney,omitempty"`
}

// Default values for DocumentSenderSignature fields.
const (
	Default_DocumentSenderSignature_SignWithTestSignature = bool(false)
)

func (x *DocumentSenderSignature) Reset() {
	*x = DocumentSenderSignature{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[286]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DocumentSenderSignature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DocumentSenderSignature) ProtoMessage() {}

func (x *DocumentSenderSignature) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[286]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DocumentSenderSignature.ProtoReflect.Descriptor instead.
func (*DocumentSenderSignature) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{286}
}

func (x *DocumentSenderSignature) GetParentEntityId() string {
	if x != nil && x.ParentEntityId != nil {
		return *x.ParentEntityId
	}
	return ""
}

func (x *DocumentSenderSignature) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *DocumentSenderSignature) GetSignWithTestSignature() bool {
	if x != nil && x.SignWithTestSignature != nil {
		return *x.SignWithTestSignature
	}
	return Default_DocumentSenderSignature_SignWithTestSignature
}

func (x *DocumentSenderSignature) GetPatchedContentId() string {
	if x != nil && x.PatchedContentId != nil {
		return *x.PatchedContentId
	}
	return ""
}

func (x *DocumentSenderSignature) GetPowerOfAttorney() *PowerOfAttorneyToPost {
	if x != nil {
		return x.PowerOfAttorney
	}
	return nil
}

type Template struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MessageId                *string   `protobuf:"bytes,1,req,name=MessageId" json:"MessageId,omitempty"`
	TimestampTicks           *int64    `protobuf:"fixed64,2,req,name=TimestampTicks" json:"TimestampTicks,omitempty"`
	FromBoxId                *string   `protobuf:"bytes,3,req,name=FromBoxId" json:"FromBoxId,omitempty"`
	ToBoxId                  *string   `protobuf:"bytes,4,req,name=ToBoxId" json:"ToBoxId,omitempty"`
	MessageFromBoxId         *string   `protobuf:"bytes,5,req,name=MessageFromBoxId" json:"MessageFromBoxId,omitempty"`
	MessageToBoxId           *string   `protobuf:"bytes,6,req,name=MessageToBoxId" json:"MessageToBoxId,omitempty"`
	Entities                 []*Entity `protobuf:"bytes,7,rep,name=Entities" json:"Entities,omitempty"`
	IsDeleted                *bool     `protobuf:"varint,8,opt,name=IsDeleted,def=0" json:"IsDeleted,omitempty"`
	MessageToDepartmentId    *string   `protobuf:"bytes,9,opt,name=MessageToDepartmentId" json:"MessageToDepartmentId,omitempty"`
	LockMode                 *LockMode `protobuf:"varint,10,req,name=LockMode,enum=LockMode" json:"LockMode,omitempty"`
	MessageProxyBoxId        *string   `protobuf:"bytes,11,opt,name=MessageProxyBoxId" json:"MessageProxyBoxId,omitempty"`
	MessageProxyDepartmentId *string   `protobuf:"bytes,12,opt,name=MessageProxyDepartmentId" json:"MessageProxyDepartmentId,omitempty"`
	IsReusable               *bool     `protobuf:"varint,13,opt,name=IsReusable,def=0" json:"IsReusable,omitempty"`
}

// Default values for Template fields.
const (
	Default_Template_IsDeleted  = bool(false)
	Default_Template_IsReusable = bool(false)
)

func (x *Template) Reset() {
	*x = Template{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[287]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Template) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Template) ProtoMessage() {}

func (x *Template) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[287]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Template.ProtoReflect.Descriptor instead.
func (*Template) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{287}
}

func (x *Template) GetMessageId() string {
	if x != nil && x.MessageId != nil {
		return *x.MessageId
	}
	return ""
}

func (x *Template) GetTimestampTicks() int64 {
	if x != nil && x.TimestampTicks != nil {
		return *x.TimestampTicks
	}
	return 0
}

func (x *Template) GetFromBoxId() string {
	if x != nil && x.FromBoxId != nil {
		return *x.FromBoxId
	}
	return ""
}

func (x *Template) GetToBoxId() string {
	if x != nil && x.ToBoxId != nil {
		return *x.ToBoxId
	}
	return ""
}

func (x *Template) GetMessageFromBoxId() string {
	if x != nil && x.MessageFromBoxId != nil {
		return *x.MessageFromBoxId
	}
	return ""
}

func (x *Template) GetMessageToBoxId() string {
	if x != nil && x.MessageToBoxId != nil {
		return *x.MessageToBoxId
	}
	return ""
}

func (x *Template) GetEntities() []*Entity {
	if x != nil {
		return x.Entities
	}
	return nil
}

func (x *Template) GetIsDeleted() bool {
	if x != nil && x.IsDeleted != nil {
		return *x.IsDeleted
	}
	return Default_Template_IsDeleted
}

func (x *Template) GetMessageToDepartmentId() string {
	if x != nil && x.MessageToDepartmentId != nil {
		return *x.MessageToDepartmentId
	}
	return ""
}

func (x *Template) GetLockMode() LockMode {
	if x != nil && x.LockMode != nil {
		return *x.LockMode
	}
	return LockMode_None
}

func (x *Template) GetMessageProxyBoxId() string {
	if x != nil && x.MessageProxyBoxId != nil {
		return *x.MessageProxyBoxId
	}
	return ""
}

func (x *Template) GetMessageProxyDepartmentId() string {
	if x != nil && x.MessageProxyDepartmentId != nil {
		return *x.MessageProxyDepartmentId
	}
	return ""
}

func (x *Template) GetIsReusable() bool {
	if x != nil && x.IsReusable != nil {
		return *x.IsReusable
	}
	return Default_Template_IsReusable
}

type TemplateToPost struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromBoxId                *string                       `protobuf:"bytes,1,req,name=FromBoxId" json:"FromBoxId,omitempty"`
	ToBoxId                  *string                       `protobuf:"bytes,2,req,name=ToBoxId" json:"ToBoxId,omitempty"`
	MessageFromBoxId         *string                       `protobuf:"bytes,3,req,name=MessageFromBoxId" json:"MessageFromBoxId,omitempty"`
	MessageToBoxId           *string                       `protobuf:"bytes,4,req,name=MessageToBoxId" json:"MessageToBoxId,omitempty"`
	MessageToDepartmentId    *string                       `protobuf:"bytes,5,opt,name=MessageToDepartmentId" json:"MessageToDepartmentId,omitempty"`
	DocumentAttachments      []*TemplateDocumentAttachment `protobuf:"bytes,6,rep,name=DocumentAttachments" json:"DocumentAttachments,omitempty"`
	LockMode                 *LockMode                     `protobuf:"varint,7,opt,name=LockMode,enum=LockMode,def=1" json:"LockMode,omitempty"`
	FromDepartmentId         *string                       `protobuf:"bytes,8,opt,name=FromDepartmentId" json:"FromDepartmentId,omitempty"`
	ToDepartmentId           *string                       `protobuf:"bytes,9,opt,name=ToDepartmentId" json:"ToDepartmentId,omitempty"`
	MessageProxyBoxId        *string                       `protobuf:"bytes,10,opt,name=MessageProxyBoxId" json:"MessageProxyBoxId,omitempty"`
	MessageProxyDepartmentId *string                       `protobuf:"bytes,11,opt,name=MessageProxyDepartmentId" json:"MessageProxyDepartmentId,omitempty"`
	IsReusable               *bool                         `protobuf:"varint,12,opt,name=IsReusable,def=0" json:"IsReusable,omitempty"`
}

// Default values for TemplateToPost fields.
const (
	Default_TemplateToPost_LockMode   = LockMode_None
	Default_TemplateToPost_IsReusable = bool(false)
)

func (x *TemplateToPost) Reset() {
	*x = TemplateToPost{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[288]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TemplateToPost) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TemplateToPost) ProtoMessage() {}

func (x *TemplateToPost) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[288]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TemplateToPost.ProtoReflect.Descriptor instead.
func (*TemplateToPost) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{288}
}

func (x *TemplateToPost) GetFromBoxId() string {
	if x != nil && x.FromBoxId != nil {
		return *x.FromBoxId
	}
	return ""
}

func (x *TemplateToPost) GetToBoxId() string {
	if x != nil && x.ToBoxId != nil {
		return *x.ToBoxId
	}
	return ""
}

func (x *TemplateToPost) GetMessageFromBoxId() string {
	if x != nil && x.MessageFromBoxId != nil {
		return *x.MessageFromBoxId
	}
	return ""
}

func (x *TemplateToPost) GetMessageToBoxId() string {
	if x != nil && x.MessageToBoxId != nil {
		return *x.MessageToBoxId
	}
	return ""
}

func (x *TemplateToPost) GetMessageToDepartmentId() string {
	if x != nil && x.MessageToDepartmentId != nil {
		return *x.MessageToDepartmentId
	}
	return ""
}

func (x *TemplateToPost) GetDocumentAttachments() []*TemplateDocumentAttachment {
	if x != nil {
		return x.DocumentAttachments
	}
	return nil
}

func (x *TemplateToPost) GetLockMode() LockMode {
	if x != nil && x.LockMode != nil {
		return *x.LockMode
	}
	return Default_TemplateToPost_LockMode
}

func (x *TemplateToPost) GetFromDepartmentId() string {
	if x != nil && x.FromDepartmentId != nil {
		return *x.FromDepartmentId
	}
	return ""
}

func (x *TemplateToPost) GetToDepartmentId() string {
	if x != nil && x.ToDepartmentId != nil {
		return *x.ToDepartmentId
	}
	return ""
}

func (x *TemplateToPost) GetMessageProxyBoxId() string {
	if x != nil && x.MessageProxyBoxId != nil {
		return *x.MessageProxyBoxId
	}
	return ""
}

func (x *TemplateToPost) GetMessageProxyDepartmentId() string {
	if x != nil && x.MessageProxyDepartmentId != nil {
		return *x.MessageProxyDepartmentId
	}
	return ""
}

func (x *TemplateToPost) GetIsReusable() bool {
	if x != nil && x.IsReusable != nil {
		return *x.IsReusable
	}
	return Default_TemplateToPost_IsReusable
}

type TemplateDocumentAttachment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UnsignedContent          *UnsignedContent          `protobuf:"bytes,1,req,name=UnsignedContent" json:"UnsignedContent,omitempty"`
	Comment                  *string                   `protobuf:"bytes,2,opt,name=Comment" json:"Comment,omitempty"`
	TypeNamedId              *string                   `protobuf:"bytes,3,req,name=TypeNamedId" json:"TypeNamedId,omitempty"`
	Function                 *string                   `protobuf:"bytes,4,opt,name=Function" json:"Function,omitempty"`
	Version                  *string                   `protobuf:"bytes,5,opt,name=Version" json:"Version,omitempty"`
	Metadata                 []*MetadataItem           `protobuf:"bytes,6,rep,name=Metadata" json:"Metadata,omitempty"`
	WorkflowId               *int32                    `protobuf:"varint,7,opt,name=WorkflowId" json:"WorkflowId,omitempty"`
	CustomDocumentId         *string                   `protobuf:"bytes,8,opt,name=CustomDocumentId" json:"CustomDocumentId,omitempty"`
	EditingSettingId         *string                   `protobuf:"bytes,9,opt,name=EditingSettingId" json:"EditingSettingId,omitempty"`
	NeedRecipientSignature   *bool                     `protobuf:"varint,10,opt,name=NeedRecipientSignature,def=0" json:"NeedRecipientSignature,omitempty"`
	PredefinedRecipientTitle *PredefinedRecipientTitle `protobuf:"bytes,11,opt,name=PredefinedRecipientTitle" json:"PredefinedRecipientTitle,omitempty"`
	RefusalDisabled          *bool                     `protobuf:"varint,12,opt,name=RefusalDisabled,def=0" json:"RefusalDisabled,omitempty"`
	CustomData               []*CustomDataItem         `protobuf:"bytes,13,rep,name=CustomData" json:"CustomData,omitempty"`
}

// Default values for TemplateDocumentAttachment fields.
const (
	Default_TemplateDocumentAttachment_NeedRecipientSignature = bool(false)
	Default_TemplateDocumentAttachment_RefusalDisabled        = bool(false)
)

func (x *TemplateDocumentAttachment) Reset() {
	*x = TemplateDocumentAttachment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[289]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TemplateDocumentAttachment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TemplateDocumentAttachment) ProtoMessage() {}

func (x *TemplateDocumentAttachment) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[289]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TemplateDocumentAttachment.ProtoReflect.Descriptor instead.
func (*TemplateDocumentAttachment) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{289}
}

func (x *TemplateDocumentAttachment) GetUnsignedContent() *UnsignedContent {
	if x != nil {
		return x.UnsignedContent
	}
	return nil
}

func (x *TemplateDocumentAttachment) GetComment() string {
	if x != nil && x.Comment != nil {
		return *x.Comment
	}
	return ""
}

func (x *TemplateDocumentAttachment) GetTypeNamedId() string {
	if x != nil && x.TypeNamedId != nil {
		return *x.TypeNamedId
	}
	return ""
}

func (x *TemplateDocumentAttachment) GetFunction() string {
	if x != nil && x.Function != nil {
		return *x.Function
	}
	return ""
}

func (x *TemplateDocumentAttachment) GetVersion() string {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return ""
}

func (x *TemplateDocumentAttachment) GetMetadata() []*MetadataItem {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *TemplateDocumentAttachment) GetWorkflowId() int32 {
	if x != nil && x.WorkflowId != nil {
		return *x.WorkflowId
	}
	return 0
}

func (x *TemplateDocumentAttachment) GetCustomDocumentId() string {
	if x != nil && x.CustomDocumentId != nil {
		return *x.CustomDocumentId
	}
	return ""
}

func (x *TemplateDocumentAttachment) GetEditingSettingId() string {
	if x != nil && x.EditingSettingId != nil {
		return *x.EditingSettingId
	}
	return ""
}

func (x *TemplateDocumentAttachment) GetNeedRecipientSignature() bool {
	if x != nil && x.NeedRecipientSignature != nil {
		return *x.NeedRecipientSignature
	}
	return Default_TemplateDocumentAttachment_NeedRecipientSignature
}

func (x *TemplateDocumentAttachment) GetPredefinedRecipientTitle() *PredefinedRecipientTitle {
	if x != nil {
		return x.PredefinedRecipientTitle
	}
	return nil
}

func (x *TemplateDocumentAttachment) GetRefusalDisabled() bool {
	if x != nil && x.RefusalDisabled != nil {
		return *x.RefusalDisabled
	}
	return Default_TemplateDocumentAttachment_RefusalDisabled
}

func (x *TemplateDocumentAttachment) GetCustomData() []*CustomDataItem {
	if x != nil {
		return x.CustomData
	}
	return nil
}

type PredefinedRecipientTitle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UnsignedContent *UnsignedContent `protobuf:"bytes,1,req,name=UnsignedContent" json:"UnsignedContent,omitempty"`
}

func (x *PredefinedRecipientTitle) Reset() {
	*x = PredefinedRecipientTitle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[290]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PredefinedRecipientTitle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PredefinedRecipientTitle) ProtoMessage() {}

func (x *PredefinedRecipientTitle) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[290]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PredefinedRecipientTitle.ProtoReflect.Descriptor instead.
func (*PredefinedRecipientTitle) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{290}
}

func (x *PredefinedRecipientTitle) GetUnsignedContent() *UnsignedContent {
	if x != nil {
		return x.UnsignedContent
	}
	return nil
}

type TemplatePatchToPost struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Refusals []*TemplateRefusalAttachment `protobuf:"bytes,1,rep,name=Refusals" json:"Refusals,omitempty"`
}

func (x *TemplatePatchToPost) Reset() {
	*x = TemplatePatchToPost{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[291]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TemplatePatchToPost) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TemplatePatchToPost) ProtoMessage() {}

func (x *TemplatePatchToPost) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[291]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TemplatePatchToPost.ProtoReflect.Descriptor instead.
func (*TemplatePatchToPost) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{291}
}

func (x *TemplatePatchToPost) GetRefusals() []*TemplateRefusalAttachment {
	if x != nil {
		return x.Refusals
	}
	return nil
}

type TemplateRefusalAttachment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DocumentId *string  `protobuf:"bytes,1,req,name=DocumentId" json:"DocumentId,omitempty"`
	Comment    *string  `protobuf:"bytes,2,opt,name=Comment" json:"Comment,omitempty"`
	Labels     []string `protobuf:"bytes,3,rep,name=Labels" json:"Labels,omitempty"`
}

func (x *TemplateRefusalAttachment) Reset() {
	*x = TemplateRefusalAttachment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[292]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TemplateRefusalAttachment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TemplateRefusalAttachment) ProtoMessage() {}

func (x *TemplateRefusalAttachment) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[292]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TemplateRefusalAttachment.ProtoReflect.Descriptor instead.
func (*TemplateRefusalAttachment) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{292}
}

func (x *TemplateRefusalAttachment) GetDocumentId() string {
	if x != nil && x.DocumentId != nil {
		return *x.DocumentId
	}
	return ""
}

func (x *TemplateRefusalAttachment) GetComment() string {
	if x != nil && x.Comment != nil {
		return *x.Comment
	}
	return ""
}

func (x *TemplateRefusalAttachment) GetLabels() []string {
	if x != nil {
		return x.Labels
	}
	return nil
}

type TemplateTransformationToPost struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BoxId                   *string                   `protobuf:"bytes,1,req,name=BoxId" json:"BoxId,omitempty"`
	TemplateId              *string                   `protobuf:"bytes,2,req,name=TemplateId" json:"TemplateId,omitempty"`
	DocumentTransformations []*DocumentTransformation `protobuf:"bytes,3,rep,name=DocumentTransformations" json:"DocumentTransformations,omitempty"`
}

func (x *TemplateTransformationToPost) Reset() {
	*x = TemplateTransformationToPost{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[293]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TemplateTransformationToPost) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TemplateTransformationToPost) ProtoMessage() {}

func (x *TemplateTransformationToPost) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[293]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TemplateTransformationToPost.ProtoReflect.Descriptor instead.
func (*TemplateTransformationToPost) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{293}
}

func (x *TemplateTransformationToPost) GetBoxId() string {
	if x != nil && x.BoxId != nil {
		return *x.BoxId
	}
	return ""
}

func (x *TemplateTransformationToPost) GetTemplateId() string {
	if x != nil && x.TemplateId != nil {
		return *x.TemplateId
	}
	return ""
}

func (x *TemplateTransformationToPost) GetDocumentTransformations() []*DocumentTransformation {
	if x != nil {
		return x.DocumentTransformations
	}
	return nil
}

type DocumentTransformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DocumentId       *string `protobuf:"bytes,1,req,name=DocumentId" json:"DocumentId,omitempty"`
	CustomDocumentId *string `protobuf:"bytes,2,opt,name=CustomDocumentId" json:"CustomDocumentId,omitempty"`
}

func (x *DocumentTransformation) Reset() {
	*x = DocumentTransformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Full_proto_msgTypes[294]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DocumentTransformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DocumentTransformation) ProtoMessage() {}

func (x *DocumentTransformation) ProtoReflect() protoreflect.Message {
	mi := &file_Full_proto_msgTypes[294]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DocumentTransformation.ProtoReflect.Descriptor instead.
func (*DocumentTransformation) Descriptor() ([]byte, []int) {
	return file_Full_proto_rawDescGZIP(), []int{294}
}

func (x *DocumentTransformation) GetDocumentId() string {
	if x != nil && x.DocumentId != nil {
		return *x.DocumentId
	}
	return ""
}

func (x *DocumentTransformation) GetCustomDocumentId() string {
	if x != nil && x.CustomDocumentId != nil {
		return *x.CustomDocumentId
	}
	return ""
}

var File_Full_proto protoreflect.FileDescriptor

var file_Full_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x46, 0x75, 0x6c, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x9d, 0x01, 0x0a,
	0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x37, 0x0a, 0x0e, 0x52, 0x75, 0x73, 0x73,
	0x69, 0x61, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x52, 0x75, 0x73, 0x73, 0x69, 0x61, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x52, 0x0e, 0x52, 0x75, 0x73, 0x73, 0x69, 0x61, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x37, 0x0a, 0x0e, 0x46, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x46, 0x6f, 0x72, 0x65,
	0x69, 0x67, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x0e, 0x46, 0x6f, 0x72, 0x65,
	0x69, 0x67, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xf8, 0x01, 0x0a,
	0x0e, 0x52, 0x75, 0x73, 0x73, 0x69, 0x61, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x18, 0x0a, 0x07, 0x5a, 0x69, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x5a, 0x69, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x06, 0x52, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x65, 0x72, 0x72, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x54, 0x65, 0x72, 0x72, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x12,
	0x12, 0x0a, 0x04, 0x43, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x43,
	0x69, 0x74, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12,
	0x16, 0x0a, 0x06, 0x53, 0x74, 0x72, 0x65, 0x65, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x53, 0x74, 0x72, 0x65, 0x65, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x75, 0x69, 0x6c, 0x64,
	0x69, 0x6e, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x42, 0x75, 0x69, 0x6c, 0x64,
	0x69, 0x6e, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x70, 0x61,
	0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x41, 0x70,
	0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x44, 0x0a, 0x0e, 0x46, 0x6f, 0x72, 0x65, 0x69,
	0x67, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x72, 0x79, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x07, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02,
	0x20, 0x02, 0x28, 0x09, 0x52, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0xa0, 0x01,
	0x0a, 0x10, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0a, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x33, 0x0a, 0x0d, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x65, 0x72, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x0d, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x72, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x37, 0x0a, 0x0e, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0e, 0x32,
	0x0f, 0x2e, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x0e, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x22, 0x9e, 0x03, 0x0a, 0x0c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x4b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x4b, 0x65, 0x79, 0x12, 0x31, 0x0a,
	0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x02, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x54, 0x0a, 0x0d, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x72, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x3a, 0x19, 0x55, 0x6e,
	0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0d, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x38, 0x0a, 0x17, 0x4c, 0x61, 0x73, 0x74, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x54, 0x69, 0x63, 0x6b,
	0x73, 0x18, 0x04, 0x20, 0x02, 0x28, 0x10, 0x52, 0x17, 0x4c, 0x61, 0x73, 0x74, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x54, 0x69, 0x63, 0x6b, 0x73,
	0x12, 0x38, 0x0a, 0x17, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x17, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x34, 0x0a, 0x15, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x54, 0x6f, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x12, 0x3f, 0x0a, 0x14, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b,
	0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x52, 0x14, 0x49, 0x6e, 0x76,
	0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x22, 0x4f, 0x0a, 0x1b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x30, 0x0a, 0x0c, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x52, 0x0c, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x73, 0x22, 0x3d, 0x0a, 0x0b, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x12, 0x2e, 0x0a, 0x12, 0x52, 0x61, 0x77, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0c, 0x52, 0x12, 0x52,
	0x61, 0x77, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x22, 0xbf, 0x01, 0x0a, 0x1a, 0x41, 0x63, 0x71, 0x75, 0x69, 0x72, 0x65, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x4f, 0x72, 0x67, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x4f, 0x72, 0x67, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x49, 0x6e, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x49, 0x6e, 0x6e, 0x12, 0x34, 0x0a, 0x15, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x54, 0x6f, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x54, 0x6f, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x43,
	0x0a, 0x12, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x49, 0x6e, 0x76,
	0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x12, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x22, 0x9d, 0x01, 0x0a, 0x12, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x34, 0x0a, 0x0d, 0x53, 0x69,
	0x67, 0x6e, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x52, 0x0d, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x02,
	0x28, 0x09, 0x52, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x12,
	0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52,
	0x12, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x65, 0x64, 0x22, 0xce, 0x01, 0x0a, 0x0a, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0c, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74,
	0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x12, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x02,
	0x28, 0x09, 0x52, 0x12, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74,
	0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x02, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x41, 0x62,
	0x62, 0x72, 0x65, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x41, 0x62, 0x62, 0x72, 0x65, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10,
	0x0a, 0x03, 0x4b, 0x70, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x4b, 0x70, 0x70,
	0x12, 0x22, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x08, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x07, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x22, 0x9d, 0x02, 0x0a, 0x0f, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d,
	0x65, 0x6e, 0x74, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x09, 0x52, 0x02, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x12, 0x50, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x70, 0x61,
	0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x02, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c,
	0x41, 0x62, 0x62, 0x72, 0x65, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x02,
	0x28, 0x09, 0x52, 0x0c, 0x41, 0x62, 0x62, 0x72, 0x65, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x10, 0x0a, 0x03, 0x4b, 0x70, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x4b,
	0x70, 0x70, 0x12, 0x22, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x07, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x22, 0x0a, 0x07, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e,
	0x67, 0x18, 0x07, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e,
	0x67, 0x52, 0x07, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x38, 0x0a, 0x11, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18,
	0x08, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x22, 0x64, 0x0a, 0x0e, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65,
	0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x0b, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x44, 0x65,
	0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x52, 0x0b, 0x44,
	0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x6f,
	0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0a,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x35, 0x0a, 0x07, 0x52, 0x6f,
	0x75, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x10, 0x0a, 0x03, 0x4b, 0x70, 0x70, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x08, 0x52, 0x03, 0x4b, 0x70, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x02, 0x20, 0x02, 0x28, 0x08, 0x52, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x22, 0xd6, 0x01, 0x0a, 0x12, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74,
	0x54, 0x6f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x50, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x70, 0x61,
	0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c,
	0x41, 0x62, 0x62, 0x72, 0x65, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x02,
	0x28, 0x09, 0x52, 0x0c, 0x41, 0x62, 0x62, 0x72, 0x65, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x10, 0x0a, 0x03, 0x4b, 0x70, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x4b,
	0x70, 0x70, 0x12, 0x22, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x07, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x22, 0x0a, 0x07, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e,
	0x67, 0x18, 0x06, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e,
	0x67, 0x52, 0x07, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x22, 0xa9, 0x02, 0x0a, 0x12, 0x44,
	0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x12, 0x42, 0x0a, 0x10, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x70, 0x61, 0x72,
	0x74, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x50, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x61,
	0x74, 0x63, 0x68, 0x52, 0x10, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x70, 0x61, 0x72,
	0x74, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x42, 0x0a, 0x10, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d,
	0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x69,
	0x6e, 0x67, 0x50, 0x61, 0x74, 0x63, 0x68, 0x52, 0x10, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d,
	0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x12, 0x25, 0x0a, 0x03, 0x4b, 0x70, 0x70,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d,
	0x65, 0x6e, 0x74, 0x4b, 0x70, 0x70, 0x50, 0x61, 0x74, 0x63, 0x68, 0x52, 0x03, 0x4b, 0x70, 0x70,
	0x12, 0x31, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x50, 0x61, 0x74, 0x63, 0x68, 0x52, 0x07, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x31, 0x0a, 0x07, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x74, 0x63, 0x68, 0x52, 0x07, 0x52,
	0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x22, 0x47, 0x0a, 0x15, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x74, 0x63, 0x68, 0x12,
	0x2e, 0x0a, 0x12, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x12, 0x50, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22,
	0x4f, 0x0a, 0x15, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d,
	0x69, 0x6e, 0x67, 0x50, 0x61, 0x74, 0x63, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c,
	0x41, 0x62, 0x62, 0x72, 0x65, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x02,
	0x28, 0x09, 0x52, 0x0c, 0x41, 0x62, 0x62, 0x72, 0x65, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x26, 0x0a, 0x12, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x4b, 0x70,
	0x70, 0x50, 0x61, 0x74, 0x63, 0x68, 0x12, 0x10, 0x0a, 0x03, 0x4b, 0x70, 0x70, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x4b, 0x70, 0x70, 0x22, 0x3c, 0x0a, 0x16, 0x44, 0x65, 0x70, 0x61,
	0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x50, 0x61, 0x74,
	0x63, 0x68, 0x12, 0x22, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x07, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x44, 0x0a, 0x16, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x74, 0x63, 0x68,
	0x12, 0x10, 0x0a, 0x03, 0x4b, 0x70, 0x70, 0x18, 0x01, 0x20, 0x02, 0x28, 0x08, 0x52, 0x03, 0x4b,
	0x70, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20,
	0x02, 0x28, 0x08, 0x52, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x46, 0x0a, 0x0a,
	0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x09, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x49, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x08, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x49, 0x64, 0x22, 0xe7, 0x01, 0x0a, 0x08, 0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65,
	0x65, 0x12, 0x1b, 0x0a, 0x04, 0x55, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32,
	0x07, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x56, 0x32, 0x52, 0x04, 0x55, 0x73, 0x65, 0x72, 0x12, 0x36,
	0x0a, 0x0b, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20,
	0x02, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x50, 0x65,
	0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0b, 0x50, 0x65, 0x72, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x02, 0x28, 0x09, 0x52, 0x08, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x13, 0x43, 0x61, 0x6e, 0x42, 0x65, 0x49, 0x6e, 0x76, 0x69, 0x74,
	0x65, 0x64, 0x46, 0x6f, 0x72, 0x43, 0x68, 0x61, 0x74, 0x18, 0x04, 0x20, 0x02, 0x28, 0x08, 0x52,
	0x13, 0x43, 0x61, 0x6e, 0x42, 0x65, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x64, 0x46, 0x6f, 0x72,
	0x43, 0x68, 0x61, 0x74, 0x12, 0x38, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0a, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x11, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x84,
	0x03, 0x0a, 0x13, 0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x50, 0x65, 0x72, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65,
	0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09,
	0x52, 0x10, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x49, 0x73, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x02, 0x28, 0x08, 0x52, 0x0f, 0x49, 0x73, 0x41,
	0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x62, 0x0a, 0x13,
	0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x44, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x3a,
	0x1a, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x13, 0x44, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x12, 0x34, 0x0a, 0x15, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x44, 0x65, 0x70, 0x61,
	0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x15, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x12, 0x29, 0x0a, 0x07, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79,
	0x65, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x52, 0x0a, 0x17, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x17, 0x41, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x65, 0x72, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x42, 0x0a, 0x0e, 0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65,
	0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x49,
	0x73, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x08, 0x52, 0x09,
	0x49, 0x73, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x22, 0x51, 0x0a, 0x17, 0x41, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x73, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x65,
	0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x08, 0x52, 0x09, 0x49, 0x73, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x81, 0x01, 0x0a,
	0x06, 0x55, 0x73, 0x65, 0x72, 0x56, 0x32, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x25, 0x0a, 0x08, 0x46, 0x75, 0x6c, 0x6c, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x46, 0x75, 0x6c, 0x6c, 0x4e, 0x61,
	0x6d, 0x65, 0x52, 0x08, 0x46, 0x75, 0x6c, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c,
	0x49, 0x73, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x18, 0x04, 0x20, 0x02,
	0x28, 0x08, 0x52, 0x0c, 0x49, 0x73, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64,
	0x22, 0x64, 0x0a, 0x08, 0x46, 0x75, 0x6c, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x4c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x08,
	0x4c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x46, 0x69, 0x72, 0x73,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x09, 0x46, 0x69, 0x72,
	0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x4d, 0x69, 0x64, 0x64, 0x6c, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x4d, 0x69, 0x64, 0x64,
	0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x57, 0x0a, 0x0c, 0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79,
	0x65, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x09, 0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79,
	0x65, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x45, 0x6d, 0x70, 0x6c,
	0x6f, 0x79, 0x65, 0x65, 0x52, 0x09, 0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x73, 0x12,
	0x1e, 0x0a, 0x0a, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x02, 0x28, 0x05, 0x52, 0x0a, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22,
	0xb0, 0x01, 0x0a, 0x04, 0x55, 0x73, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x4c, 0x61, 0x73, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4c, 0x61, 0x73, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x46, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x46, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x4d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x4d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x11, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x43, 0x65, 0x72, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x11, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x73, 0x22, 0xa7, 0x01, 0x0a, 0x0f, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x70,
	0x72, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x54, 0x68, 0x75, 0x6d,
	0x62, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x46,
	0x72, 0x6f, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x10, 0x52, 0x09, 0x56, 0x61, 0x6c, 0x69, 0x64,
	0x46, 0x72, 0x6f, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x54, 0x6f, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x10, 0x52, 0x07, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x54, 0x6f, 0x12, 0x2a,
	0x0a, 0x10, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x49, 0x6e,
	0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x49, 0x6e, 0x6e, 0x22, 0x92, 0x01, 0x0a,
	0x10, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x73, 0x65,
	0x72, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x02, 0x49,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52,
	0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x0b, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x4f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x65, 0x72,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0b, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x04, 0x20, 0x02, 0x28, 0x09, 0x52, 0x08, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0x40, 0x0a, 0x15, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x55, 0x73, 0x65, 0x72, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x05, 0x55, 0x73,
	0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x4f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x05, 0x55, 0x73,
	0x65, 0x72, 0x73, 0x22, 0xb3, 0x05, 0x0a, 0x1b, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x70, 0x61, 0x72,
	0x74, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x10, 0x55,
	0x73, 0x65, 0x72, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x28, 0x0a, 0x0f, 0x49, 0x73, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x18, 0x02, 0x20, 0x02, 0x28, 0x08, 0x52, 0x0f, 0x49, 0x73, 0x41, 0x64, 0x6d, 0x69,
	0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x62, 0x0a, 0x13, 0x44, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x3a, 0x1a, 0x55, 0x6e,
	0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x13, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x2a, 0x0a,
	0x10, 0x43, 0x61, 0x6e, 0x53, 0x69, 0x67, 0x6e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x18, 0x04, 0x20, 0x02, 0x28, 0x08, 0x52, 0x10, 0x43, 0x61, 0x6e, 0x53, 0x69, 0x67, 0x6e,
	0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x36, 0x0a, 0x16, 0x43, 0x61, 0x6e,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x73, 0x18, 0x06, 0x20, 0x02, 0x28, 0x08, 0x52, 0x16, 0x43, 0x61, 0x6e, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x73, 0x12, 0x2c, 0x0a, 0x11, 0x43, 0x61, 0x6e, 0x41, 0x64, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x6c,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x02, 0x28, 0x08, 0x52, 0x11, 0x43, 0x61,
	0x6e, 0x41, 0x64, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x34, 0x0a, 0x15, 0x43, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x08, 0x20, 0x02, 0x28, 0x08, 0x52, 0x15,
	0x43, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x34, 0x0a, 0x15, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x18, 0x09,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x15, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x44, 0x65,
	0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x4a,
	0x6f, 0x62, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4a,
	0x6f, 0x62, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x43, 0x61, 0x6e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x0b, 0x20,
	0x02, 0x28, 0x08, 0x52, 0x12, 0x43, 0x61, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x52, 0x0a, 0x17, 0x41, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x17, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3c, 0x0a, 0x19, 0x43,
	0x61, 0x6e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x44,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x0d, 0x20, 0x02, 0x28, 0x08, 0x52, 0x19,
	0x43, 0x61, 0x6e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x4c, 0x0a, 0x15, 0x45, 0x6d, 0x70,
	0x6c, 0x6f, 0x79, 0x65, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x33, 0x0a, 0x0d, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x53, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x42, 0x0a, 0x0c, 0x53, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x09, 0x52, 0x02, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x49, 0x73, 0x53, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x08, 0x52, 0x0c, 0x49,
	0x73, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x64, 0x22, 0x4c, 0x0a, 0x15, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x54, 0x6f, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x12, 0x33, 0x0a, 0x0d, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x53, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x53, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x49, 0x0a, 0x0f, 0x43, 0x65, 0x72,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x0c,
	0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x56, 0x32, 0x52, 0x0c, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x73, 0x22, 0xa0, 0x04, 0x0a, 0x11, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x56, 0x32, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x68,
	0x75, 0x6d, 0x62, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0a,
	0x54, 0x68, 0x75, 0x6d, 0x62, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x04, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x46, 0x72, 0x6f, 0x6d, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x10, 0x52, 0x09, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x18,
	0x0a, 0x07, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x54, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x10, 0x52,
	0x07, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x54, 0x6f, 0x12, 0x30, 0x0a, 0x13, 0x50, 0x72, 0x69, 0x76,
	0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x46, 0x72, 0x6f, 0x6d, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x10, 0x52, 0x13, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65,
	0x79, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x2c, 0x0a, 0x11, 0x50, 0x72,
	0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x54, 0x6f, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x10, 0x52, 0x11, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65,
	0x79, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x54, 0x6f, 0x12, 0x2a, 0x0a, 0x10, 0x4f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x49, 0x6e, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x49, 0x6e, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x55, 0x73, 0x65, 0x72, 0x46, 0x69,
	0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x55,
	0x73, 0x65, 0x72, 0x46, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e,
	0x55, 0x73, 0x65, 0x72, 0x4d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x69, 0x64, 0x64, 0x6c, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x61, 0x73, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x55, 0x73, 0x65, 0x72,
	0x4c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x55, 0x73, 0x65, 0x72,
	0x53, 0x68, 0x6f, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x55, 0x73, 0x65, 0x72, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x49, 0x73, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x09, 0x49, 0x73, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x39, 0x0a, 0x0b,
	0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x17, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x53,
	0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x53, 0x75, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x22, 0xd8, 0x01, 0x0a, 0x10, 0x45, 0x6d, 0x70, 0x6c,
	0x6f, 0x79, 0x65, 0x65, 0x54, 0x6f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x3e, 0x0a, 0x0b,
	0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x54, 0x6f, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x52,
	0x0b, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x12, 0x1a, 0x0a, 0x08,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x13, 0x43, 0x61, 0x6e, 0x42,
	0x65, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x64, 0x46, 0x6f, 0x72, 0x43, 0x68, 0x61, 0x74, 0x18,
	0x03, 0x20, 0x02, 0x28, 0x08, 0x52, 0x13, 0x43, 0x61, 0x6e, 0x42, 0x65, 0x49, 0x6e, 0x76, 0x69,
	0x74, 0x65, 0x64, 0x46, 0x6f, 0x72, 0x43, 0x68, 0x61, 0x74, 0x12, 0x36, 0x0a, 0x0b, 0x50, 0x65,
	0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x02, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0b, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x22, 0x8f, 0x01, 0x0a, 0x1b, 0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x54,
	0x6f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x73, 0x12, 0x2e, 0x0a, 0x05, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x54, 0x6f, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x42, 0x79, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x05, 0x4c, 0x6f, 0x67,
	0x69, 0x6e, 0x12, 0x40, 0x0a, 0x0b, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79,
	0x65, 0x65, 0x54, 0x6f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x79, 0x43, 0x65, 0x72, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x0b, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x22, 0x56, 0x0a, 0x17, 0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65,
	0x54, 0x6f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x79, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12,
	0x14, 0x0a, 0x05, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x05,
	0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x25, 0x0a, 0x08, 0x46, 0x75, 0x6c, 0x6c, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x46, 0x75, 0x6c, 0x6c, 0x4e, 0x61,
	0x6d, 0x65, 0x52, 0x08, 0x46, 0x75, 0x6c, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x71, 0x0a, 0x1d,
	0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x54, 0x6f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x42, 0x79, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0c, 0x52, 0x07,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x41, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x42, 0x61, 0x73, 0x69, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x42, 0x61, 0x73, 0x69, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x6d, 0x61,
	0x69, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x22,
	0xd8, 0x01, 0x0a, 0x10, 0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x54, 0x6f, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x45, 0x6d, 0x70, 0x6c,
	0x6f, 0x79, 0x65, 0x65, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x50,
	0x61, 0x74, 0x63, 0x68, 0x52, 0x0b, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x32, 0x0a, 0x08, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x50, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x74, 0x63, 0x68, 0x52, 0x08, 0x50, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x53, 0x0a, 0x13, 0x43, 0x61, 0x6e, 0x42, 0x65, 0x49, 0x6e,
	0x76, 0x69, 0x74, 0x65, 0x64, 0x46, 0x6f, 0x72, 0x43, 0x68, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x43, 0x61, 0x6e,
	0x42, 0x65, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x64, 0x46, 0x6f, 0x72, 0x43, 0x68, 0x61, 0x74,
	0x50, 0x61, 0x74, 0x63, 0x68, 0x52, 0x13, 0x43, 0x61, 0x6e, 0x42, 0x65, 0x49, 0x6e, 0x76, 0x69,
	0x74, 0x65, 0x64, 0x46, 0x6f, 0x72, 0x43, 0x68, 0x61, 0x74, 0x22, 0xcb, 0x03, 0x0a, 0x18, 0x45,
	0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x50, 0x61, 0x74, 0x63, 0x68, 0x12, 0x38, 0x0a, 0x0a, 0x44, 0x65, 0x70, 0x61, 0x72,
	0x74, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x45, 0x6d,
	0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74,
	0x50, 0x61, 0x74, 0x63, 0x68, 0x52, 0x0a, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x47, 0x0a, 0x0f, 0x49, 0x73, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x45, 0x6d, 0x70,
	0x6c, 0x6f, 0x79, 0x65, 0x65, 0x49, 0x73, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x50, 0x61, 0x74, 0x63, 0x68, 0x52, 0x0f, 0x49, 0x73, 0x41, 0x64, 0x6d,
	0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x53, 0x0a, 0x13, 0x44, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79,
	0x65, 0x65, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x50, 0x61, 0x74, 0x63, 0x68, 0x52, 0x13, 0x44, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12,
	0x53, 0x0a, 0x13, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x44, 0x65, 0x70, 0x61, 0x72,
	0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x45,
	0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x44,
	0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x50, 0x61, 0x74, 0x63, 0x68, 0x52,
	0x13, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x12, 0x29, 0x0a, 0x07, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x57, 0x0a, 0x17, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x74, 0x63, 0x68, 0x52,
	0x17, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x65,
	0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x3d, 0x0a, 0x17, 0x45, 0x6d, 0x70, 0x6c,
	0x6f, 0x79, 0x65, 0x65, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x61,
	0x74, 0x63, 0x68, 0x12, 0x22, 0x0a, 0x0c, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0c, 0x44, 0x65, 0x70, 0x61, 0x72,
	0x74, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x6a, 0x0a, 0x20, 0x45, 0x6d, 0x70, 0x6c, 0x6f,
	0x79, 0x65, 0x65, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x50, 0x61, 0x74, 0x63, 0x68, 0x12, 0x46, 0x0a, 0x13, 0x44,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x13,
	0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x22, 0x58, 0x0a, 0x20, 0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x53,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x50, 0x61, 0x74, 0x63, 0x68, 0x12, 0x34, 0x0a, 0x15, 0x53, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x15, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x22, 0x33, 0x0a,
	0x15, 0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x61, 0x74, 0x63, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x54, 0x0a, 0x20, 0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x43, 0x61,
	0x6e, 0x42, 0x65, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x64, 0x46, 0x6f, 0x72, 0x43, 0x68, 0x61,
	0x74, 0x50, 0x61, 0x74, 0x63, 0x68, 0x12, 0x30, 0x0a, 0x13, 0x43, 0x61, 0x6e, 0x42, 0x65, 0x49,
	0x6e, 0x76, 0x69, 0x74, 0x65, 0x64, 0x46, 0x6f, 0x72, 0x43, 0x68, 0x61, 0x74, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x08, 0x52, 0x13, 0x43, 0x61, 0x6e, 0x42, 0x65, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65,
	0x64, 0x46, 0x6f, 0x72, 0x43, 0x68, 0x61, 0x74, 0x22, 0x56, 0x0a, 0x1c, 0x41, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x50, 0x61, 0x74, 0x63, 0x68, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x73, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x08, 0x52, 0x09, 0x49, 0x73, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x22, 0x48, 0x0a, 0x1c, 0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x49, 0x73, 0x41, 0x64,
	0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x61, 0x74, 0x63, 0x68,
	0x12, 0x28, 0x0a, 0x0f, 0x49, 0x73, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x08, 0x52, 0x0f, 0x49, 0x73, 0x41, 0x64, 0x6d,
	0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x22, 0x65, 0x0a, 0x0c, 0x55, 0x73,
	0x65, 0x72, 0x54, 0x6f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x25, 0x0a, 0x05, 0x4c, 0x6f,
	0x67, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x50, 0x61, 0x74, 0x63, 0x68, 0x52, 0x05, 0x4c, 0x6f, 0x67, 0x69,
	0x6e, 0x12, 0x2e, 0x0a, 0x08, 0x46, 0x75, 0x6c, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x46, 0x75, 0x6c, 0x6c, 0x4e, 0x61,
	0x6d, 0x65, 0x50, 0x61, 0x74, 0x63, 0x68, 0x52, 0x08, 0x46, 0x75, 0x6c, 0x6c, 0x4e, 0x61, 0x6d,
	0x65, 0x22, 0x26, 0x0a, 0x0e, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x50, 0x61,
	0x74, 0x63, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x22, 0x3a, 0x0a, 0x11, 0x55, 0x73, 0x65,
	0x72, 0x46, 0x75, 0x6c, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x50, 0x61, 0x74, 0x63, 0x68, 0x12, 0x25,
	0x0a, 0x08, 0x46, 0x75, 0x6c, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x09, 0x2e, 0x46, 0x75, 0x6c, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x08, 0x46, 0x75, 0x6c,
	0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x9c, 0x02, 0x0a, 0x0d, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x4e, 0x61, 0x6d, 0x65, 0x4f, 0x6e, 0x53, 0x68, 0x65, 0x6c, 0x66, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x4e, 0x61, 0x6d, 0x65, 0x4f, 0x6e, 0x53, 0x68, 0x65, 0x6c,
	0x66, 0x12, 0x3b, 0x0a, 0x15, 0x53, 0x69, 0x67, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x54, 0x65, 0x73,
	0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08,
	0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x15, 0x53, 0x69, 0x67, 0x6e, 0x57, 0x69, 0x74,
	0x68, 0x54, 0x65, 0x73, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x32,
	0x0a, 0x14, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x4f,
	0x6e, 0x53, 0x68, 0x65, 0x6c, 0x66, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x53, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x4f, 0x6e, 0x53, 0x68, 0x65,
	0x6c, 0x66, 0x12, 0x40, 0x0a, 0x0f, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x4f, 0x66, 0x41, 0x74, 0x74,
	0x6f, 0x72, 0x6e, 0x65, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x50, 0x6f,
	0x77, 0x65, 0x72, 0x4f, 0x66, 0x41, 0x74, 0x74, 0x6f, 0x72, 0x6e, 0x65, 0x79, 0x54, 0x6f, 0x50,
	0x6f, 0x73, 0x74, 0x52, 0x0f, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x4f, 0x66, 0x41, 0x74, 0x74, 0x6f,
	0x72, 0x6e, 0x65, 0x79, 0x22, 0x67, 0x0a, 0x15, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x4f, 0x66, 0x41,
	0x74, 0x74, 0x6f, 0x72, 0x6e, 0x65, 0x79, 0x54, 0x6f, 0x50, 0x6f, 0x73, 0x74, 0x12, 0x2e, 0x0a,
	0x06, 0x46, 0x75, 0x6c, 0x6c, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x50, 0x6f, 0x77, 0x65, 0x72, 0x4f, 0x66, 0x41, 0x74, 0x74, 0x6f, 0x72, 0x6e, 0x65, 0x79, 0x46,
	0x75, 0x6c, 0x6c, 0x49, 0x64, 0x52, 0x06, 0x46, 0x75, 0x6c, 0x6c, 0x49, 0x64, 0x12, 0x1e, 0x0a,
	0x0a, 0x55, 0x73, 0x65, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x02, 0x28,
	0x08, 0x52, 0x0a, 0x55, 0x73, 0x65, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x22, 0x65, 0x0a,
	0x15, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x4f, 0x66, 0x41, 0x74, 0x74, 0x6f, 0x72, 0x6e, 0x65, 0x79,
	0x46, 0x75, 0x6c, 0x6c, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x12, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x09, 0x52, 0x12, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x73, 0x73, 0x75, 0x65, 0x72,
	0x49, 0x6e, 0x6e, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x09, 0x49, 0x73, 0x73, 0x75, 0x65,
	0x72, 0x49, 0x6e, 0x6e, 0x22, 0x90, 0x02, 0x0a, 0x1f, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x4f, 0x66,
	0x41, 0x74, 0x74, 0x6f, 0x72, 0x6e, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x36, 0x0a, 0x08, 0x53, 0x65, 0x76, 0x65,
	0x72, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x09, 0x2e, 0x53, 0x65, 0x76,
	0x65, 0x72, 0x69, 0x74, 0x79, 0x3a, 0x0f, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x53, 0x65,
	0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x52, 0x08, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79,
	0x12, 0x5c, 0x0a, 0x0d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x4f,
	0x66, 0x41, 0x74, 0x74, 0x6f, 0x72, 0x6e, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x49, 0x64,
	0x3a, 0x0d, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x0d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x49, 0x64, 0x12, 0x1e,
	0x0a, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x65, 0x78, 0x74, 0x12, 0x37,
	0x0a, 0x06, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x4f, 0x66, 0x41, 0x74, 0x74, 0x6f, 0x72, 0x6e, 0x65, 0x79,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52,
	0x06, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x22, 0x48, 0x0a, 0x1e, 0x50, 0x6f, 0x77, 0x65, 0x72,
	0x4f, 0x66, 0x41, 0x74, 0x74, 0x6f, 0x72, 0x6e, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x43, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x54, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x04, 0x54, 0x65, 0x78,
	0x74, 0x22, 0x3c, 0x0a, 0x20, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x49, 0x6e, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x49, 0x6e, 0x6e, 0x4c, 0x69, 0x73, 0x74,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x49, 0x6e, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x22,
	0xa2, 0x03, 0x0a, 0x22, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x57, 0x69, 0x74, 0x68, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x31, 0x0a, 0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x4f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x4f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5e, 0x0a, 0x12, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x3a, 0x19, 0x55, 0x6e, 0x6b, 0x6e,
	0x6f, 0x77, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x12, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x38, 0x0a, 0x17, 0x4c, 0x61, 0x73,
	0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x54,
	0x69, 0x63, 0x6b, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x10, 0x52, 0x17, 0x4c, 0x61, 0x73, 0x74,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x54, 0x69,
	0x63, 0x6b, 0x73, 0x12, 0x38, 0x0a, 0x17, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x46, 0x72,
	0x6f, 0x6d, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x46, 0x72, 0x6f,
	0x6d, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x34, 0x0a,
	0x15, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x72, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x12, 0x3f, 0x0a, 0x14, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0b, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x52, 0x14,
	0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x22, 0x6e, 0x0a, 0x21, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x49, 0x6e, 0x6e, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x0d, 0x4f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x57,
	0x69, 0x74, 0x68, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0d, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x22, 0x41, 0x0a, 0x0d, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x50, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x09, 0x52, 0x05, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x50,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x08, 0x50,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0x47, 0x0a, 0x10, 0x4f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x33, 0x0a, 0x0d, 0x4f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0d, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x22, 0xdd, 0x06, 0x0a, 0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x14, 0x0a, 0x05, 0x4f, 0x72, 0x67, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09,
	0x52, 0x05, 0x4f, 0x72, 0x67, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x49, 0x6e, 0x6e, 0x18, 0x02,
	0x20, 0x02, 0x28, 0x09, 0x52, 0x03, 0x49, 0x6e, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x4b, 0x70, 0x70,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x4b, 0x70, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x46,
	0x75, 0x6c, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x02, 0x28, 0x09, 0x52, 0x08, 0x46,
	0x75, 0x6c, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x68, 0x6f, 0x72, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x53, 0x68, 0x6f, 0x72,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x05, 0x42, 0x6f, 0x78, 0x65, 0x73, 0x18, 0x07,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x04, 0x2e, 0x42, 0x6f, 0x78, 0x52, 0x05, 0x42, 0x6f, 0x78, 0x65,
	0x73, 0x12, 0x12, 0x0a, 0x04, 0x4f, 0x67, 0x72, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x4f, 0x67, 0x72, 0x6e, 0x12, 0x2a, 0x0a, 0x10, 0x46, 0x6e, 0x73, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x46, 0x6e, 0x73, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x22, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x08, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x07, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x30, 0x0a, 0x13, 0x46, 0x6e, 0x73, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x13, 0x46, 0x6e, 0x73, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x2d, 0x0a, 0x0b, 0x44, 0x65, 0x70, 0x61, 0x72,
	0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x44,
	0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0b, 0x44, 0x65, 0x70, 0x61, 0x72,
	0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x66, 0x6e, 0x73, 0x43, 0x6f,
	0x64, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x49, 0x66, 0x6e, 0x73, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x49, 0x73, 0x50, 0x69, 0x6c, 0x6f, 0x74, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x49, 0x73, 0x50, 0x69, 0x6c, 0x6f, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x49, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x49, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x49, 0x73, 0x54, 0x65,
	0x73, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x49, 0x73, 0x54, 0x65, 0x73, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x49, 0x73, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x08, 0x49, 0x73, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x1c, 0x0a, 0x09,
	0x49, 0x73, 0x52, 0x6f, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x09, 0x49, 0x73, 0x52, 0x6f, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x73,
	0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a,
	0x49, 0x73, 0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x49, 0x6e,
	0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0f, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x0b, 0x53, 0x6f, 0x63, 0x69, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x16, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x53, 0x6f,
	0x63, 0x69, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x0b, 0x53, 0x6f, 0x63, 0x69, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x28, 0x0a, 0x0f, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65,
	0x12, 0x3c, 0x0a, 0x19, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x4f,
	0x66, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x18, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x19, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x4f, 0x66, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c,
	0x0a, 0x09, 0x49, 0x73, 0x46, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x18, 0x19, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x09, 0x49, 0x73, 0x46, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x12, 0x32, 0x0a, 0x14,
	0x48, 0x61, 0x73, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x54, 0x6f,
	0x53, 0x69, 0x67, 0x6e, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x48, 0x61, 0x73, 0x43,
	0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x53, 0x69, 0x67, 0x6e,
	0x22, 0x9e, 0x02, 0x0a, 0x03, 0x42, 0x6f, 0x78, 0x12, 0x14, 0x0a, 0x05, 0x42, 0x6f, 0x78, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x05, 0x42, 0x6f, 0x78, 0x49, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x05, 0x54,
	0x69, 0x74, 0x6c, 0x65, 0x12, 0x31, 0x0a, 0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x4f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5c, 0x0a, 0x14, 0x49, 0x6e, 0x76, 0x6f, 0x69,
	0x63, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x05, 0x76, 0x35, 0x5f, 0x30, 0x32, 0x52,
	0x14, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3c, 0x0a, 0x19, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x65, 0x64, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x41, 0x6c, 0x6c, 0x6f, 0x77,
	0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x19, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x65, 0x64, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x41, 0x6c, 0x6c, 0x6f,
	0x77, 0x65, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x42, 0x6f, 0x78, 0x49, 0x64, 0x47, 0x75, 0x69, 0x64,
	0x18, 0x06, 0x20, 0x02, 0x28, 0x09, 0x52, 0x09, 0x42, 0x6f, 0x78, 0x49, 0x64, 0x47, 0x75, 0x69,
	0x64, 0x22, 0x62, 0x0a, 0x14, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x0b, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0c,
	0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0b, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x46, 0x65, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x46, 0x65, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x73, 0x22, 0x8b, 0x01, 0x0a, 0x0b, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x40, 0x0a, 0x11, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x11, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3a, 0x0a, 0x0f, 0x41, 0x75, 0x74, 0x6f, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x0f, 0x41, 0x75, 0x74, 0x6f, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x22, 0x59, 0x0a, 0x11, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x73, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x08, 0x52, 0x09, 0x49, 0x73, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x65, 0x64, 0x54, 0x69, 0x63, 0x6b, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x10, 0x52, 0x0e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x54, 0x69, 0x63, 0x6b, 0x73, 0x22, 0x2f,
	0x0a, 0x0f, 0x41, 0x75, 0x74, 0x6f, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x73, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x08, 0x52, 0x09, 0x49, 0x73, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x22,
	0x21, 0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x14, 0x0a, 0x05,
	0x54, 0x69, 0x63, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x02, 0x28, 0x10, 0x52, 0x05, 0x54, 0x69, 0x63,
	0x6b, 0x73, 0x22, 0x2b, 0x0a, 0x11, 0x41, 0x73, 0x79, 0x6e, 0x63, 0x4d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x54, 0x61, 0x73, 0x6b, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x22,
	0x72, 0x0a, 0x19, 0x41, 0x63, 0x71, 0x75, 0x69, 0x72, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x72, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x4f, 0x72, 0x67, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x05, 0x4f, 0x72, 0x67,
	0x49, 0x64, 0x12, 0x3f, 0x0a, 0x14, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0b, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x52, 0x14, 0x49,
	0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x22, 0x91, 0x08, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x09, 0x52, 0x09, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x26, 0x0a,
	0x0e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x54, 0x69, 0x63, 0x6b, 0x73, 0x18,
	0x02, 0x20, 0x02, 0x28, 0x10, 0x52, 0x0e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x54, 0x69, 0x63, 0x6b, 0x73, 0x12, 0x38, 0x0a, 0x17, 0x4c, 0x61, 0x73, 0x74, 0x50, 0x61, 0x74,
	0x63, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x54, 0x69, 0x63, 0x6b, 0x73,
	0x18, 0x03, 0x20, 0x02, 0x28, 0x10, 0x52, 0x17, 0x4c, 0x61, 0x73, 0x74, 0x50, 0x61, 0x74, 0x63,
	0x68, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x54, 0x69, 0x63, 0x6b, 0x73, 0x12,
	0x1c, 0x0a, 0x09, 0x46, 0x72, 0x6f, 0x6d, 0x42, 0x6f, 0x78, 0x49, 0x64, 0x18, 0x04, 0x20, 0x02,
	0x28, 0x09, 0x52, 0x09, 0x46, 0x72, 0x6f, 0x6d, 0x42, 0x6f, 0x78, 0x49, 0x64, 0x12, 0x1c, 0x0a,
	0x09, 0x46, 0x72, 0x6f, 0x6d, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x02, 0x28, 0x09,
	0x52, 0x09, 0x46, 0x72, 0x6f, 0x6d, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x54,
	0x6f, 0x42, 0x6f, 0x78, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x54, 0x6f,
	0x42, 0x6f, 0x78, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x54, 0x6f, 0x54, 0x69, 0x74, 0x6c, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x54, 0x6f, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12,
	0x23, 0x0a, 0x08, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x07, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x08, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x07, 0x49, 0x73, 0x44, 0x72, 0x61, 0x66, 0x74, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x07, 0x49, 0x73,
	0x44, 0x72, 0x61, 0x66, 0x74, 0x12, 0x2b, 0x0a, 0x0d, 0x44, 0x72, 0x61, 0x66, 0x74, 0x49, 0x73,
	0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61,
	0x6c, 0x73, 0x65, 0x52, 0x0d, 0x44, 0x72, 0x61, 0x66, 0x74, 0x49, 0x73, 0x4c, 0x6f, 0x63, 0x6b,
	0x65, 0x64, 0x12, 0x2f, 0x0a, 0x0f, 0x44, 0x72, 0x61, 0x66, 0x74, 0x49, 0x73, 0x52, 0x65, 0x63,
	0x79, 0x63, 0x6c, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c,
	0x73, 0x65, 0x52, 0x0f, 0x44, 0x72, 0x61, 0x66, 0x74, 0x49, 0x73, 0x52, 0x65, 0x63, 0x79, 0x63,
	0x6c, 0x65, 0x64, 0x12, 0x2e, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x46, 0x72,
	0x6f, 0x6d, 0x44, 0x72, 0x61, 0x66, 0x74, 0x49, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x46, 0x72, 0x6f, 0x6d, 0x44, 0x72, 0x61, 0x66,
	0x74, 0x49, 0x64, 0x12, 0x4c, 0x0a, 0x21, 0x44, 0x72, 0x61, 0x66, 0x74, 0x49, 0x73, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x64, 0x54, 0x6f, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x09, 0x52, 0x21,
	0x44, 0x72, 0x61, 0x66, 0x74, 0x49, 0x73, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d,
	0x65, 0x64, 0x54, 0x6f, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x23, 0x0a, 0x09, 0x49, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x09, 0x49, 0x73, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x06, 0x49, 0x73, 0x54, 0x65, 0x73, 0x74,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x06, 0x49,
	0x73, 0x54, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0a, 0x49, 0x73, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65,
	0x52, 0x0a, 0x49, 0x73, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x12, 0x27, 0x0a, 0x0b,
	0x49, 0x73, 0x50, 0x72, 0x6f, 0x78, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x0b, 0x49, 0x73, 0x50, 0x72, 0x6f, 0x78,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x42, 0x6f,
	0x78, 0x49, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x50, 0x72, 0x6f, 0x78, 0x79,
	0x42, 0x6f, 0x78, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x54, 0x69,
	0x74, 0x6c, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x50, 0x72, 0x6f, 0x78, 0x79,
	0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x2d, 0x0a, 0x0e, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x49,
	0x73, 0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66,
	0x61, 0x6c, 0x73, 0x65, 0x52, 0x0e, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x73, 0x4c, 0x6f,
	0x63, 0x6b, 0x65, 0x64, 0x12, 0x25, 0x0a, 0x08, 0x4c, 0x6f, 0x63, 0x6b, 0x4d, 0x6f, 0x64, 0x65,
	0x18, 0x15, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x09, 0x2e, 0x4c, 0x6f, 0x63, 0x6b, 0x4d, 0x6f, 0x64,
	0x65, 0x52, 0x08, 0x4c, 0x6f, 0x63, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x2e, 0x0a, 0x0b, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x16, 0x20, 0x02, 0x28, 0x0e,
	0x32, 0x0c, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x73, 0x0a, 0x22, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x4c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66,
	0x6f, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x54, 0x6f, 0x4c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x22, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x4c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x25, 0x0a, 0x0a, 0x49, 0x73, 0x52, 0x65, 0x75, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x18,
	0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x0a, 0x49, 0x73, 0x52,
	0x65, 0x75, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x22, 0xc6, 0x02, 0x0a, 0x22, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x4c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x28,
	0x0a, 0x0f, 0x4c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x46, 0x72, 0x6f, 0x6d, 0x42, 0x6f, 0x78, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0f, 0x4c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x46,
	0x72, 0x6f, 0x6d, 0x42, 0x6f, 0x78, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x4c, 0x65, 0x74, 0x74,
	0x65, 0x72, 0x54, 0x6f, 0x42, 0x6f, 0x78, 0x49, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52,
	0x0d, 0x4c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x54, 0x6f, 0x42, 0x6f, 0x78, 0x49, 0x64, 0x12, 0x36,
	0x0a, 0x16, 0x4c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x46, 0x72, 0x6f, 0x6d, 0x44, 0x65, 0x70, 0x61,
	0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16,
	0x4c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x46, 0x72, 0x6f, 0x6d, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74,
	0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x14, 0x4c, 0x65, 0x74, 0x74, 0x65, 0x72,
	0x54, 0x6f, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x4c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x54, 0x6f, 0x44, 0x65,
	0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x4c, 0x65,
	0x74, 0x74, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x42, 0x6f, 0x78, 0x49, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x4c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x78,
	0x79, 0x42, 0x6f, 0x78, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x17, 0x4c, 0x65, 0x74, 0x74, 0x65, 0x72,
	0x50, 0x72, 0x6f, 0x78, 0x79, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x4c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x50,
	0x72, 0x6f, 0x78, 0x79, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x22, 0xdd, 0x0d, 0x0a, 0x06, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x3e, 0x0a, 0x0a, 0x45,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0b, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x11, 0x54, 0x79,
	0x70, 0x65, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52,
	0x0a, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x45,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x08, 0x45,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x50, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12,
	0x22, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x08, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x07, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x12, 0x4e, 0x0a, 0x0e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x41, 0x74,
	0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x15, 0x55, 0x6e,
	0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x0e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x3d, 0x0a, 0x16, 0x4e, 0x65, 0x65, 0x64, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74,
	0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x3a,
	0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x16, 0x4e, 0x65, 0x65, 0x64, 0x52, 0x65, 0x63, 0x69,
	0x70, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x42, 0x6f, 0x78, 0x49, 0x64, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x42, 0x6f, 0x78, 0x49, 0x64,
	0x12, 0x30, 0x0a, 0x13, 0x4e, 0x6f, 0x74, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x65, 0x64,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x4e,
	0x6f, 0x74, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x2d, 0x0a, 0x0c, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x0c, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x2b, 0x0a, 0x0f, 0x52, 0x61, 0x77, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x61, 0x74, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x10, 0x3a, 0x01, 0x30, 0x52, 0x0f, 0x52,
	0x61, 0x77, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x37,
	0x0a, 0x0e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2e, 0x0a, 0x12, 0x53, 0x69, 0x67, 0x6e, 0x65,
	0x72, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x12, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x44, 0x65, 0x70, 0x61, 0x72,
	0x74, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x4c, 0x0a, 0x15, 0x52, 0x65, 0x73, 0x6f, 0x6c,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x15,
	0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x5e, 0x0a, 0x1b, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x44, 0x65, 0x6e, 0x69, 0x61, 0x6c,
	0x49, 0x6e, 0x66, 0x6f, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x52, 0x65, 0x73,
	0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x44, 0x65,
	0x6e, 0x69, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x1b, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x44, 0x65, 0x6e, 0x69, 0x61,
	0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x27, 0x0a, 0x0b, 0x4e, 0x65, 0x65, 0x64, 0x52, 0x65, 0x63,
	0x65, 0x69, 0x70, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73,
	0x65, 0x52, 0x0b, 0x4e, 0x65, 0x65, 0x64, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x12, 0x3d, 0x0a, 0x16, 0x49, 0x73,
	0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73,
	0x65, 0x52, 0x16, 0x49, 0x73, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x35, 0x0a, 0x12, 0x49, 0x73, 0x45,
	0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x12, 0x49, 0x73,
	0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x12, 0x2c, 0x0a, 0x11, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x41, 0x74, 0x74,
	0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x64,
	0x0a, 0x1d, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x18,
	0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x1d, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x5b, 0x0a, 0x1a, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x61, 0x6c, 0x49, 0x6e,
	0x66, 0x6f, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x6c,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x61,
	0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x1a, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x61, 0x6c, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x3d, 0x0a, 0x10, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x43, 0x61,
	0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x10,
	0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x16, 0x0a, 0x06, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x19, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x06, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x5b, 0x0a, 0x1a, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f,
	0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x1a, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x46, 0x0a, 0x13, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x66, 0x75, 0x73,
	0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x66, 0x75, 0x73, 0x61, 0x6c, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x13, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x66, 0x75,
	0x73, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x35, 0x0a, 0x0c, 0x4f, 0x75, 0x74, 0x65, 0x72,
	0x44, 0x6f, 0x63, 0x66, 0x6c, 0x6f, 0x77, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x4f, 0x75, 0x74, 0x65, 0x72, 0x44, 0x6f, 0x63, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x0c, 0x4f, 0x75, 0x74, 0x65, 0x72, 0x44, 0x6f, 0x63, 0x66, 0x6c, 0x6f, 0x77, 0x12, 0x52,
	0x0a, 0x15, 0x52, 0x65, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x15, 0x52, 0x65, 0x76,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x24, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x49, 0x64, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x46, 0x0a, 0x13, 0x50, 0x6f, 0x77, 0x65,
	0x72, 0x4f, 0x66, 0x41, 0x74, 0x74, 0x6f, 0x72, 0x6e, 0x65, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x18,
	0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x4f, 0x66, 0x41,
	0x74, 0x74, 0x6f, 0x72, 0x6e, 0x65, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x13, 0x50, 0x6f, 0x77,
	0x65, 0x72, 0x4f, 0x66, 0x41, 0x74, 0x74, 0x6f, 0x72, 0x6e, 0x65, 0x79, 0x49, 0x6e, 0x66, 0x6f,
	0x22, 0x31, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x53,
	0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0f, 0x52, 0x04, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x44,
	0x61, 0x74, 0x61, 0x22, 0x97, 0x28, 0x0a, 0x08, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x4b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x4b, 0x65, 0x79, 0x12, 0x1c, 0x0a, 0x09,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52,
	0x09, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x18, 0x03, 0x20, 0x02, 0x28, 0x09, 0x52, 0x08, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x54, 0x69, 0x63, 0x6b, 0x73,
	0x18, 0x04, 0x20, 0x02, 0x28, 0x10, 0x52, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x54, 0x69, 0x63, 0x6b, 0x73, 0x12, 0x2c,
	0x0a, 0x11, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x42, 0x6f,
	0x78, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x42, 0x6f, 0x78, 0x49, 0x64, 0x12, 0x48, 0x0a, 0x0c,
	0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x3a, 0x15, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x44, 0x54, 0x52, 0x0c, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3b, 0x0a, 0x12, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61,
	0x6c, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x18, 0x07, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x52,
	0x12, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x73, 0x12, 0x43, 0x0a, 0x16, 0x53, 0x75, 0x62, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61,
	0x74, 0x65, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x18, 0x08, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x52, 0x16, 0x53, 0x75, 0x62, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x44, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x12, 0x22, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x52, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x44, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x26, 0x0a, 0x0e,
	0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x64, 0x0a, 0x1d, 0x4e, 0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x6c, 0x69, 0x7a, 0x65, 0x64, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x4e, 0x6f,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x44, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x1d, 0x4e, 0x6f, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x3a, 0x0a, 0x0f, 0x49, 0x6e,
	0x76, 0x6f, 0x69, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x0f, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x67, 0x0a, 0x1e, 0x54, 0x72, 0x75, 0x73, 0x74, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x54, 0x72, 0x75, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52,
	0x1e, 0x54, 0x72, 0x75, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x3e, 0x0a, 0x0e, 0x54, 0x6f, 0x72, 0x67, 0x31, 0x32, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x44,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52,
	0x0e, 0x54, 0x6f, 0x72, 0x67, 0x31, 0x32, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x52, 0x0a, 0x17, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x17, 0x49, 0x6e, 0x76, 0x6f,
	0x69, 0x63, 0x65, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x58, 0x0a, 0x19, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x6f,
	0x72, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x52, 0x19, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x72, 0x72, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x70, 0x0a,
	0x21, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x49, 0x6e, 0x76, 0x6f, 0x69,
	0x63, 0x65, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x76, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x21, 0x49, 0x6e,
	0x76, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x64, 0x0a, 0x1d, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x65, 0x72,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x1d, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x52, 0x0a, 0x17, 0x50, 0x72, 0x6f, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x52, 0x17, 0x50, 0x72, 0x6f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63,
	0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x44, 0x0a, 0x11, 0x58, 0x6d, 0x6c,
	0x54, 0x6f, 0x72, 0x67, 0x31, 0x32, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x44, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x11, 0x58, 0x6d,
	0x6c, 0x54, 0x6f, 0x72, 0x67, 0x31, 0x32, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x62, 0x0a, 0x20, 0x58, 0x6d, 0x6c, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x42, 0x61, 0x73, 0x69,
	0x63, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x52, 0x20, 0x58, 0x6d, 0x6c, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x23, 0x0a, 0x09, 0x49, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64,
	0x18, 0x18, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x09, 0x49,
	0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x44, 0x65, 0x70, 0x61,
	0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x06,
	0x49, 0x73, 0x54, 0x65, 0x73, 0x74, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61,
	0x6c, 0x73, 0x65, 0x52, 0x06, 0x49, 0x73, 0x54, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x46,
	0x72, 0x6f, 0x6d, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18,
	0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x46, 0x72, 0x6f, 0x6d, 0x44, 0x65, 0x70, 0x61, 0x72,
	0x74, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x54, 0x6f, 0x44, 0x65, 0x70,
	0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x54, 0x6f, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x40, 0x0a, 0x11, 0x50, 0x72, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x11,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x2a, 0x0a, 0x10, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x44, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x43, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x3d, 0x0a,
	0x10, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x10, 0x52, 0x65, 0x73, 0x6f,
	0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x56, 0x0a, 0x10,
	0x52, 0x65, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x20, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x52, 0x65, 0x76, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x3a, 0x17, 0x55, 0x6e, 0x6b, 0x6e, 0x6f,
	0x77, 0x6e, 0x52, 0x65, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x10, 0x52, 0x65, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x2e, 0x0a, 0x12, 0x53, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x54, 0x69, 0x63, 0x6b, 0x73, 0x18, 0x21, 0x20, 0x01, 0x28, 0x10,
	0x52, 0x12, 0x53, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x54,
	0x69, 0x63, 0x6b, 0x73, 0x12, 0x36, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x54, 0x69, 0x63, 0x6b, 0x73, 0x18, 0x22,
	0x20, 0x01, 0x28, 0x10, 0x52, 0x16, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x54, 0x69, 0x63, 0x6b, 0x73, 0x12, 0x4b, 0x0a, 0x15,
	0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x23, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x46, 0x6f,
	0x72, 0x77, 0x61, 0x72, 0x64, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x52, 0x15, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x44, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x58, 0x0a, 0x19, 0x52, 0x65, 0x63,
	0x6f, 0x6e, 0x63, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x74, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x26, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x42,
	0x69, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x19, 0x52, 0x65, 0x63, 0x6f, 0x6e, 0x63,
	0x69, 0x6c, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x3d, 0x0a, 0x10, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x27, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x52, 0x10, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x3e, 0x0a, 0x0e, 0x54, 0x6f, 0x72, 0x67, 0x31, 0x33, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x42, 0x61, 0x73,
	0x69, 0x63, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x52, 0x0e, 0x54, 0x6f, 0x72, 0x67, 0x31, 0x33, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x4f, 0x0a, 0x16, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x29, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x16, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x7a, 0x0a, 0x19, 0x52, 0x6f, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x2a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x52, 0x6f, 0x61, 0x6d, 0x69, 0x6e, 0x67,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x3a, 0x20, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x52, 0x6f, 0x61, 0x6d, 0x69,
	0x6e, 0x67, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x19, 0x52, 0x6f, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x35, 0x0a, 0x12, 0x48, 0x61, 0x73, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x50, 0x72, 0x69, 0x6e,
	0x74, 0x46, 0x6f, 0x72, 0x6d, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c,
	0x73, 0x65, 0x52, 0x12, 0x48, 0x61, 0x73, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x50, 0x72, 0x69,
	0x6e, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x12, 0x2f, 0x0a, 0x0a, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x44, 0x61, 0x74, 0x61, 0x18, 0x2c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x43, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0a, 0x43, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x49, 0x64, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x50, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x49, 0x64, 0x12, 0x5a, 0x0a, 0x11, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x44,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12,
	0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x3a, 0x18, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x44, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x44, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x46, 0x0a, 0x1e, 0x4c, 0x61, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x54, 0x69, 0x63, 0x6b,
	0x73, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x10, 0x52, 0x1e, 0x4c, 0x61, 0x73, 0x74, 0x4d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x54, 0x69, 0x63, 0x6b, 0x73, 0x12, 0x2e, 0x0a, 0x12, 0x49, 0x73, 0x45, 0x6e, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x30, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x12, 0x49, 0x73, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x6a, 0x0a, 0x15, 0x53, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x31, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x53,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x3a, 0x1c,
	0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x53, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x15, 0x53, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x67, 0x0a, 0x1e, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x61, 0x72, 0x79, 0x41, 0x67, 0x72, 0x65, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x32, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x53, 0x75,
	0x70, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x72, 0x79, 0x41, 0x67, 0x72, 0x65, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x1e, 0x53, 0x75,
	0x70, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x72, 0x79, 0x41, 0x67, 0x72, 0x65, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1d, 0x0a, 0x06,
	0x49, 0x73, 0x52, 0x65, 0x61, 0x64, 0x18, 0x33, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61,
	0x6c, 0x73, 0x65, 0x52, 0x06, 0x49, 0x73, 0x52, 0x65, 0x61, 0x64, 0x12, 0x52, 0x0a, 0x24, 0x52,
	0x6f, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x34, 0x20, 0x01, 0x28, 0x09, 0x52, 0x24, 0x52, 0x6f, 0x61, 0x6d, 0x69,
	0x6e, 0x67, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x2d, 0x0a, 0x0e, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x73, 0x4c, 0x6f, 0x63, 0x6b, 0x65,
	0x64, 0x18, 0x35, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x0e,
	0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x73, 0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x12, 0x5e,
	0x0a, 0x1a, 0x50, 0x72, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x67, 0x72, 0x65, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x36, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x4e, 0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a,
	0x65, 0x64, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x52, 0x1a, 0x50, 0x72, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x67, 0x72,
	0x65, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x60,
	0x0a, 0x1b, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x79, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x37, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x4e, 0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69,
	0x7a, 0x65, 0x64, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x52, 0x1b, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x70, 0x0a, 0x21, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x61, 0x6c, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x38, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x55, 0x6e,
	0x69, 0x76, 0x65, 0x72, 0x73, 0x61, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x44,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52,
	0x21, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x61, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x88, 0x01, 0x0a, 0x29, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x61, 0x6c,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x39, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73,
	0x61, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x52, 0x29, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x61, 0x6c, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x76,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x76, 0x0a,
	0x23, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x61, 0x6c, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x55, 0x6e, 0x69,
	0x76, 0x65, 0x72, 0x73, 0x61, 0x6c, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x52, 0x23, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x61, 0x6c, 0x43, 0x6f, 0x72, 0x72, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x8e, 0x01, 0x0a, 0x2b, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72,
	0x73, 0x61, 0x6c, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x55, 0x6e,
	0x69, 0x76, 0x65, 0x72, 0x73, 0x61, 0x6c, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x2b, 0x55, 0x6e, 0x69, 0x76, 0x65,
	0x72, 0x73, 0x61, 0x6c, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x2e, 0x0a, 0x11, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x49, 0x64, 0x18, 0x3c, 0x20, 0x01, 0x28,
	0x09, 0x3a, 0x00, 0x52, 0x11, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x6f, 0x75, 0x74, 0x65, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x11, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68,
	0x6d, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x3d, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x11, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x66, 0x0a, 0x14, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x53, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x3e, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x15, 0x2e, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x3a, 0x1b, 0x55, 0x6e, 0x6b, 0x6e, 0x6f,
	0x77, 0x6e, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x14, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x53, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x20, 0x0a, 0x0b,
	0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x49, 0x64, 0x18, 0x3f, 0x20, 0x02, 0x28,
	0x09, 0x52, 0x0b, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x49, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x40, 0x20, 0x02, 0x28, 0x09,
	0x52, 0x08, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x57, 0x6f,
	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x18, 0x41, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0a,
	0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x69,
	0x74, 0x6c, 0x65, 0x18, 0x42, 0x20, 0x02, 0x28, 0x09, 0x52, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65,
	0x12, 0x29, 0x0a, 0x08, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x43, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x49, 0x74, 0x65,
	0x6d, 0x52, 0x08, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x55, 0x0a, 0x18, 0x52,
	0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x44, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x52, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x18, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x49, 0x0a, 0x14, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x45, 0x20, 0x02, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x14, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x72, 0x0a,
	0x17, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x46, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x18,
	0x2e, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x3a, 0x1e, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x52, 0x17, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x55, 0x0a, 0x18, 0x41, 0x6d, 0x65, 0x6e, 0x64, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x47, 0x20,
	0x02, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x41, 0x6d, 0x65, 0x6e, 0x64, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x18,
	0x41, 0x6d, 0x65, 0x6e, 0x64, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1f, 0x0a, 0x06, 0x4f, 0x72, 0x69, 0x67,
	0x69, 0x6e, 0x18, 0x48, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x4f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x52, 0x06, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0x2c, 0x0a, 0x10, 0x45, 0x64, 0x69,
	0x74, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x18, 0x49, 0x20,
	0x01, 0x28, 0x09, 0x3a, 0x00, 0x52, 0x10, 0x45, 0x64, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x08, 0x4c, 0x6f, 0x63, 0x6b, 0x4d,
	0x6f, 0x64, 0x65, 0x18, 0x4a, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x09, 0x2e, 0x4c, 0x6f, 0x63, 0x6b,
	0x4d, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x4c, 0x6f, 0x63, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x4c,
	0x0a, 0x15, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x4b, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x15, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x52, 0x65, 0x63,
	0x65, 0x69, 0x70, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x18, 0x0a, 0x07,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x4c, 0x20, 0x02, 0x28, 0x09, 0x52, 0x07, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x11, 0x4c, 0x61, 0x73, 0x74, 0x4f, 0x75,
	0x74, 0x65, 0x72, 0x44, 0x6f, 0x63, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x18, 0x4d, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x4c, 0x61, 0x73, 0x74, 0x4f, 0x75, 0x74, 0x65, 0x72, 0x44, 0x6f, 0x63,
	0x66, 0x6c, 0x6f, 0x77, 0x52, 0x11, 0x4c, 0x61, 0x73, 0x74, 0x4f, 0x75, 0x74, 0x65, 0x72, 0x44,
	0x6f, 0x63, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x50, 0x72, 0x6f, 0x78, 0x79,
	0x42, 0x6f, 0x78, 0x49, 0x64, 0x18, 0x4e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x50, 0x72, 0x6f,
	0x78, 0x79, 0x42, 0x6f, 0x78, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x11, 0x50, 0x72, 0x6f, 0x78, 0x79,
	0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x4f, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x11, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x0d, 0x44, 0x6f, 0x63, 0x66, 0x6c, 0x6f, 0x77,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x50, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x44,
	0x6f, 0x63, 0x66, 0x6c, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x56, 0x33, 0x52, 0x0d,
	0x44, 0x6f, 0x63, 0x66, 0x6c, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xa4, 0x01,
	0x0a, 0x0e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x4e, 0x0a, 0x0e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x6c,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x15, 0x55, 0x6e, 0x6b, 0x6e, 0x6f,
	0x77, 0x6e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x0e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09,
	0x52, 0x06, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x12, 0x2a, 0x0a, 0x10, 0x49, 0x6e, 0x69, 0x74,
	0x69, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x49, 0x64, 0x22, 0x83, 0x02, 0x0a, 0x15, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x56,
	0x0a, 0x0b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x1c, 0x55, 0x6e, 0x6b,
	0x6e, 0x6f, 0x77, 0x6e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x06, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x12, 0x29,
	0x0a, 0x06, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x52, 0x06, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x52, 0x65, 0x73,
	0x6f, 0x6c, 0x76, 0x65, 0x64, 0x57, 0x69, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x57, 0x69, 0x74, 0x68, 0x12, 0x2b, 0x0a,
	0x07, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x11,
	0x2e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x07, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x82, 0x01, 0x0a, 0x10, 0x52,
	0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12,
	0x1e, 0x0a, 0x0a, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x22, 0x0a, 0x0c, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x55, 0x73, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x55, 0x73, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22,
	0x61, 0x0a, 0x1b, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x44, 0x65, 0x6e, 0x69, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16,
	0x0a, 0x06, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x06,
	0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x12, 0x2a, 0x0a, 0x10, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61,
	0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x49, 0x64, 0x22, 0x95, 0x01, 0x0a, 0x21, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x44, 0x65, 0x6e, 0x69, 0x61, 0x6c, 0x41, 0x74,
	0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x3e, 0x0a, 0x1a, 0x49, 0x6e, 0x69, 0x74,
	0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x1a, 0x49, 0x6e,
	0x69, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x06, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x22, 0x7b, 0x0a, 0x2d, 0x52, 0x65,
	0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x44,
	0x65, 0x6e, 0x69, 0x61, 0x6c, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x4a, 0x0a, 0x20, 0x49,
	0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x44, 0x65, 0x6e, 0x69, 0x61, 0x6c, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x20, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65,
	0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x44,
	0x65, 0x6e, 0x69, 0x61, 0x6c, 0x49, 0x64, 0x22, 0x51, 0x0a, 0x1d, 0x52, 0x65, 0x73, 0x6f, 0x6c,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x07, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x02,
	0x28, 0x09, 0x52, 0x06, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x22, 0x4e, 0x0a, 0x1a, 0x52, 0x65,
	0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x65, 0x6d,
	0x6f, 0x76, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x07, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x02,
	0x28, 0x09, 0x52, 0x06, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x22, 0x2a, 0x0a, 0x10, 0x43, 0x61,
	0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16,
	0x0a, 0x06, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x06,
	0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x22, 0x77, 0x0a, 0x1a, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x41, 0x0a, 0x15, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72,
	0x6d, 0x65, 0x64, 0x54, 0x6f, 0x4c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x52, 0x15, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x64, 0x54, 0x6f, 0x4c,
	0x65, 0x74, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x41, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x22,
	0xa3, 0x01, 0x0a, 0x13, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x66, 0x75,
	0x73, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x44, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x66, 0x75, 0x73, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x1a, 0x55, 0x6e, 0x6b,
	0x6e, 0x6f, 0x77, 0x6e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x66, 0x75,
	0x73, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x42, 0x6f, 0x78, 0x49, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x05, 0x42, 0x6f,
	0x78, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x43,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x43, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x8d, 0x01, 0x0a, 0x10, 0x4f, 0x75, 0x74, 0x65, 0x72, 0x44,
	0x6f, 0x63, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x26, 0x0a, 0x0e, 0x44, 0x6f,
	0x63, 0x66, 0x6c, 0x6f, 0x77, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x09, 0x52, 0x0e, 0x44, 0x6f, 0x63, 0x66, 0x6c, 0x6f, 0x77, 0x4e, 0x61, 0x6d, 0x65, 0x64,
	0x49, 0x64, 0x12, 0x30, 0x0a, 0x13, 0x44, 0x6f, 0x63, 0x66, 0x6c, 0x6f, 0x77, 0x46, 0x72, 0x69,
	0x65, 0x6e, 0x64, 0x6c, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52,
	0x13, 0x44, 0x6f, 0x63, 0x66, 0x6c, 0x6f, 0x77, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x6c, 0x79,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03,
	0x20, 0x02, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xb7, 0x01, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x18, 0x0a, 0x07, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x09, 0x52, 0x07, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x46, 0x72,
	0x69, 0x65, 0x6e, 0x64, 0x6c, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09,
	0x52, 0x0c, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x6c, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24,
	0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x4f,
	0x75, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x07, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x07, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22,
	0x36, 0x0a, 0x0c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12,
	0x12, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x54, 0x65, 0x78, 0x74, 0x22, 0x45, 0x0a, 0x1b, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x52, 0x65, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x26, 0x0a, 0x0e, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61,
	0x74, 0x6f, 0x72, 0x42, 0x6f, 0x78, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0e,
	0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x42, 0x6f, 0x78, 0x49, 0x64, 0x22, 0x7f,
	0x0a, 0x13, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x4f, 0x66, 0x41, 0x74, 0x74, 0x6f, 0x72, 0x6e, 0x65,
	0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2e, 0x0a, 0x06, 0x46, 0x75, 0x6c, 0x6c, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x4f, 0x66, 0x41,
	0x74, 0x74, 0x6f, 0x72, 0x6e, 0x65, 0x79, 0x46, 0x75, 0x6c, 0x6c, 0x49, 0x64, 0x52, 0x06, 0x46,
	0x75, 0x6c, 0x6c, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x4f, 0x66, 0x41,
	0x74, 0x74, 0x6f, 0x72, 0x6e, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22,
	0xe2, 0x01, 0x0a, 0x1d, 0x4e, 0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65,
	0x64, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x68, 0x0a, 0x0e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x4e, 0x6f, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x3a, 0x22, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e,
	0x4e, 0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x44, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0e, 0x44, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x57, 0x0a, 0x0d, 0x52,
	0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x3a, 0x21, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x52, 0x65, 0x63, 0x65, 0x69,
	0x70, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0d, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x22, 0x95, 0x02, 0x0a, 0x0f, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x4a, 0x0a, 0x0d, 0x49, 0x6e, 0x76, 0x6f,
	0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0e, 0x2e, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x3a,
	0x14, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0d, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20,
	0x02, 0x28, 0x09, 0x52, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x56, 0x61,
	0x74, 0x18, 0x03, 0x20, 0x02, 0x28, 0x09, 0x52, 0x03, 0x56, 0x61, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x04, 0x20, 0x02, 0x28, 0x05, 0x52, 0x08,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x3c, 0x0a, 0x19, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x54, 0x69, 0x63, 0x6b, 0x73, 0x18, 0x05, 0x20, 0x02, 0x28, 0x10, 0x52, 0x19, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x54, 0x69, 0x63, 0x6b, 0x73, 0x12, 0x34, 0x0a, 0x15, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63,
	0x65, 0x41, 0x6d, 0x65, 0x6e, 0x64, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x18,
	0x06, 0x20, 0x02, 0x28, 0x05, 0x52, 0x15, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x41, 0x6d,
	0x65, 0x6e, 0x64, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x22, 0x95, 0x03, 0x0a,
	0x17, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x5a, 0x0a, 0x15, 0x49, 0x6e, 0x76, 0x6f,
	0x69, 0x63, 0x65, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x3a, 0x14, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e,
	0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x15, 0x49,
	0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x34, 0x0a, 0x15, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c,
	0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x02, 0x28, 0x09, 0x52, 0x15, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x76,
	0x6f, 0x69, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x13, 0x4f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x44, 0x61, 0x74,
	0x65, 0x18, 0x03, 0x20, 0x02, 0x28, 0x09, 0x52, 0x13, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61,
	0x6c, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x02, 0x28, 0x09, 0x52, 0x05, 0x54, 0x6f, 0x74,
	0x61, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x56, 0x61, 0x74, 0x18, 0x05, 0x20, 0x02, 0x28, 0x09, 0x52,
	0x03, 0x56, 0x61, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x18, 0x06, 0x20, 0x02, 0x28, 0x05, 0x52, 0x08, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x12, 0x3c, 0x0a, 0x19, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x69, 0x63, 0x6b, 0x73, 0x18, 0x07, 0x20,
	0x02, 0x28, 0x10, 0x52, 0x19, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x69, 0x63, 0x6b, 0x73, 0x12, 0x34,
	0x0a, 0x15, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x41, 0x6d, 0x65, 0x6e, 0x64, 0x6d, 0x65,
	0x6e, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x08, 0x20, 0x02, 0x28, 0x05, 0x52, 0x15, 0x49,
	0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x41, 0x6d, 0x65, 0x6e, 0x64, 0x6d, 0x65, 0x6e, 0x74, 0x46,
	0x6c, 0x61, 0x67, 0x73, 0x22, 0xe3, 0x04, 0x0a, 0x19, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x5e, 0x0a, 0x17, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x72,
	0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x3a, 0x14, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x49, 0x6e, 0x76, 0x6f,
	0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x17, 0x49, 0x6e, 0x76, 0x6f, 0x69,
	0x63, 0x65, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x34, 0x0a, 0x15, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x49, 0x6e,
	0x76, 0x6f, 0x69, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x02, 0x28,
	0x09, 0x52, 0x15, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x76, 0x6f, 0x69,
	0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x13, 0x4f, 0x72, 0x69, 0x67,
	0x69, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x44, 0x61, 0x74, 0x65, 0x18,
	0x03, 0x20, 0x02, 0x28, 0x09, 0x52, 0x13, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x49,
	0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x44, 0x0a, 0x1d, 0x4f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x65, 0x76,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x1d, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x76, 0x6f, 0x69,
	0x63, 0x65, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x40, 0x0a, 0x1b, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x76, 0x6f,
	0x69, 0x63, 0x65, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1b, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x49,
	0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x61,
	0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x49, 0x6e, 0x63, 0x18, 0x06,
	0x20, 0x02, 0x28, 0x09, 0x52, 0x08, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x49, 0x6e, 0x63, 0x12, 0x1a,
	0x0a, 0x08, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x44, 0x65, 0x63, 0x18, 0x07, 0x20, 0x02, 0x28, 0x09,
	0x52, 0x08, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x44, 0x65, 0x63, 0x12, 0x16, 0x0a, 0x06, 0x56, 0x61,
	0x74, 0x49, 0x6e, 0x63, 0x18, 0x08, 0x20, 0x02, 0x28, 0x09, 0x52, 0x06, 0x56, 0x61, 0x74, 0x49,
	0x6e, 0x63, 0x12, 0x16, 0x0a, 0x06, 0x56, 0x61, 0x74, 0x44, 0x65, 0x63, 0x18, 0x09, 0x20, 0x02,
	0x28, 0x09, 0x52, 0x06, 0x56, 0x61, 0x74, 0x44, 0x65, 0x63, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x0a, 0x20, 0x02, 0x28, 0x05, 0x52, 0x08, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x3c, 0x0a, 0x19, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x69,
	0x63, 0x6b, 0x73, 0x18, 0x0b, 0x20, 0x02, 0x28, 0x10, 0x52, 0x19, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x54,
	0x69, 0x63, 0x6b, 0x73, 0x12, 0x34, 0x0a, 0x15, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x41,
	0x6d, 0x65, 0x6e, 0x64, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x0c, 0x20,
	0x02, 0x28, 0x05, 0x52, 0x15, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x41, 0x6d, 0x65, 0x6e,
	0x64, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x22, 0x8b, 0x06, 0x0a, 0x21, 0x49,
	0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x6e, 0x0a, 0x1f, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x72, 0x72, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x49, 0x6e, 0x76, 0x6f,
	0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x3a, 0x14, 0x55, 0x6e, 0x6b, 0x6e, 0x6f,
	0x77, 0x6e, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x1f, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x34, 0x0a, 0x15, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x76, 0x6f,
	0x69, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52,
	0x15, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x13, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x61, 0x6c, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x44, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20,
	0x02, 0x28, 0x09, 0x52, 0x13, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x76,
	0x6f, 0x69, 0x63, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x44, 0x0a, 0x1d, 0x4f, 0x72, 0x69, 0x67,
	0x69, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x65, 0x76, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x1d, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x40,
	0x0a, 0x1b, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63,
	0x65, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x1b, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x76,
	0x6f, 0x69, 0x63, 0x65, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65,
	0x12, 0x48, 0x0a, 0x1f, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x76, 0x6f,
	0x69, 0x63, 0x65, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x06, 0x20, 0x02, 0x28, 0x09, 0x52, 0x1f, 0x4f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x44, 0x0a, 0x1d, 0x4f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x72,
	0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x02, 0x28,
	0x09, 0x52, 0x1d, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x76, 0x6f, 0x69,
	0x63, 0x65, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x49, 0x6e, 0x63, 0x18, 0x08, 0x20, 0x02,
	0x28, 0x09, 0x52, 0x08, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x49, 0x6e, 0x63, 0x12, 0x1a, 0x0a, 0x08,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x44, 0x65, 0x63, 0x18, 0x09, 0x20, 0x02, 0x28, 0x09, 0x52, 0x08,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x44, 0x65, 0x63, 0x12, 0x16, 0x0a, 0x06, 0x56, 0x61, 0x74, 0x49,
	0x6e, 0x63, 0x18, 0x0a, 0x20, 0x02, 0x28, 0x09, 0x52, 0x06, 0x56, 0x61, 0x74, 0x49, 0x6e, 0x63,
	0x12, 0x16, 0x0a, 0x06, 0x56, 0x61, 0x74, 0x44, 0x65, 0x63, 0x18, 0x0b, 0x20, 0x02, 0x28, 0x09,
	0x52, 0x06, 0x56, 0x61, 0x74, 0x44, 0x65, 0x63, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x18, 0x0c, 0x20, 0x02, 0x28, 0x05, 0x52, 0x08, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x12, 0x3c, 0x0a, 0x19, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x69, 0x63, 0x6b,
	0x73, 0x18, 0x0d, 0x20, 0x02, 0x28, 0x10, 0x52, 0x19, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x69, 0x63,
	0x6b, 0x73, 0x12, 0x34, 0x0a, 0x15, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x41, 0x6d, 0x65,
	0x6e, 0x64, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x0e, 0x20, 0x02, 0x28,
	0x05, 0x52, 0x15, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x41, 0x6d, 0x65, 0x6e, 0x64, 0x6d,
	0x65, 0x6e, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x22, 0xb6, 0x01, 0x0a, 0x1e, 0x54, 0x72, 0x75,
	0x73, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x93, 0x01, 0x0a, 0x1c,
	0x54, 0x72, 0x75, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x18, 0x2e, 0x42, 0x69, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x44, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x3a, 0x35, 0x55, 0x6e,
	0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x42, 0x69, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x44, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x69, 0x6c, 0x61,
	0x74, 0x65, 0x72, 0x61, 0x6c, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x1c, 0x54, 0x72, 0x75, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x22, 0xab, 0x02, 0x0a, 0x15, 0x42, 0x61, 0x73, 0x69, 0x63, 0x44, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x77, 0x0a, 0x0e, 0x44,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x42, 0x69, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x44,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x3a, 0x35, 0x55,
	0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x42, 0x69, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x44,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x69, 0x6c,
	0x61, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x0e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20,
	0x02, 0x28, 0x09, 0x52, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x56, 0x61,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x56, 0x61, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x47, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x47,
	0x72, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x12, 0x57, 0x0a, 0x0d, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e,
	0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x3a, 0x21, 0x55,
	0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x0d, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22,
	0xf9, 0x01, 0x0a, 0x11, 0x50, 0x72, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x40, 0x0a, 0x0e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x18, 0x2e,
	0x42, 0x69, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x36, 0x0a, 0x16, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x44, 0x61, 0x74,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x50, 0x72, 0x69, 0x63, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12,
	0x32, 0x0a, 0x14, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x36, 0x0a, 0x16, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x44,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x16, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x44, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0xae, 0x02, 0x0a, 0x10,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x77, 0x0a, 0x0e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x42, 0x69, 0x6c, 0x61, 0x74,
	0x65, 0x72, 0x61, 0x6c, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x3a, 0x35, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x42, 0x69, 0x6c, 0x61, 0x74,
	0x65, 0x72, 0x61, 0x6c, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x42, 0x69, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x44, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0e, 0x44, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12,
	0x22, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x57, 0x0a, 0x0d, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x52, 0x65, 0x63,
	0x65, 0x69, 0x70, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x3a, 0x21, 0x55, 0x6e, 0x6b, 0x6e,
	0x6f, 0x77, 0x6e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0d, 0x52,
	0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xed, 0x01, 0x0a,
	0x19, 0x42, 0x69, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x77, 0x0a, 0x0e, 0x44, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x18, 0x2e, 0x42, 0x69, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x44, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x3a, 0x35, 0x55, 0x6e,
	0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x42, 0x69, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x44, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x69, 0x6c, 0x61,
	0x74, 0x65, 0x72, 0x61, 0x6c, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x0e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x57, 0x0a, 0x0d, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x52, 0x65, 0x63,
	0x65, 0x69, 0x70, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x3a, 0x21, 0x55, 0x6e, 0x6b, 0x6e,
	0x6f, 0x77, 0x6e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0d, 0x52,
	0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xd8, 0x02, 0x0a,
	0x1d, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x65, 0x72, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x9b,
	0x01, 0x0a, 0x0e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x44,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x3a, 0x4d, 0x55,
	0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x44, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x44, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0e, 0x44, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x05, 0x54, 0x6f, 0x74,
	0x61, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x56, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x56, 0x61, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x47, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x47, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x12, 0x57,
	0x0a, 0x0d, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x3a, 0x21, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x52, 0x65,
	0x63, 0x65, 0x69, 0x70, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x63, 0x65, 0x69,
	0x70, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0d, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xf8, 0x02, 0x0a, 0x1e, 0x53, 0x75, 0x70, 0x70,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x72, 0x79, 0x41, 0x67, 0x72, 0x65, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x77, 0x0a, 0x0e, 0x44, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x18, 0x2e, 0x42, 0x69, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x44, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x3a, 0x35, 0x55, 0x6e,
	0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x42, 0x69, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x44, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x69, 0x6c, 0x61,
	0x74, 0x65, 0x72, 0x61, 0x6c, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x0e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x22, 0x0a, 0x0c, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a,
	0x0e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x04, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x44, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0c, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x57, 0x0a, 0x0d, 0x52, 0x65, 0x63,
	0x65, 0x69, 0x70, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0e, 0x2e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x3a, 0x21, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x0d, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x22, 0xd7, 0x01, 0x0a, 0x17, 0x50, 0x72, 0x6f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x49,
	0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x7a,
	0x0a, 0x0e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x55, 0x6e, 0x69, 0x6c, 0x61, 0x74, 0x65,
	0x72, 0x61, 0x6c, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x3a, 0x37, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x55, 0x6e, 0x69, 0x6c, 0x61, 0x74,
	0x65, 0x72, 0x61, 0x6c, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x55, 0x6e, 0x69, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x44, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0e, 0x44, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f,
	0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x12, 0x10, 0x0a, 0x03, 0x56, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x56,
	0x61, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x47, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x47, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x22, 0x94, 0x01, 0x0a,
	0x16, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x7a, 0x0a, 0x0e, 0x44, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x19, 0x2e, 0x55, 0x6e, 0x69, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x44, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x3a, 0x37, 0x55, 0x6e, 0x6b, 0x6e,
	0x6f, 0x77, 0x6e, 0x55, 0x6e, 0x69, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x44, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x55, 0x6e, 0x69, 0x6c, 0x61,
	0x74, 0x65, 0x72, 0x61, 0x6c, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x0e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x22, 0xaa, 0x01, 0x0a, 0x10, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x29, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x29, 0x0a, 0x06, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x06, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x22,
	0x0a, 0x0c, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03,
	0x20, 0x02, 0x28, 0x09, 0x52, 0x0c, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x46, 0x49, 0x4f, 0x18,
	0x04, 0x20, 0x02, 0x28, 0x09, 0x52, 0x09, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x46, 0x49, 0x4f,
	0x22, 0x5a, 0x0a, 0x14, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x44, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x54, 0x6f, 0x42, 0x6f, 0x78, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x54, 0x6f, 0x42, 0x6f, 0x78, 0x49, 0x64, 0x22, 0x38, 0x0a, 0x0e,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x10,
	0x0a, 0x03, 0x4b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x03, 0x4b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xa1, 0x03, 0x0a, 0x21, 0x55, 0x6e, 0x69, 0x76, 0x65,
	0x72, 0x73, 0x61, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x44, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x7e, 0x0a, 0x0e,
	0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x61, 0x6c,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x3a, 0x34, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x44,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x55, 0x6e, 0x69,
	0x76, 0x65, 0x72, 0x73, 0x61, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x44, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0e, 0x44, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x05, 0x54, 0x6f, 0x74,
	0x61, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x56, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x56, 0x61, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x47, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x47, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x12, 0x2a,
	0x0a, 0x10, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x05, 0x20, 0x02, 0x28, 0x09, 0x52, 0x10, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x06, 0x20, 0x02, 0x28, 0x05, 0x52, 0x08, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x3c, 0x0a, 0x19, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x69,
	0x63, 0x6b, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x10, 0x52, 0x19, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x54,
	0x69, 0x63, 0x6b, 0x73, 0x12, 0x34, 0x0a, 0x15, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x41,
	0x6d, 0x65, 0x6e, 0x64, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x15, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x41, 0x6d, 0x65, 0x6e,
	0x64, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x22, 0xdb, 0x03, 0x0a, 0x29, 0x55,
	0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x61, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x48, 0x0a, 0x0e, 0x44, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0e,
	0x32, 0x20, 0x2e, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x61, 0x6c, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x0e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x02, 0x28,
	0x09, 0x52, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x56, 0x61, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x56, 0x61, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x47, 0x72,
	0x6f, 0x75, 0x6e, 0x64, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x47, 0x72, 0x6f,
	0x75, 0x6e, 0x64, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x02, 0x28, 0x09, 0x52, 0x10,
	0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1a, 0x0a, 0x08, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x06, 0x20, 0x02,
	0x28, 0x05, 0x52, 0x08, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x3c, 0x0a, 0x19,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x54, 0x69, 0x63, 0x6b, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x10, 0x52,
	0x19, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x69, 0x63, 0x6b, 0x73, 0x12, 0x34, 0x0a, 0x15, 0x49, 0x6e,
	0x76, 0x6f, 0x69, 0x63, 0x65, 0x41, 0x6d, 0x65, 0x6e, 0x64, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x6c,
	0x61, 0x67, 0x73, 0x18, 0x08, 0x20, 0x02, 0x28, 0x05, 0x52, 0x15, 0x49, 0x6e, 0x76, 0x6f, 0x69,
	0x63, 0x65, 0x41, 0x6d, 0x65, 0x6e, 0x64, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x73,
	0x12, 0x34, 0x0a, 0x15, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x76, 0x6f,
	0x69, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x09, 0x20, 0x02, 0x28, 0x09, 0x52,
	0x15, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x13, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x61, 0x6c, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x44, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20,
	0x02, 0x28, 0x09, 0x52, 0x13, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x76,
	0x6f, 0x69, 0x63, 0x65, 0x44, 0x61, 0x74, 0x65, 0x22, 0x9d, 0x05, 0x0a, 0x23, 0x55, 0x6e, 0x69,
	0x76, 0x65, 0x72, 0x73, 0x61, 0x6c, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x48, 0x0a, 0x0e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x55, 0x6e, 0x69, 0x76, 0x65,
	0x72, 0x73, 0x61, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x44, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0e, 0x44, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x6f,
	0x74, 0x61, 0x6c, 0x49, 0x6e, 0x63, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x08, 0x54, 0x6f,
	0x74, 0x61, 0x6c, 0x49, 0x6e, 0x63, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x44,
	0x65, 0x63, 0x18, 0x03, 0x20, 0x02, 0x28, 0x09, 0x52, 0x08, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x44,
	0x65, 0x63, 0x12, 0x16, 0x0a, 0x06, 0x56, 0x61, 0x74, 0x49, 0x6e, 0x63, 0x18, 0x04, 0x20, 0x02,
	0x28, 0x09, 0x52, 0x06, 0x56, 0x61, 0x74, 0x49, 0x6e, 0x63, 0x12, 0x16, 0x0a, 0x06, 0x56, 0x61,
	0x74, 0x44, 0x65, 0x63, 0x18, 0x05, 0x20, 0x02, 0x28, 0x09, 0x52, 0x06, 0x56, 0x61, 0x74, 0x44,
	0x65, 0x63, 0x12, 0x18, 0x0a, 0x07, 0x47, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x47, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x12, 0x2a, 0x0a, 0x10,
	0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x07, 0x20, 0x02, 0x28, 0x09, 0x52, 0x10, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x18, 0x08, 0x20, 0x02, 0x28, 0x05, 0x52, 0x08, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x12, 0x3c, 0x0a, 0x19, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x69, 0x63, 0x6b,
	0x73, 0x18, 0x09, 0x20, 0x02, 0x28, 0x10, 0x52, 0x19, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x69, 0x63,
	0x6b, 0x73, 0x12, 0x34, 0x0a, 0x15, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x41, 0x6d, 0x65,
	0x6e, 0x64, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x0a, 0x20, 0x02, 0x28,
	0x05, 0x52, 0x15, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x41, 0x6d, 0x65, 0x6e, 0x64, 0x6d,
	0x65, 0x6e, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x34, 0x0a, 0x15, 0x4f, 0x72, 0x69, 0x67,
	0x69, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x0b, 0x20, 0x02, 0x28, 0x09, 0x52, 0x15, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61,
	0x6c, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x30,
	0x0a, 0x13, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63,
	0x65, 0x44, 0x61, 0x74, 0x65, 0x18, 0x0c, 0x20, 0x02, 0x28, 0x09, 0x52, 0x13, 0x4f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x44, 0x61, 0x74, 0x65,
	0x12, 0x44, 0x0a, 0x1d, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x76, 0x6f,
	0x69, 0x63, 0x65, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1d, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61,
	0x6c, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x40, 0x0a, 0x1b, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x61, 0x6c, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x44, 0x61, 0x74, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1b, 0x4f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x65, 0x76, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x22, 0xb5, 0x06, 0x0a, 0x2b, 0x55, 0x6e, 0x69,
	0x76, 0x65, 0x72, 0x73, 0x61, 0x6c, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x48, 0x0a, 0x0e, 0x44, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0e,
	0x32, 0x20, 0x2e, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x61, 0x6c, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x0e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x49, 0x6e, 0x63, 0x18, 0x02,
	0x20, 0x02, 0x28, 0x09, 0x52, 0x08, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x49, 0x6e, 0x63, 0x12, 0x1a,
	0x0a, 0x08, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x44, 0x65, 0x63, 0x18, 0x03, 0x20, 0x02, 0x28, 0x09,
	0x52, 0x08, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x44, 0x65, 0x63, 0x12, 0x16, 0x0a, 0x06, 0x56, 0x61,
	0x74, 0x49, 0x6e, 0x63, 0x18, 0x04, 0x20, 0x02, 0x28, 0x09, 0x52, 0x06, 0x56, 0x61, 0x74, 0x49,
	0x6e, 0x63, 0x12, 0x16, 0x0a, 0x06, 0x56, 0x61, 0x74, 0x44, 0x65, 0x63, 0x18, 0x05, 0x20, 0x02,
	0x28, 0x09, 0x52, 0x06, 0x56, 0x61, 0x74, 0x44, 0x65, 0x63, 0x12, 0x18, 0x0a, 0x07, 0x47, 0x72,
	0x6f, 0x75, 0x6e, 0x64, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x47, 0x72, 0x6f,
	0x75, 0x6e, 0x64, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x02, 0x28, 0x09, 0x52, 0x10,
	0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1a, 0x0a, 0x08, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x08, 0x20, 0x02,
	0x28, 0x05, 0x52, 0x08, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x3c, 0x0a, 0x19,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x54, 0x69, 0x63, 0x6b, 0x73, 0x18, 0x09, 0x20, 0x02, 0x28, 0x10, 0x52,
	0x19, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x69, 0x63, 0x6b, 0x73, 0x12, 0x34, 0x0a, 0x15, 0x49, 0x6e,
	0x76, 0x6f, 0x69, 0x63, 0x65, 0x41, 0x6d, 0x65, 0x6e, 0x64, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x6c,
	0x61, 0x67, 0x73, 0x18, 0x0a, 0x20, 0x02, 0x28, 0x05, 0x52, 0x15, 0x49, 0x6e, 0x76, 0x6f, 0x69,
	0x63, 0x65, 0x41, 0x6d, 0x65, 0x6e, 0x64, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x73,
	0x12, 0x34, 0x0a, 0x15, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x76, 0x6f,
	0x69, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x02, 0x28, 0x09, 0x52,
	0x15, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x13, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x61, 0x6c, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x44, 0x61, 0x74, 0x65, 0x18, 0x0c, 0x20,
	0x02, 0x28, 0x09, 0x52, 0x13, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x76,
	0x6f, 0x69, 0x63, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x44, 0x0a, 0x1d, 0x4f, 0x72, 0x69, 0x67,
	0x69, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x65, 0x76, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x1d, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x40,
	0x0a, 0x1b, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63,
	0x65, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x1b, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x76,
	0x6f, 0x69, 0x63, 0x65, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65,
	0x12, 0x48, 0x0a, 0x1f, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x76, 0x6f,
	0x69, 0x63, 0x65, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x0f, 0x20, 0x02, 0x28, 0x09, 0x52, 0x1f, 0x4f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x44, 0x0a, 0x1d, 0x4f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x72,
	0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x18, 0x10, 0x20, 0x02, 0x28,
	0x09, 0x52, 0x1d, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x76, 0x6f, 0x69,
	0x63, 0x65, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65,
	0x22, 0x36, 0x0a, 0x0c, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x49, 0x74, 0x65, 0x6d,
	0x12, 0x10, 0x0a, 0x03, 0x4b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x03, 0x4b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28,
	0x09, 0x52, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xa2, 0x01, 0x0a, 0x18, 0x52, 0x65, 0x63,
	0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x3b, 0x0a, 0x0d, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x47,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x0d, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x49, 0x0a, 0x14, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x14, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x79, 0x0a,
	0x14, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x3b, 0x0a, 0x0d, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x47,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x0d, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x69,
	0x63, 0x6b, 0x73, 0x18, 0x02, 0x20, 0x02, 0x28, 0x10, 0x52, 0x0d, 0x44, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x54, 0x69, 0x63, 0x6b, 0x73, 0x22, 0x7f, 0x0a, 0x18, 0x41, 0x6d, 0x65, 0x6e,
	0x64, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x26, 0x0a, 0x0e, 0x41, 0x6d, 0x65, 0x6e, 0x64, 0x6d, 0x65, 0x6e,
	0x74, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0e, 0x41, 0x6d,
	0x65, 0x6e, 0x64, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x3b, 0x0a, 0x0d,
	0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20,
	0x02, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x52, 0x65, 0x63,
	0x65, 0x69, 0x70, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0d, 0x52, 0x65, 0x63, 0x65,
	0x69, 0x70, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x56, 0x0a, 0x06, 0x4f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x12, 0x2e, 0x0a, 0x0b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64,
	0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x09, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49,
	0x64, 0x22, 0x54, 0x0a, 0x15, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x52, 0x65, 0x63, 0x65, 0x69,
	0x70, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x3b, 0x0a, 0x0d, 0x52, 0x65,
	0x63, 0x65, 0x69, 0x70, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x0e, 0x32, 0x15, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x65, 0x69,
	0x70, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0d, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x71, 0x0a, 0x10, 0x4c, 0x61, 0x73, 0x74, 0x4f,
	0x75, 0x74, 0x65, 0x72, 0x44, 0x6f, 0x63, 0x66, 0x6c, 0x6f, 0x77, 0x12, 0x26, 0x0a, 0x0e, 0x50,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x09, 0x52, 0x0e, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x0c, 0x4f, 0x75, 0x74, 0x65, 0x72, 0x44, 0x6f, 0x63, 0x66,
	0x6c, 0x6f, 0x77, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x4f, 0x75, 0x74, 0x65,
	0x72, 0x44, 0x6f, 0x63, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x4f, 0x75,
	0x74, 0x65, 0x72, 0x44, 0x6f, 0x63, 0x66, 0x6c, 0x6f, 0x77, 0x22, 0xf5, 0x01, 0x0a, 0x0f, 0x44,
	0x6f, 0x63, 0x66, 0x6c, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x56, 0x33, 0x12, 0x3b,
	0x0a, 0x0d, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x44, 0x6f, 0x63, 0x66, 0x6c, 0x6f, 0x77, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x33, 0x52, 0x0d, 0x50, 0x72,
	0x69, 0x6d, 0x61, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3f, 0x0a, 0x0f, 0x53,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x44, 0x6f, 0x63, 0x66, 0x6c, 0x6f, 0x77, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x33, 0x52, 0x0f, 0x53, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x64, 0x0a, 0x1c,
	0x50, 0x6f, 0x77, 0x65, 0x72, 0x4f, 0x66, 0x41, 0x74, 0x74, 0x6f, 0x72, 0x6e, 0x65, 0x79, 0x47,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x4f, 0x66, 0x41, 0x74, 0x74, 0x6f,
	0x72, 0x6e, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x1c, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x4f, 0x66, 0x41, 0x74, 0x74,
	0x6f, 0x72, 0x6e, 0x65, 0x79, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x22, 0x52, 0x0a, 0x14, 0x44, 0x6f, 0x63, 0x66, 0x6c, 0x6f, 0x77, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x33, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x65,
	0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x53, 0x65,
	0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x54, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x54, 0x65, 0x78, 0x74, 0x22, 0x96, 0x12, 0x0a, 0x0d, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x54, 0x6f, 0x50, 0x6f, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x46, 0x72, 0x6f, 0x6d,
	0x42, 0x6f, 0x78, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x09, 0x46, 0x72, 0x6f,
	0x6d, 0x42, 0x6f, 0x78, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x54, 0x6f, 0x42, 0x6f, 0x78, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x54, 0x6f, 0x42, 0x6f, 0x78, 0x49, 0x64,
	0x12, 0x32, 0x0a, 0x08, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x58, 0x6d, 0x6c, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x08, 0x49, 0x6e, 0x76, 0x6f,
	0x69, 0x63, 0x65, 0x73, 0x12, 0x50, 0x0a, 0x16, 0x4e, 0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x6c, 0x69, 0x7a, 0x65, 0x64, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x4e, 0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6c,
	0x69, 0x7a, 0x65, 0x64, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x16,
	0x4e, 0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x44, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x42, 0x0a, 0x0f, 0x54, 0x6f, 0x72, 0x67, 0x31, 0x32,
	0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x41,
	0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0f, 0x54, 0x6f, 0x72, 0x67, 0x31,
	0x32, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x59, 0x0a, 0x16, 0x54, 0x72,
	0x75, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x54, 0x72, 0x75,
	0x73, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x16, 0x54,
	0x72, 0x75, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x58, 0x0a, 0x16, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x41, 0x74, 0x74,
	0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x16, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x12,
	0x57, 0x0a, 0x19, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x64, 0x44, 0x61, 0x74,
	0x61, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x08, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x64, 0x44,
	0x61, 0x74, 0x61, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x19, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x41, 0x74, 0x74,
	0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x44, 0x0a, 0x10, 0x50, 0x72, 0x6f, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x73, 0x18, 0x09, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x10, 0x50, 0x72,
	0x6f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x73, 0x12, 0x4c,
	0x0a, 0x15, 0x58, 0x6d, 0x6c, 0x54, 0x6f, 0x72, 0x67, 0x31, 0x32, 0x53, 0x65, 0x6c, 0x6c, 0x65,
	0x72, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x58, 0x6d, 0x6c, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x74, 0x74, 0x61, 0x63,
	0x68, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x15, 0x58, 0x6d, 0x6c, 0x54, 0x6f, 0x72, 0x67, 0x31, 0x32,
	0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x73, 0x12, 0x6a, 0x0a, 0x24,
	0x58, 0x6d, 0x6c, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x65, 0x72,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x54, 0x69,
	0x74, 0x6c, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x58, 0x6d, 0x6c,
	0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x24, 0x58, 0x6d, 0x6c, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x53, 0x65, 0x6c, 0x6c,
	0x65, 0x72, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x54, 0x6f, 0x44, 0x65,
	0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x54, 0x6f, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x1f, 0x0a, 0x07, 0x49, 0x73, 0x44, 0x72, 0x61, 0x66, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x07, 0x49, 0x73, 0x44, 0x72, 0x61, 0x66,
	0x74, 0x12, 0x23, 0x0a, 0x09, 0x4c, 0x6f, 0x63, 0x6b, 0x44, 0x72, 0x61, 0x66, 0x74, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x09, 0x4c, 0x6f, 0x63,
	0x6b, 0x44, 0x72, 0x61, 0x66, 0x74, 0x12, 0x3a, 0x0a, 0x15, 0x53, 0x74, 0x72, 0x69, 0x63, 0x74,
	0x44, 0x72, 0x61, 0x66, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x52, 0x15, 0x53, 0x74, 0x72,
	0x69, 0x63, 0x74, 0x44, 0x72, 0x61, 0x66, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0a, 0x49, 0x73, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x0a, 0x49,
	0x73, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x12, 0x2a, 0x0a, 0x10, 0x46, 0x72, 0x6f,
	0x6d, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x46, 0x72, 0x6f, 0x6d, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x09, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x53, 0x65,
	0x6e, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52,
	0x09, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x53, 0x65, 0x6e, 0x64, 0x12, 0x34, 0x0a, 0x0a, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x73, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0a, 0x50, 0x72, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x73,
	0x12, 0x4a, 0x0a, 0x13, 0x50, 0x72, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x67, 0x72,
	0x65, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x4e, 0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x41, 0x74, 0x74,
	0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x13, 0x50, 0x72, 0x69, 0x63, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x41, 0x67, 0x72, 0x65, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x4e, 0x0a, 0x15,
	0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x4e, 0x6f,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x41, 0x74, 0x74, 0x61, 0x63,
	0x68, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x15, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x4c, 0x0a, 0x12,
	0x52, 0x65, 0x63, 0x6f, 0x6e, 0x63, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63,
	0x74, 0x73, 0x18, 0x16, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x6e,
	0x63, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x74, 0x41, 0x74, 0x74, 0x61,
	0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x12, 0x52, 0x65, 0x63, 0x6f, 0x6e, 0x63, 0x69, 0x6c,
	0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x74, 0x73, 0x12, 0x31, 0x0a, 0x09, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x18, 0x17, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x09, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x12, 0x3b, 0x0a,
	0x0f, 0x54, 0x6f, 0x72, 0x67, 0x31, 0x33, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x18, 0x18, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x54, 0x6f, 0x72, 0x67, 0x31, 0x33, 0x41,
	0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0f, 0x54, 0x6f, 0x72, 0x67, 0x31,
	0x33, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x53, 0x0a, 0x17, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x44, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x19, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x41, 0x74, 0x74, 0x61,
	0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x17, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12,
	0x1e, 0x0a, 0x0a, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x42, 0x6f, 0x78, 0x49, 0x64, 0x18, 0x1a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x42, 0x6f, 0x78, 0x49, 0x64, 0x12,
	0x2c, 0x0a, 0x11, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x50, 0x72, 0x6f, 0x78,
	0x79, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x49, 0x0a,
	0x11, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63,
	0x65, 0x73, 0x18, 0x1c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x45, 0x6e, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x41, 0x74, 0x74, 0x61, 0x63,
	0x68, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x11, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64,
	0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x73, 0x12, 0x67, 0x0a, 0x1e, 0x45, 0x6e, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x65, 0x64, 0x58, 0x6d, 0x6c, 0x54, 0x6f, 0x72, 0x67, 0x31, 0x32, 0x53, 0x65,
	0x6c, 0x6c, 0x65, 0x72, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x73, 0x18, 0x1d, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x58, 0x6d, 0x6c, 0x44,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x1e, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x58, 0x6d, 0x6c, 0x54,
	0x6f, 0x72, 0x67, 0x31, 0x32, 0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x54, 0x69, 0x74, 0x6c, 0x65,
	0x73, 0x12, 0x85, 0x01, 0x0a, 0x2d, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x58,
	0x6d, 0x6c, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x65, 0x72, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x54, 0x69, 0x74,
	0x6c, 0x65, 0x73, 0x18, 0x1e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x45, 0x6e, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x65, 0x64, 0x58, 0x6d, 0x6c, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x2d, 0x45, 0x6e, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x65, 0x64, 0x58, 0x6d, 0x6c, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x53, 0x65, 0x6c,
	0x6c, 0x65, 0x72, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x73, 0x12, 0x5b, 0x0a, 0x17, 0x53, 0x75, 0x70,
	0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x72, 0x79, 0x41, 0x67, 0x72, 0x65, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x18, 0x1f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x53, 0x75, 0x70,
	0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x72, 0x79, 0x41, 0x67, 0x72, 0x65, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x17, 0x53,
	0x75, 0x70, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x72, 0x79, 0x41, 0x67, 0x72, 0x65,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x25, 0x0a, 0x0a, 0x4c, 0x6f, 0x63, 0x6b, 0x50, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x18, 0x20, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73,
	0x65, 0x52, 0x0a, 0x4c, 0x6f, 0x63, 0x6b, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x6c, 0x0a,
	0x25, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x61, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72,
	0x54, 0x69, 0x74, 0x6c, 0x65, 0x73, 0x18, 0x21, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x58,
	0x6d, 0x6c, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x25, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x61, 0x6c, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53,
	0x65, 0x6c, 0x6c, 0x65, 0x72, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x73, 0x12, 0x45, 0x0a, 0x13, 0x44,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x18, 0x22, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x13, 0x44,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x12, 0x2b, 0x0a, 0x08, 0x4c, 0x6f, 0x63, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x23,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x09, 0x2e, 0x4c, 0x6f, 0x63, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x3a,
	0x04, 0x4e, 0x6f, 0x6e, 0x65, 0x52, 0x08, 0x4c, 0x6f, 0x63, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x22,
	0xef, 0x02, 0x0a, 0x15, 0x58, 0x6d, 0x6c, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x41,
	0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x34, 0x0a, 0x0d, 0x53, 0x69, 0x67,
	0x6e, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x52, 0x0d, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x3b, 0x0a, 0x12, 0x49, 0x6e, 0x69,
	0x74, 0x69, 0x61, 0x6c, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x52, 0x12, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x44, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x12, 0x43, 0x0a, 0x16, 0x53, 0x75, 0x62, 0x6f, 0x72, 0x64,
	0x69, 0x6e, 0x61, 0x74, 0x65, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x52, 0x16, 0x53, 0x75, 0x62, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65,
	0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x43,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x44, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0b, 0x4e, 0x65, 0x65, 0x64, 0x52,
	0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61,
	0x6c, 0x73, 0x65, 0x52, 0x0b, 0x4e, 0x65, 0x65, 0x64, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74,
	0x12, 0x2f, 0x0a, 0x0a, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x18, 0x08,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x44, 0x61, 0x74,
	0x61, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0a, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x44, 0x61, 0x74,
	0x61, 0x22, 0x98, 0x04, 0x0a, 0x17, 0x4e, 0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69,
	0x7a, 0x65, 0x64, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x34, 0x0a,
	0x0d, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x52, 0x0d, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x3d, 0x0a, 0x16, 0x4e, 0x65, 0x65,
	0x64, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65,
	0x52, 0x16, 0x4e, 0x65, 0x65, 0x64, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x53,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x3b, 0x0a, 0x12, 0x49, 0x6e, 0x69, 0x74,
	0x69, 0x61, 0x6c, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x52, 0x12, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x73, 0x12, 0x43, 0x0a, 0x16, 0x53, 0x75, 0x62, 0x6f, 0x72, 0x64, 0x69,
	0x6e, 0x61, 0x74, 0x65, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x52, 0x16, 0x53, 0x75, 0x62, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x44,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x44, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x26,
	0x0a, 0x0e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x10, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x27, 0x0a, 0x0b, 0x4e, 0x65, 0x65, 0x64, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70,
	0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x0b,
	0x4e, 0x65, 0x65, 0x64, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x12, 0x2f, 0x0a, 0x0a, 0x43,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x49, 0x74, 0x65, 0x6d,
	0x52, 0x0a, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x22, 0x9b, 0x04, 0x0a,
	0x17, 0x42, 0x61, 0x73, 0x69, 0x63, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x74,
	0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x34, 0x0a, 0x0d, 0x53, 0x69, 0x67, 0x6e,
	0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52,
	0x0d, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09,
	0x52, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x43, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x3b, 0x0a, 0x12, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x44,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0b, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x52, 0x12, 0x49,
	0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x73, 0x12, 0x43, 0x0a, 0x16, 0x53, 0x75, 0x62, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65,
	0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0b, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x52, 0x16,
	0x53, 0x75, 0x62, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x44, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x44, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0c, 0x44, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x44, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x07, 0x20, 0x02,
	0x28, 0x09, 0x52, 0x0e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x08, 0x20, 0x02, 0x28,
	0x09, 0x52, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x2a, 0x0a, 0x10, 0x43, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x56, 0x61, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x56, 0x61, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x47, 0x72, 0x6f, 0x75, 0x6e, 0x64,
	0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x47, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x73,
	0x12, 0x27, 0x0a, 0x0b, 0x4e, 0x65, 0x65, 0x64, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x0b, 0x4e, 0x65,
	0x65, 0x64, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x12, 0x2f, 0x0a, 0x0a, 0x43, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0a,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x22, 0xeb, 0x01, 0x0a, 0x20, 0x54,
	0x72, 0x75, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x34, 0x0a, 0x0d, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x0d, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x43,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x44, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x0a, 0x43, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x44, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0a, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x22, 0xe1, 0x04, 0x0a, 0x1f, 0x41, 0x63, 0x63,
	0x65, 0x70, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x34, 0x0a, 0x0d,
	0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x52, 0x0d, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x02, 0x28, 0x09, 0x52, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x3b, 0x0a, 0x12, 0x49, 0x6e, 0x69, 0x74,
	0x69, 0x61, 0x6c, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x52, 0x12, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x73, 0x12, 0x43, 0x0a, 0x16, 0x53, 0x75, 0x62, 0x6f, 0x72, 0x64, 0x69,
	0x6e, 0x61, 0x74, 0x65, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x52, 0x16, 0x53, 0x75, 0x62, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x44,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x44, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x02, 0x28, 0x09,
	0x52, 0x0c, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x26,
	0x0a, 0x0e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18,
	0x08, 0x20, 0x02, 0x28, 0x09, 0x52, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x2a, 0x0a, 0x10,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x44, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x56, 0x61, 0x74, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x56, 0x61, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x47, 0x72,
	0x6f, 0x75, 0x6e, 0x64, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x47, 0x72, 0x6f,
	0x75, 0x6e, 0x64, 0x73, 0x12, 0x27, 0x0a, 0x0b, 0x4e, 0x65, 0x65, 0x64, 0x52, 0x65, 0x63, 0x65,
	0x69, 0x70, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65,
	0x52, 0x0b, 0x4e, 0x65, 0x65, 0x64, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x12, 0x3c, 0x0a,
	0x16, 0x4e, 0x65, 0x65, 0x64, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x04, 0x74,
	0x72, 0x75, 0x65, 0x52, 0x16, 0x4e, 0x65, 0x65, 0x64, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65,
	0x6e, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x2f, 0x0a, 0x0a, 0x43,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x49, 0x74, 0x65, 0x6d,
	0x52, 0x0a, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x22, 0x70, 0x0a, 0x18,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x41, 0x74,
	0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0c, 0x52, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x02, 0x28, 0x09, 0x52, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x02,
	0x28, 0x09, 0x52, 0x0a, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0xf9,
	0x04, 0x0a, 0x13, 0x50, 0x72, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x74, 0x74, 0x61,
	0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x34, 0x0a, 0x0d, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x0d, 0x53,
	0x69, 0x67, 0x6e, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x08,
	0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x3b, 0x0a, 0x12, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x44, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b,
	0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x52, 0x12, 0x49, 0x6e, 0x69,
	0x74, 0x69, 0x61, 0x6c, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x12,
	0x43, 0x0a, 0x16, 0x53, 0x75, 0x62, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x44, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0b, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x52, 0x16, 0x53, 0x75,
	0x62, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x44, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x22, 0x0a, 0x0c, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x65,
	0x18, 0x07, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0c, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x08, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0e, 0x44, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x36, 0x0a, 0x16,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x44, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x02, 0x28, 0x09, 0x52, 0x16, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x32, 0x0a, 0x14, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x02,
	0x28, 0x09, 0x52, 0x14, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x44, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x36, 0x0a, 0x16, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x0b, 0x20, 0x02, 0x28, 0x09, 0x52, 0x16, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x27, 0x0a, 0x0b, 0x4e, 0x65, 0x65, 0x64, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x0b, 0x4e, 0x65,
	0x65, 0x64, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x12, 0x2f, 0x0a, 0x0a, 0x43, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0a,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x22, 0xdd, 0x03, 0x0a, 0x1b, 0x52,
	0x65, 0x63, 0x6f, 0x6e, 0x63, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x74,
	0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x34, 0x0a, 0x0d, 0x53, 0x69,
	0x67, 0x6e, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x52, 0x0d, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x02,
	0x28, 0x09, 0x52, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x43,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x3b, 0x0a, 0x12, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61,
	0x6c, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x52,
	0x12, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x73, 0x12, 0x43, 0x0a, 0x16, 0x53, 0x75, 0x62, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61,
	0x74, 0x65, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x52, 0x16, 0x53, 0x75, 0x62, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x44, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x44, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0c,
	0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x26, 0x0a, 0x0e,
	0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x10, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x44, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x27, 0x0a, 0x0b, 0x4e, 0x65, 0x65, 0x64, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x0b, 0x4e, 0x65,
	0x65, 0x64, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x12, 0x2f, 0x0a, 0x0a, 0x43, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0a,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x22, 0x9e, 0x04, 0x0a, 0x12, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x34, 0x0a, 0x0d, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x65,
	0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x0d, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x3b, 0x0a,
	0x12, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x44, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x52, 0x12, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x44,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x12, 0x43, 0x0a, 0x16, 0x53, 0x75,
	0x62, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x44, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x52, 0x16, 0x53, 0x75, 0x62, 0x6f, 0x72, 0x64, 0x69,
	0x6e, 0x61, 0x74, 0x65, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x12,
	0x2a, 0x0a, 0x10, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x43, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x44,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x02, 0x28,
	0x09, 0x52, 0x0c, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12,
	0x26, 0x0a, 0x0e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x08, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x22, 0x0a,
	0x0c, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x27, 0x0a, 0x0b, 0x4e, 0x65, 0x65, 0x64, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x0b, 0x4e,
	0x65, 0x65, 0x64, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x12, 0x2f, 0x0a, 0x0a, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x49, 0x74, 0x65, 0x6d, 0x52,
	0x0a, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x22, 0x82, 0x04, 0x0a, 0x10,
	0x54, 0x6f, 0x72, 0x67, 0x31, 0x33, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x34, 0x0a, 0x0d, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x0d, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x3b, 0x0a, 0x12,
	0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x52, 0x12, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x44, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x12, 0x43, 0x0a, 0x16, 0x53, 0x75, 0x62,
	0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x44, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x52, 0x16, 0x53, 0x75, 0x62, 0x6f, 0x72, 0x64, 0x69, 0x6e,
	0x61, 0x74, 0x65, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x12, 0x22,
	0x0a, 0x0c, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x65, 0x18, 0x06,
	0x20, 0x02, 0x28, 0x09, 0x52, 0x0c, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61,
	0x74, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x07, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0e, 0x44, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f,
	0x74, 0x61, 0x6c, 0x18, 0x08, 0x20, 0x02, 0x28, 0x09, 0x52, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x12, 0x2a, 0x0a, 0x10, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x43, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x47, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x47,
	0x72, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x12, 0x27, 0x0a, 0x0b, 0x4e, 0x65, 0x65, 0x64, 0x52, 0x65,
	0x63, 0x65, 0x69, 0x70, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c,
	0x73, 0x65, 0x52, 0x0b, 0x4e, 0x65, 0x65, 0x64, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x12,
	0x2f, 0x0a, 0x0a, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x18, 0x0d, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x44, 0x61, 0x74, 0x61,
	0x49, 0x74, 0x65, 0x6d, 0x52, 0x0a, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x44, 0x61, 0x74, 0x61,
	0x22, 0xda, 0x03, 0x0a, 0x18, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x34, 0x0a,
	0x0d, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x52, 0x0d, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x3b, 0x0a, 0x12, 0x49, 0x6e, 0x69,
	0x74, 0x69, 0x61, 0x6c, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x52, 0x12, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x44, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x12, 0x43, 0x0a, 0x16, 0x53, 0x75, 0x62, 0x6f, 0x72, 0x64,
	0x69, 0x6e, 0x61, 0x74, 0x65, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x73,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x52, 0x16, 0x53, 0x75, 0x62, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65,
	0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x44,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12,
	0x26, 0x0a, 0x0e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x10, 0x43, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0b, 0x4e, 0x65, 0x65, 0x64, 0x52, 0x65, 0x63, 0x65, 0x69,
	0x70, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52,
	0x0b, 0x4e, 0x65, 0x65, 0x64, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x12, 0x2f, 0x0a, 0x0a,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x49, 0x74, 0x65,
	0x6d, 0x52, 0x0a, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x22, 0xab, 0x04,
	0x0a, 0x1a, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x76, 0x6f, 0x69,
	0x63, 0x65, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x34, 0x0a, 0x0d,
	0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x52, 0x0d, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x3b, 0x0a, 0x12,
	0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x52, 0x12, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x44, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x12, 0x43, 0x0a, 0x16, 0x53, 0x75, 0x62,
	0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x44, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x52, 0x16, 0x53, 0x75, 0x62, 0x6f, 0x72, 0x64, 0x69, 0x6e,
	0x61, 0x74, 0x65, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x12, 0x2a,
	0x0a, 0x10, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x0a, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x49, 0x74, 0x65, 0x6d, 0x52,
	0x0a, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x12, 0x36, 0x0a, 0x08, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x08, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x43, 0x0a, 0x0f, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x45,
	0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x0f, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x61, 0x0a, 0x19, 0x49, 0x6e, 0x76, 0x6f,
	0x69, 0x63, 0x65, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x45, 0x6e,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x6f,
	0x72, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x52, 0x19, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0xef, 0x01, 0x0a, 0x19,
	0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x46, 0x69, 0x6c,
	0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x06, 0x46, 0x69, 0x6c, 0x65, 0x49,
	0x64, 0x12, 0x34, 0x0a, 0x15, 0x42, 0x75, 0x79, 0x65, 0x72, 0x46, 0x6e, 0x73, 0x50, 0x61, 0x72,
	0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09,
	0x52, 0x15, 0x42, 0x75, 0x79, 0x65, 0x72, 0x46, 0x6e, 0x73, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63,
	0x69, 0x70, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x16, 0x53, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x46, 0x6e, 0x73, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x49,
	0x64, 0x18, 0x03, 0x20, 0x02, 0x28, 0x09, 0x52, 0x16, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x46,
	0x6e, 0x73, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x4c, 0x0a, 0x15, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x65, 0x41,
	0x6e, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x65, 0x41, 0x6e, 0x64,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x15, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x44, 0x61, 0x74, 0x65, 0x41, 0x6e, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x68, 0x0a,
	0x18, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63,
	0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x4c, 0x0a, 0x15, 0x52, 0x65, 0x76,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x41, 0x6e, 0x64, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x65, 0x41, 0x6e, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x52, 0x15, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x41, 0x6e,
	0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0xdc, 0x02, 0x0a, 0x22, 0x45, 0x6e, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x72, 0x72,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x5a,
	0x0a, 0x1c, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63,
	0x65, 0x44, 0x61, 0x74, 0x65, 0x41, 0x6e, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x44,
	0x61, 0x74, 0x65, 0x41, 0x6e, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x1c, 0x4f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x44, 0x61, 0x74,
	0x65, 0x41, 0x6e, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x6a, 0x0a, 0x24, 0x4f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x65, 0x76,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x41, 0x6e, 0x64, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x65, 0x41, 0x6e, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x52, 0x24, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63,
	0x65, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x41, 0x6e, 0x64,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x6e, 0x0a, 0x26, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63,
	0x65, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x76, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x41, 0x6e, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x44, 0x61, 0x74, 0x65, 0x41, 0x6e, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x26,
	0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x41, 0x6e, 0x64,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x63, 0x0a, 0x15, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x44, 0x61, 0x74, 0x65, 0x41, 0x6e, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x22, 0x0a, 0x0c, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x44, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0xd7, 0x03, 0x0a, 0x1e,
	0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x58, 0x6d, 0x6c, 0x44, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x34,
	0x0a, 0x0d, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x0d, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x3b,
	0x0a, 0x12, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x44, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x52, 0x12, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c,
	0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x12, 0x43, 0x0a, 0x16, 0x53,
	0x75, 0x62, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x44, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x52, 0x16, 0x53, 0x75, 0x62, 0x6f, 0x72, 0x64,
	0x69, 0x6e, 0x61, 0x74, 0x65, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x73,
	0x12, 0x2a, 0x0a, 0x10, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x43, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x0a,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x49, 0x74, 0x65,
	0x6d, 0x52, 0x0a, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x12, 0x36, 0x0a,
	0x08, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x08, 0x20, 0x02, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x44, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x4e, 0x0a, 0x10, 0x58, 0x6d, 0x6c, 0x42, 0x61, 0x73, 0x69,
	0x63, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x09, 0x20, 0x02, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x58, 0x6d, 0x6c, 0x42, 0x61,
	0x73, 0x69, 0x63, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x52, 0x10, 0x58, 0x6d, 0x6c, 0x42, 0x61, 0x73, 0x69, 0x63, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x93, 0x01, 0x0a, 0x21, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x65, 0x64, 0x58, 0x6d, 0x6c, 0x42, 0x61, 0x73, 0x69, 0x63, 0x44, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x24, 0x0a, 0x0d, 0x46,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x09, 0x52, 0x0d, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74,
	0x65, 0x12, 0x24, 0x0a, 0x0d, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0d, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x44, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x44,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xe8, 0x04, 0x0a, 0x20,
	0x53, 0x75, 0x70, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x72, 0x79, 0x41, 0x67, 0x72,
	0x65, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x34, 0x0a, 0x0d, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x0d, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x3b, 0x0a, 0x12,
	0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x52, 0x12, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x44, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x12, 0x43, 0x0a, 0x16, 0x53, 0x75, 0x62,
	0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x44, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x52, 0x16, 0x53, 0x75, 0x62, 0x6f, 0x72, 0x64, 0x69, 0x6e,
	0x61, 0x74, 0x65, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x12, 0x2a,
	0x0a, 0x10, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x44, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x02, 0x28, 0x09,
	0x52, 0x0c, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x26,
	0x0a, 0x0e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x08, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x26, 0x0a, 0x0e,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0a,
	0x20, 0x02, 0x28, 0x09, 0x52, 0x0e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x44, 0x61, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0c, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x27, 0x0a, 0x0b,
	0x4e, 0x65, 0x65, 0x64, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x0b, 0x4e, 0x65, 0x65, 0x64, 0x52, 0x65,
	0x63, 0x65, 0x69, 0x70, 0x74, 0x12, 0x2f, 0x0a, 0x0a, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x44,
	0x61, 0x74, 0x61, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x43, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0a, 0x43, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x22, 0xa3, 0x05, 0x0a, 0x12, 0x44, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x34, 0x0a,
	0x0d, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x52, 0x0d, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x3d, 0x0a,
	0x16, 0x4e, 0x65, 0x65, 0x64, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66,
	0x61, 0x6c, 0x73, 0x65, 0x52, 0x16, 0x4e, 0x65, 0x65, 0x64, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69,
	0x65, 0x6e, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x3b, 0x0a, 0x12,
	0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x52, 0x12, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x44, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x12, 0x43, 0x0a, 0x16, 0x53, 0x75, 0x62,
	0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x44, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x52, 0x16, 0x53, 0x75, 0x62, 0x6f, 0x72, 0x64, 0x69, 0x6e,
	0x61, 0x74, 0x65, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x12, 0x2a,
	0x0a, 0x10, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0b, 0x4e, 0x65,
	0x65, 0x64, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x3a,
	0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x0b, 0x4e, 0x65, 0x65, 0x64, 0x52, 0x65, 0x63, 0x65,
	0x69, 0x70, 0x74, 0x12, 0x2f, 0x0a, 0x0a, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x44, 0x61, 0x74,
	0x61, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x44, 0x61, 0x74, 0x61, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0a, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x20, 0x0a, 0x0b, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x64, 0x49, 0x64, 0x18, 0x0c, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0b, 0x54, 0x79, 0x70, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x64, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x08,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x08, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1e, 0x0a, 0x0a, 0x57, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x49, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x57, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0b, 0x49, 0x73, 0x45, 0x6e, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61,
	0x6c, 0x73, 0x65, 0x52, 0x0b, 0x49, 0x73, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64,
	0x12, 0x2a, 0x0a, 0x10, 0x45, 0x64, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x49, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x45, 0x64, 0x69, 0x74,
	0x69, 0x6e, 0x67, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x22, 0xa4, 0x0e, 0x0a,
	0x12, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x50, 0x61, 0x74, 0x63, 0x68, 0x54, 0x6f, 0x50,
	0x6f, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x42, 0x6f, 0x78, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x09, 0x52, 0x05, 0x42, 0x6f, 0x78, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x09, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x08, 0x52, 0x65, 0x63, 0x65, 0x69,
	0x70, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x52, 0x65, 0x63, 0x65,
	0x69, 0x70, 0x74, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x08, 0x52,
	0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x73, 0x12, 0x4c, 0x0a, 0x12, 0x43, 0x6f, 0x72, 0x72, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x12, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x73, 0x12, 0x32, 0x0a, 0x0a, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x44, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x0a, 0x53,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x60, 0x0a, 0x1c, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52,
	0x65, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x1c, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x4d, 0x0a, 0x14, 0x58,
	0x6d, 0x6c, 0x54, 0x6f, 0x72, 0x67, 0x31, 0x32, 0x42, 0x75, 0x79, 0x65, 0x72, 0x54, 0x69, 0x74,
	0x6c, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x52, 0x65, 0x63, 0x69,
	0x70, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x14, 0x58, 0x6d, 0x6c, 0x54, 0x6f, 0x72, 0x67, 0x31, 0x32, 0x42,
	0x75, 0x79, 0x65, 0x72, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x73, 0x12, 0x6b, 0x0a, 0x23, 0x58, 0x6d,
	0x6c, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x65, 0x72, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x42, 0x75, 0x79, 0x65, 0x72, 0x54, 0x69, 0x74, 0x6c, 0x65,
	0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69,
	0x65, 0x6e, 0x74, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x23, 0x58, 0x6d, 0x6c, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x42, 0x75, 0x79, 0x65,
	0x72, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x73, 0x12, 0x37, 0x0a, 0x0b, 0x52, 0x65, 0x73, 0x6f, 0x6c,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x52,
	0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x0b, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x4c, 0x0a, 0x12, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x52,
	0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x12, 0x52, 0x65, 0x73, 0x6f,
	0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x12, 0x70,
	0x0a, 0x1e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x1e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x5e, 0x0a, 0x18, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x44, 0x65, 0x6e, 0x69, 0x61, 0x6c, 0x73, 0x18, 0x0c, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x44, 0x65, 0x6e, 0x69, 0x61, 0x6c, 0x41, 0x74, 0x74, 0x61,
	0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x18, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x44, 0x65, 0x6e, 0x69, 0x61, 0x6c, 0x73,
	0x12, 0x82, 0x01, 0x0a, 0x24, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x44, 0x65, 0x6e, 0x69, 0x61, 0x6c, 0x43, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2e, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x44, 0x65, 0x6e, 0x69, 0x61, 0x6c, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x24, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x44, 0x65, 0x6e, 0x69, 0x61, 0x6c, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x4c, 0x0a, 0x12, 0x52, 0x65, 0x76, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x52, 0x65, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x12, 0x52, 0x65, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x73, 0x12, 0x58, 0x0a, 0x16, 0x58, 0x6d, 0x6c, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0f, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x58, 0x6d, 0x6c, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x61, 0x63,
	0x68, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x16, 0x58, 0x6d, 0x6c, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3e, 0x0a,
	0x11, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x50, 0x61, 0x74, 0x63, 0x68,
	0x65, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x44, 0x61, 0x74, 0x61, 0x50, 0x61, 0x74, 0x63, 0x68, 0x52, 0x11, 0x43, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x50, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x12, 0x5a, 0x0a,
	0x1a, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x1a, 0x52,
	0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x41, 0x73,
	0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x4e, 0x0a, 0x16, 0x53, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x53, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x16, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x56, 0x65, 0x72, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x5a, 0x0a, 0x1a, 0x45, 0x64, 0x69,
	0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x45, 0x64, 0x69, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x1a, 0x45, 0x64, 0x69, 0x74, 0x44,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x73, 0x12, 0x6d, 0x0a, 0x24, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73,
	0x61, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x42, 0x75, 0x79, 0x65, 0x72, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x73, 0x18, 0x14, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x54,
	0x69, 0x74, 0x6c, 0x65, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x24,
	0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x61, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x75, 0x79, 0x65, 0x72, 0x54, 0x69,
	0x74, 0x6c, 0x65, 0x73, 0x12, 0x51, 0x0a, 0x17, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x61, 0x6c, 0x73, 0x18,
	0x15, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x61, 0x6c, 0x52, 0x17,
	0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52,
	0x65, 0x6d, 0x6f, 0x76, 0x61, 0x6c, 0x73, 0x12, 0x43, 0x0a, 0x0f, 0x52, 0x65, 0x63, 0x69, 0x70,
	0x69, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x73, 0x18, 0x16, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x74, 0x6c,
	0x65, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0f, 0x52, 0x65, 0x63,
	0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x73, 0x12, 0x35, 0x0a, 0x0e,
	0x45, 0x64, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x18, 0x18,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x45, 0x64, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x61,
	0x74, 0x63, 0x68, 0x52, 0x0e, 0x45, 0x64, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x74, 0x63,
	0x68, 0x65, 0x73, 0x22, 0x89, 0x01, 0x0a, 0x11, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x41,
	0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x50, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x09, 0x52, 0x0e, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49,
	0x64, 0x12, 0x34, 0x0a, 0x0d, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x65,
	0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x0d, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x22,
	0x93, 0x01, 0x0a, 0x1b, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x26, 0x0a, 0x0e, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0e, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x45,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x0d, 0x53, 0x69, 0x67, 0x6e, 0x65,
	0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x0d,
	0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x22, 0xb9, 0x01, 0x0a, 0x18, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69,
	0x65, 0x6e, 0x74, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0e, 0x50, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x0d, 0x53, 0x69,
	0x67, 0x6e, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x02, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x52, 0x0d, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x06, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x27, 0x0a, 0x0b, 0x4e, 0x65, 0x65, 0x64,
	0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x18, 0x05, 0x20, 0x02, 0x28, 0x08, 0x3a, 0x05, 0x66,
	0x61, 0x6c, 0x73, 0x65, 0x52, 0x0b, 0x4e, 0x65, 0x65, 0x64, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70,
	0x74, 0x22, 0x93, 0x01, 0x0a, 0x1b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x53,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0e, 0x50, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x0d, 0x53, 0x69, 0x67,
	0x6e, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x52, 0x0d, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x06, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x22, 0x93, 0x01, 0x0a, 0x1b, 0x52, 0x65, 0x76, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x74, 0x74,
	0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x50, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52,
	0x0e, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12,
	0x34, 0x0a, 0x0d, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x0d, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x22, 0x97, 0x01,
	0x0a, 0x1f, 0x58, 0x6d, 0x6c, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65,
	0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x26, 0x0a, 0x0e, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0e, 0x50, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x0d, 0x53, 0x69, 0x67,
	0x6e, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x52, 0x0d, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x06, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x22, 0x95, 0x01, 0x0a, 0x19, 0x52, 0x65, 0x73, 0x6f,
	0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x41, 0x73, 0x73, 0x69, 0x67,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c,
	0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09,
	0x52, 0x11, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x02, 0x28, 0x09, 0x52, 0x07, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x49, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x22,
	0x8c, 0x01, 0x0a, 0x16, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x61, 0x6c, 0x12, 0x26, 0x0a, 0x0e, 0x50, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x09, 0x52, 0x0e, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x02, 0x28, 0x09, 0x52, 0x07, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x43,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x22, 0x9b,
	0x01, 0x0a, 0x15, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x56, 0x65, 0x72, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x11, 0x49, 0x6e, 0x69, 0x74,
	0x69, 0x61, 0x6c, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x09, 0x52, 0x11, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x44, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x49, 0x73, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x08, 0x52, 0x07, 0x49, 0x73, 0x56, 0x61, 0x6c, 0x69, 0x64,
	0x12, 0x22, 0x0a, 0x0c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x22, 0xc7, 0x01, 0x0a,
	0x19, 0x45, 0x64, 0x69, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x44, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0a,
	0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x3f, 0x0a, 0x14, 0x41, 0x64,
	0x64, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x54, 0x6f, 0x50, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x52, 0x14, 0x41, 0x64, 0x64, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x54, 0x6f, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x49, 0x0a, 0x19, 0x52,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x46, 0x72,
	0x6f, 0x6d, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b,
	0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x52, 0x19, 0x52, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x46, 0x72, 0x6f, 0x6d,
	0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x22, 0x7a, 0x0a, 0x0c, 0x45, 0x64, 0x69, 0x74, 0x69, 0x6e,
	0x67, 0x50, 0x61, 0x74, 0x63, 0x68, 0x12, 0x26, 0x0a, 0x0e, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0e,
	0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x2a,
	0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x55, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x52, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x22, 0x4d, 0x0a, 0x0f, 0x55, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12,
	0x20, 0x0a, 0x0b, 0x4e, 0x61, 0x6d, 0x65, 0x4f, 0x6e, 0x53, 0x68, 0x65, 0x6c, 0x66, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x4e, 0x61, 0x6d, 0x65, 0x4f, 0x6e, 0x53, 0x68, 0x65, 0x6c,
	0x66, 0x22, 0x8f, 0x03, 0x0a, 0x11, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x50, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52,
	0x0e, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12,
	0x1c, 0x0a, 0x09, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x09, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x3b, 0x0a,
	0x15, 0x53, 0x69, 0x67, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x54, 0x65, 0x73, 0x74, 0x53, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61,
	0x6c, 0x73, 0x65, 0x52, 0x15, 0x53, 0x69, 0x67, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x54, 0x65, 0x73,
	0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x3d, 0x0a, 0x16, 0x49, 0x73,
	0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73,
	0x65, 0x52, 0x16, 0x49, 0x73, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x32, 0x0a, 0x14, 0x53, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x4f, 0x6e, 0x53, 0x68, 0x65, 0x6c,
	0x66, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x4f, 0x6e, 0x53, 0x68, 0x65, 0x6c, 0x66, 0x12, 0x2a, 0x0a,
	0x10, 0x50, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x50, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x12, 0x40, 0x0a, 0x0f, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x4f, 0x66, 0x41, 0x74, 0x74, 0x6f,
	0x72, 0x6e, 0x65, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x50, 0x6f, 0x77,
	0x65, 0x72, 0x4f, 0x66, 0x41, 0x74, 0x74, 0x6f, 0x72, 0x6e, 0x65, 0x79, 0x54, 0x6f, 0x50, 0x6f,
	0x73, 0x74, 0x52, 0x0f, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x4f, 0x66, 0x41, 0x74, 0x74, 0x6f, 0x72,
	0x6e, 0x65, 0x79, 0x22, 0xaf, 0x01, 0x0a, 0x14, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x11,
	0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x11, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c,
	0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x0e, 0x52, 0x65,
	0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x02,
	0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x0e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x22, 0xfd, 0x01, 0x0a, 0x1b, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x74, 0x74, 0x61, 0x63,
	0x68, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c,
	0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09,
	0x52, 0x11, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28,
	0x0e, 0x32, 0x16, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x22, 0x0a, 0x0c, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x12, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x44, 0x65, 0x70,
	0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x12, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x22, 0x9b, 0x01, 0x0a, 0x27, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x61, 0x6e, 0x63, 0x65,
	0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x3e, 0x0a, 0x1a, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x6f,
	0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x1a, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65,
	0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x22, 0x9a, 0x01, 0x0a, 0x0f, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x44, 0x61,
	0x74, 0x61, 0x50, 0x61, 0x74, 0x63, 0x68, 0x12, 0x26, 0x0a, 0x0e, 0x50, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52,
	0x0e, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12,
	0x37, 0x0a, 0x09, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x02,
	0x28, 0x0e, 0x32, 0x19, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x50,
	0x61, 0x74, 0x63, 0x68, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x4b, 0x65, 0x79, 0x18,
	0x03, 0x20, 0x02, 0x28, 0x09, 0x52, 0x03, 0x4b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x22, 0xc3, 0x05, 0x0a, 0x0c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x50, 0x61, 0x74, 0x63,
	0x68, 0x12, 0x1c, 0x0a, 0x09, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x09, 0x52, 0x09, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12,
	0x26, 0x0a, 0x0e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x54, 0x69, 0x63, 0x6b,
	0x73, 0x18, 0x02, 0x20, 0x02, 0x28, 0x10, 0x52, 0x0e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x54, 0x69, 0x63, 0x6b, 0x73, 0x12, 0x23, 0x0a, 0x08, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x52, 0x08, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x08,
	0x46, 0x6f, 0x72, 0x44, 0x72, 0x61, 0x66, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05,
	0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x08, 0x46, 0x6f, 0x72, 0x44, 0x72, 0x61, 0x66, 0x74, 0x12,
	0x2f, 0x0a, 0x0f, 0x44, 0x72, 0x61, 0x66, 0x74, 0x49, 0x73, 0x52, 0x65, 0x63, 0x79, 0x63, 0x6c,
	0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52,
	0x0f, 0x44, 0x72, 0x61, 0x66, 0x74, 0x49, 0x73, 0x52, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x64,
	0x12, 0x4c, 0x0a, 0x21, 0x44, 0x72, 0x61, 0x66, 0x74, 0x49, 0x73, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x6f, 0x72, 0x6d, 0x65, 0x64, 0x54, 0x6f, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49,
	0x64, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x21, 0x44, 0x72, 0x61,
	0x66, 0x74, 0x49, 0x73, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x64, 0x54,
	0x6f, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2b,
	0x0a, 0x0d, 0x44, 0x72, 0x61, 0x66, 0x74, 0x49, 0x73, 0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x0d, 0x44, 0x72,
	0x61, 0x66, 0x74, 0x49, 0x73, 0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x12, 0x31, 0x0a, 0x10, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x10, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x32,
	0x0a, 0x0d, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x50, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x18,
	0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x50, 0x61,
	0x74, 0x63, 0x68, 0x52, 0x0d, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x50, 0x61, 0x74, 0x63, 0x68,
	0x65, 0x73, 0x12, 0x33, 0x0a, 0x11, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x73, 0x52,
	0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66,
	0x61, 0x6c, 0x73, 0x65, 0x52, 0x11, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x73, 0x52,
	0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x64, 0x12, 0x35, 0x0a, 0x12, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x49, 0x73, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x65, 0x64, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x12, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x49, 0x73, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x65, 0x64, 0x12, 0x2a,
	0x0a, 0x10, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x65, 0x64, 0x50, 0x61, 0x74, 0x63, 0x68,
	0x49, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65,
	0x72, 0x65, 0x64, 0x50, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x50, 0x61,
	0x74, 0x63, 0x68, 0x49, 0x64, 0x18, 0x0d, 0x20, 0x02, 0x28, 0x09, 0x52, 0x07, 0x50, 0x61, 0x74,
	0x63, 0x68, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x13, 0x4e, 0x6f, 0x74, 0x44, 0x65, 0x6c, 0x69, 0x76,
	0x65, 0x72, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x13, 0x4e, 0x6f, 0x74, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x65, 0x64, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x0b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0f, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0xa2, 0x02, 0x0a, 0x0b, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x50, 0x61, 0x74, 0x63, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x08, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x49, 0x64, 0x12, 0x33, 0x0a, 0x11, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x73,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66,
	0x61, 0x6c, 0x73, 0x65, 0x52, 0x11, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x73,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x2c, 0x0a, 0x11, 0x4d, 0x6f, 0x76, 0x65, 0x64,
	0x54, 0x6f, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x11, 0x4d, 0x6f, 0x76, 0x65, 0x64, 0x54, 0x6f, 0x44, 0x65, 0x70, 0x61, 0x72,
	0x74, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x35, 0x0a, 0x12, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x49, 0x73, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x12, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x49, 0x73, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x64, 0x12, 0x31, 0x0a, 0x10,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x49, 0x73, 0x50, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x10, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x49, 0x73, 0x50, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x12,
	0x2a, 0x0a, 0x10, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x54, 0x6f, 0x42, 0x6f,
	0x78, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x46, 0x6f, 0x72, 0x77, 0x61,
	0x72, 0x64, 0x65, 0x64, 0x54, 0x6f, 0x42, 0x6f, 0x78, 0x49, 0x64, 0x22, 0x89, 0x01, 0x0a, 0x08,
	0x42, 0x6f, 0x78, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x07, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x22, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x23, 0x0a, 0x05, 0x50, 0x61, 0x74, 0x63, 0x68, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x50,
	0x61, 0x74, 0x63, 0x68, 0x52, 0x05, 0x50, 0x61, 0x74, 0x63, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x4b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x4b, 0x65, 0x79, 0x22, 0x8a, 0x01, 0x0a, 0x0c, 0x42, 0x6f, 0x78, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x06, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x42, 0x6f, 0x78, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x52, 0x06, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x54,
	0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x37, 0x0a, 0x0e, 0x54,
	0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20,
	0x02, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x0e, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x22, 0x48, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x44, 0x6f, 0x63, 0x66, 0x6c,
	0x6f, 0x77, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e,
	0x0a, 0x08, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x6f, 0x63, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x52, 0x08, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x22, 0x9b,
	0x01, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x44, 0x6f, 0x63, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x0a, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x52, 0x0a, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x20, 0x0a, 0x0b, 0x4c, 0x61, 0x73, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x4c, 0x61, 0x73, 0x74, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x13, 0x49, 0x6e, 0x6a, 0x65, 0x63, 0x74, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x13, 0x49, 0x6e, 0x6a, 0x65, 0x63, 0x74, 0x45,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x51, 0x0a, 0x19,
	0x47, 0x65, 0x74, 0x44, 0x6f, 0x63, 0x66, 0x6c, 0x6f, 0x77, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x56, 0x33, 0x12, 0x34, 0x0a, 0x09, 0x44, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x44,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x57, 0x69, 0x74, 0x68, 0x44, 0x6f, 0x63, 0x66, 0x6c,
	0x6f, 0x77, 0x56, 0x33, 0x52, 0x09, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22,
	0xc9, 0x01, 0x0a, 0x15, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x57, 0x69, 0x74, 0x68,
	0x44, 0x6f, 0x63, 0x66, 0x6c, 0x6f, 0x77, 0x56, 0x33, 0x12, 0x2b, 0x0a, 0x0a, 0x44, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0b, 0x2e,
	0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x52, 0x0a, 0x44, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x09, 0x4c, 0x61, 0x73, 0x74, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x4c, 0x61, 0x73, 0x74,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x09, 0x4c, 0x61, 0x73, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x12, 0x33, 0x0a, 0x0c, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x18, 0x03, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x56, 0x33, 0x52, 0x0c, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x24, 0x0a, 0x07, 0x44, 0x6f, 0x63, 0x66, 0x6c, 0x6f, 0x77,
	0x18, 0x04, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x44, 0x6f, 0x63, 0x66, 0x6c, 0x6f, 0x77,
	0x56, 0x33, 0x52, 0x07, 0x44, 0x6f, 0x63, 0x66, 0x6c, 0x6f, 0x77, 0x22, 0x4f, 0x0a, 0x09, 0x4c,
	0x61, 0x73, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x07, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x28, 0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18,
	0x02, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0xe7, 0x06, 0x0a,
	0x0e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x56, 0x33, 0x12,
	0x2e, 0x0a, 0x0b, 0x46, 0x75, 0x6c, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x46, 0x75, 0x6c, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x0b, 0x46, 0x75, 0x6c, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x2e, 0x0a, 0x0b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x02, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x18, 0x03, 0x20,
	0x02, 0x28, 0x05, 0x52, 0x0a, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x12,
	0x39, 0x0a, 0x0c, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x18,
	0x04, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x52, 0x0c, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x12, 0x40, 0x0a, 0x11, 0x44, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x05, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x44, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c,
	0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x06, 0x20, 0x02,
	0x28, 0x09, 0x52, 0x0c, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x2a, 0x0a, 0x10, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x43, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x08,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x08, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x2f, 0x0a, 0x0a, 0x43, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x44, 0x61, 0x74, 0x61, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0a, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x12, 0x34, 0x0a, 0x0d, 0x44, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x18, 0x0a, 0x20, 0x02, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x52,
	0x0d, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x12, 0x2b,
	0x0a, 0x0a, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0b, 0x20, 0x02,
	0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x0a, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x49,
	0x73, 0x52, 0x65, 0x61, 0x64, 0x18, 0x0c, 0x20, 0x02, 0x28, 0x08, 0x52, 0x06, 0x49, 0x73, 0x52,
	0x65, 0x61, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64,
	0x18, 0x0d, 0x20, 0x02, 0x28, 0x08, 0x52, 0x09, 0x49, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x64, 0x12, 0x22, 0x0a, 0x0c, 0x49, 0x73, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x0e, 0x20, 0x02, 0x28, 0x08, 0x52, 0x0c, 0x49, 0x73, 0x49, 0x6e, 0x76, 0x69, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x0a, 0x4c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x44, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a,
	0x4c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x30, 0x0a, 0x09, 0x44, 0x72,
	0x61, 0x66, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x72, 0x61, 0x66, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x09, 0x44, 0x72, 0x61, 0x66, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x39, 0x0a, 0x0c,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1f, 0x0a, 0x06, 0x4f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x52, 0x06, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0x2c, 0x0a, 0x10, 0x45, 0x64, 0x69, 0x74,
	0x69, 0x6e, 0x67, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x09, 0x3a, 0x00, 0x52, 0x10, 0x45, 0x64, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x22, 0x75, 0x0a, 0x0a, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x25, 0x0a, 0x08, 0x4c, 0x6f, 0x63, 0x6b, 0x4d, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x09, 0x2e, 0x4c, 0x6f, 0x63, 0x6b, 0x4d, 0x6f, 0x64,
	0x65, 0x52, 0x08, 0x4c, 0x6f, 0x63, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x50,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x50,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x65, 0x64,
	0x41, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x41, 0x64, 0x64, 0x65, 0x64, 0x41, 0x74, 0x22, 0x71, 0x0a,
	0x0d, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x12, 0x2b,
	0x0a, 0x0a, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x49, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x52,
	0x0a, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x49, 0x64, 0x73, 0x12, 0x33, 0x0a, 0x0e, 0x53,
	0x75, 0x62, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x49, 0x64, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x52, 0x0e, 0x53, 0x75, 0x62, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x49, 0x64, 0x73,
	0x22, 0x65, 0x0a, 0x0b, 0x46, 0x75, 0x6c, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x20, 0x0a, 0x0b, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x09, 0x52, 0x0b, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x49,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x02, 0x28, 0x09, 0x52, 0x08, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a,
	0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x02, 0x28, 0x09, 0x52, 0x07,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x9b, 0x01, 0x0a, 0x12, 0x44, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x20,
	0x0a, 0x0b, 0x49, 0x73, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x08, 0x52, 0x0b, 0x49, 0x73, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64,
	0x12, 0x4b, 0x0a, 0x15, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x44, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x15, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x44,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x16, 0x0a,
	0x06, 0x49, 0x73, 0x54, 0x65, 0x73, 0x74, 0x18, 0x03, 0x20, 0x02, 0x28, 0x08, 0x52, 0x06, 0x49,
	0x73, 0x54, 0x65, 0x73, 0x74, 0x22, 0x87, 0x01, 0x0a, 0x11, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x44, 0x72, 0x61, 0x66, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1e, 0x0a, 0x0a, 0x49,
	0x73, 0x52, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x08, 0x52,
	0x0a, 0x49, 0x73, 0x52, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x49,
	0x73, 0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x08, 0x52, 0x08, 0x49,
	0x73, 0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x12, 0x36, 0x0a, 0x16, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x6f, 0x72, 0x6d, 0x65, 0x64, 0x54, 0x6f, 0x4c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x49, 0x64,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x16, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f,
	0x72, 0x6d, 0x65, 0x64, 0x54, 0x6f, 0x4c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x49, 0x64, 0x73, 0x22,
	0xf1, 0x02, 0x0a, 0x14, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x45, 0x0a, 0x12, 0x4c, 0x65, 0x74, 0x74,
	0x65, 0x72, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x50,
	0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x52, 0x12, 0x4c, 0x65, 0x74,
	0x74, 0x65, 0x72, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x12,
	0x36, 0x0a, 0x16, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x64, 0x54, 0x6f,
	0x4c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x49, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x16, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x64, 0x54, 0x6f, 0x4c, 0x65,
	0x74, 0x74, 0x65, 0x72, 0x49, 0x64, 0x73, 0x12, 0x64, 0x0a, 0x1b, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x44, 0x6f, 0x63, 0x66, 0x6c, 0x6f, 0x77,
	0x52, 0x1b, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x4d, 0x0a,
	0x13, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x66, 0x75, 0x73, 0x61, 0x6c,
	0x49, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x66, 0x75, 0x73, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f,
	0x44, 0x6f, 0x63, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x13, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x66, 0x75, 0x73, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x25, 0x0a, 0x0a,
	0x49, 0x73, 0x52, 0x65, 0x75, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08,
	0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x0a, 0x49, 0x73, 0x52, 0x65, 0x75, 0x73, 0x61,
	0x62, 0x6c, 0x65, 0x22, 0xc4, 0x01, 0x0a, 0x14, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x12, 0x2c, 0x0a, 0x06,
	0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x44,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61,
	0x6e, 0x74, 0x52, 0x06, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x05, 0x50, 0x72,
	0x6f, 0x78, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x44, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x52,
	0x05, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x12, 0x32, 0x0a, 0x09, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69,
	0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x44, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x52,
	0x09, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x73,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x02, 0x28, 0x08, 0x52, 0x0a,
	0x49, 0x73, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x22, 0x4f, 0x0a, 0x13, 0x44, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x42, 0x6f, 0x78, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09,
	0x52, 0x05, 0x42, 0x6f, 0x78, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x44, 0x65, 0x70, 0x61, 0x72,
	0x74, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x44,
	0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0xb6, 0x01, 0x0a, 0x21,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x44, 0x6f, 0x63, 0x66, 0x6c, 0x6f,
	0x77, 0x12, 0x2a, 0x0a, 0x10, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x10, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x41, 0x0a,
	0x15, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x64, 0x54, 0x6f, 0x4c, 0x65,
	0x74, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x44,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x52, 0x15, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x6f, 0x72, 0x6d, 0x65, 0x64, 0x54, 0x6f, 0x4c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x22, 0x0a, 0x0c, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x22, 0x90, 0x01, 0x0a, 0x1a, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x66, 0x75, 0x73, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x44, 0x6f, 0x63, 0x66,
	0x6c, 0x6f, 0x77, 0x12, 0x14, 0x0a, 0x05, 0x42, 0x6f, 0x78, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x09, 0x52, 0x05, 0x42, 0x6f, 0x78, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x41, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a,
	0x0a, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0xb3, 0x06, 0x0a, 0x09, 0x44, 0x6f, 0x63, 0x66,
	0x6c, 0x6f, 0x77, 0x56, 0x33, 0x12, 0x35, 0x0a, 0x0b, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x54,
	0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x53, 0x65, 0x6e,
	0x64, 0x65, 0x72, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x44, 0x6f, 0x63, 0x66, 0x6c, 0x6f, 0x77, 0x52,
	0x0b, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x38, 0x0a, 0x0c,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x6f, 0x63, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x0c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x41, 0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x44, 0x6f, 0x63, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x0d, 0x50, 0x72, 0x6f, 0x78,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x10, 0x52, 0x65, 0x63,
	0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x44, 0x6f, 0x63,
	0x66, 0x6c, 0x6f, 0x77, 0x56, 0x33, 0x52, 0x10, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x12, 0x49, 0x0a, 0x11, 0x52, 0x65, 0x63, 0x69,
	0x70, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x6f, 0x63, 0x66, 0x6c, 0x6f, 0x77,
	0x52, 0x11, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x10, 0x41, 0x6d, 0x65, 0x6e, 0x64, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x41, 0x6d, 0x65, 0x6e, 0x64, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x44, 0x6f, 0x63, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x10, 0x41, 0x6d, 0x65, 0x6e, 0x64, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x0a, 0x52, 0x65, 0x76,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x52, 0x65, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x6f, 0x63, 0x66, 0x6c, 0x6f,
	0x77, 0x56, 0x33, 0x52, 0x0a, 0x52, 0x65, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x37, 0x0a, 0x0d, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74,
	0x44, 0x6f, 0x63, 0x66, 0x6c, 0x6f, 0x77, 0x56, 0x33, 0x52, 0x0d, 0x53, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x12, 0x34, 0x0a, 0x0a, 0x52, 0x65, 0x73, 0x6f,
	0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x52,
	0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x6f, 0x63, 0x66, 0x6c, 0x6f, 0x77,
	0x56, 0x33, 0x52, 0x0a, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x45,
	0x0a, 0x12, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x52, 0x65, 0x73,
	0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x56,
	0x33, 0x52, 0x12, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x33, 0x0a, 0x0d, 0x4f, 0x75, 0x74, 0x65, 0x72, 0x44, 0x6f,
	0x63, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x4f,
	0x75, 0x74, 0x65, 0x72, 0x44, 0x6f, 0x63, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x0d, 0x4f, 0x75, 0x74,
	0x65, 0x72, 0x44, 0x6f, 0x63, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x12, 0x49, 0x0a, 0x14, 0x4f, 0x75,
	0x74, 0x65, 0x72, 0x44, 0x6f, 0x63, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69,
	0x65, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x4f, 0x75, 0x74, 0x65, 0x72,
	0x44, 0x6f, 0x63, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52,
	0x14, 0x4f, 0x75, 0x74, 0x65, 0x72, 0x44, 0x6f, 0x63, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x36, 0x0a, 0x0d, 0x44, 0x6f, 0x63, 0x66, 0x6c, 0x6f, 0x77,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0e, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x44,
	0x6f, 0x63, 0x66, 0x6c, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x56, 0x33, 0x52, 0x0d,
	0x44, 0x6f, 0x63, 0x66, 0x6c, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xcc, 0x01,
	0x0a, 0x13, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x6f, 0x63, 0x66,
	0x6c, 0x6f, 0x77, 0x56, 0x33, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x73, 0x46, 0x69, 0x6e, 0x69, 0x73,
	0x68, 0x65, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x08, 0x52, 0x0a, 0x49, 0x73, 0x46, 0x69, 0x6e,
	0x69, 0x73, 0x68, 0x65, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x45,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0e, 0x50,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x3d, 0x0a,
	0x10, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x10, 0x52, 0x65, 0x73, 0x6f,
	0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2e, 0x0a, 0x12,
	0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x22, 0x92, 0x01, 0x0a,
	0x0c, 0x4f, 0x75, 0x74, 0x65, 0x72, 0x44, 0x6f, 0x63, 0x66, 0x6c, 0x6f, 0x77, 0x12, 0x26, 0x0a,
	0x0e, 0x44, 0x6f, 0x63, 0x66, 0x6c, 0x6f, 0x77, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0e, 0x44, 0x6f, 0x63, 0x66, 0x6c, 0x6f, 0x77, 0x4e, 0x61,
	0x6d, 0x65, 0x64, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x45,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0e, 0x50,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x32, 0x0a,
	0x14, 0x4f, 0x75, 0x74, 0x65, 0x72, 0x44, 0x6f, 0x63, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x49, 0x64, 0x18, 0x03, 0x20, 0x02, 0x28, 0x09, 0x52, 0x14, 0x4f, 0x75, 0x74,
	0x65, 0x72, 0x44, 0x6f, 0x63, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49,
	0x64, 0x22, 0xc3, 0x03, 0x0a, 0x13, 0x52, 0x65, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x6f, 0x63, 0x66, 0x6c, 0x6f, 0x77, 0x56, 0x33, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x73, 0x46,
	0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x08, 0x52, 0x0a, 0x49,
	0x73, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x12, 0x47, 0x0a, 0x11, 0x52, 0x65, 0x76,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x02,
	0x20, 0x02, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x52, 0x65, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x44, 0x6f, 0x63, 0x66, 0x6c, 0x6f, 0x77, 0x52,
	0x11, 0x52, 0x65, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x4a, 0x0a, 0x12, 0x52, 0x65, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x52, 0x65, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x44, 0x6f, 0x63, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x12, 0x52, 0x65, 0x76, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26,
	0x0a, 0x0e, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x42, 0x6f, 0x78, 0x49, 0x64,
	0x18, 0x04, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0e, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x6f,
	0x72, 0x42, 0x6f, 0x78, 0x49, 0x64, 0x12, 0x3d, 0x0a, 0x10, 0x52, 0x65, 0x76, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x02, 0x28, 0x0e,
	0x32, 0x11, 0x2e, 0x52, 0x65, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x10, 0x52, 0x65, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x45, 0x0a, 0x12, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x56, 0x33, 0x52, 0x12, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x49, 0x0a, 0x14,
	0x4f, 0x75, 0x74, 0x65, 0x72, 0x44, 0x6f, 0x63, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x4f, 0x75, 0x74,
	0x65, 0x72, 0x44, 0x6f, 0x63, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x52, 0x14, 0x4f, 0x75, 0x74, 0x65, 0x72, 0x44, 0x6f, 0x63, 0x66, 0x6c, 0x6f, 0x77, 0x45,
	0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x22, 0xa7, 0x01, 0x0a, 0x14, 0x4f, 0x75, 0x74, 0x65,
	0x72, 0x44, 0x6f, 0x63, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x12, 0x26, 0x0a, 0x0e, 0x44, 0x6f, 0x63, 0x66, 0x6c, 0x6f, 0x77, 0x4e, 0x61, 0x6d, 0x65, 0x64,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0e, 0x44, 0x6f, 0x63, 0x66, 0x6c, 0x6f,
	0x77, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x13, 0x44, 0x6f, 0x63, 0x66,
	0x6c, 0x6f, 0x77, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x6c, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x13, 0x44, 0x6f, 0x63, 0x66, 0x6c, 0x6f, 0x77, 0x46, 0x72,
	0x69, 0x65, 0x6e, 0x64, 0x6c, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x0e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x52, 0x0e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x22, 0x64, 0x0a, 0x0c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x12, 0x33, 0x0a, 0x0a, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x41, 0x74,
	0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x56, 0x33, 0x52, 0x0a, 0x41, 0x74, 0x74, 0x61,
	0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x02, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x88, 0x02, 0x0a, 0x14, 0x52, 0x65, 0x73, 0x6f,
	0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x56, 0x33,
	0x12, 0x30, 0x0a, 0x08, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x56, 0x33, 0x52, 0x08, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x73, 0x12, 0x2f, 0x0a, 0x0b, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x56, 0x33, 0x52, 0x0b, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x4d, 0x0a, 0x15, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x56, 0x33, 0x52, 0x15, 0x41, 0x70, 0x70,
	0x72, 0x6f, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x73, 0x12, 0x3e, 0x0a, 0x10, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x44,
	0x65, 0x6e, 0x69, 0x61, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x53,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x6e, 0x69, 0x61, 0x6c, 0x56, 0x33,
	0x52, 0x10, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x6e, 0x69, 0x61,
	0x6c, 0x73, 0x22, 0x90, 0x02, 0x0a, 0x13, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x56, 0x33, 0x12, 0x1f, 0x0a, 0x06, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x52, 0x06, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x29, 0x0a, 0x06, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x52, 0x65,
	0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x06,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x41, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x0b, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x02, 0x28, 0x0e, 0x32,
	0x16, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64,
	0x57, 0x69, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x52, 0x65, 0x73, 0x6f,
	0x6c, 0x76, 0x65, 0x64, 0x57, 0x69, 0x74, 0x68, 0x12, 0x2b, 0x0a, 0x07, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x52, 0x65, 0x73, 0x6f,
	0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x9a, 0x01, 0x0a, 0x16, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x56, 0x33,
	0x12, 0x2a, 0x0a, 0x09, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x56,
	0x33, 0x52, 0x09, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x30, 0x0a, 0x13,
	0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x52, 0x65, 0x73, 0x6f, 0x6c,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x22,
	0x0a, 0x0c, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x22, 0x8a, 0x01, 0x0a, 0x11, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x44, 0x65, 0x6e, 0x69, 0x61, 0x6c, 0x56, 0x33, 0x12, 0x1f, 0x0a, 0x06, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x52, 0x06, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x30, 0x0a, 0x13, 0x52, 0x65, 0x73,
	0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64,
	0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x13, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x41,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22,
	0xbe, 0x01, 0x0a, 0x0c, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x33,
	0x12, 0x1f, 0x0a, 0x06, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b,
	0x32, 0x07, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x06, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x12, 0x30, 0x0a, 0x13, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13,
	0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x41, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x0e, 0x52, 0x65, 0x73, 0x6f, 0x6c,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x02, 0x28, 0x0e, 0x32,
	0x0f, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x0e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x22, 0x95, 0x02, 0x0a, 0x18, 0x52, 0x65, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x44, 0x6f, 0x63, 0x66, 0x6c, 0x6f, 0x77, 0x12, 0x41, 0x0a,
	0x11, 0x52, 0x65, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x65,
	0x64, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x56, 0x33, 0x52, 0x11, 0x52,
	0x65, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x22, 0x0a, 0x06, 0x53, 0x65, 0x6e, 0x74, 0x41, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0a, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x06, 0x53, 0x65,
	0x6e, 0x74, 0x41, 0x74, 0x12, 0x2c, 0x0a, 0x0b, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x65,
	0x64, 0x41, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x46, 0x0a, 0x13, 0x52, 0x6f, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x52, 0x6f, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x13, 0x52, 0x6f, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x50, 0x6c,
	0x61, 0x69, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x50,
	0x6c, 0x61, 0x69, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x22, 0xa5, 0x01, 0x0a, 0x19, 0x52, 0x65, 0x76,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44,
	0x6f, 0x63, 0x66, 0x6c, 0x6f, 0x77, 0x12, 0x3c, 0x0a, 0x12, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69,
	0x65, 0x6e, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x56, 0x33,
	0x52, 0x12, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x12, 0x4a, 0x0a, 0x12, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x6a, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x6f, 0x63, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x12, 0x53, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x87, 0x03, 0x0a, 0x17, 0x41, 0x6d, 0x65, 0x6e, 0x64, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x44, 0x6f, 0x63, 0x66, 0x6c, 0x6f, 0x77, 0x12, 0x1e, 0x0a, 0x0a,
	0x49, 0x73, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x08,
	0x52, 0x0a, 0x49, 0x73, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x12, 0x3f, 0x0a, 0x10,
	0x41, 0x6d, 0x65, 0x6e, 0x64, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x41,
	0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x56, 0x33, 0x52, 0x10, 0x41, 0x6d, 0x65,
	0x6e, 0x64, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a,
	0x06, 0x53, 0x65, 0x6e, 0x74, 0x41, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x06, 0x53, 0x65, 0x6e, 0x74, 0x41,
	0x74, 0x12, 0x2c, 0x0a, 0x0b, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x65, 0x64, 0x41, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x0b, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x2b, 0x0a, 0x07, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x44, 0x6f, 0x63, 0x66, 0x6c, 0x6f,
	0x77, 0x56, 0x33, 0x52, 0x07, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x12, 0x26, 0x0a, 0x0e,
	0x41, 0x6d, 0x65, 0x6e, 0x64, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x06,
	0x20, 0x02, 0x28, 0x05, 0x52, 0x0e, 0x41, 0x6d, 0x65, 0x6e, 0x64, 0x6d, 0x65, 0x6e, 0x74, 0x46,
	0x6c, 0x61, 0x67, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x50, 0x6c, 0x61, 0x69, 0x6e, 0x54, 0x65, 0x78,
	0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x50, 0x6c, 0x61, 0x69, 0x6e, 0x54, 0x65,
	0x78, 0x74, 0x12, 0x46, 0x0a, 0x13, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x6f, 0x63, 0x66, 0x6c, 0x6f, 0x77, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x6f,
	0x63, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x13, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x44, 0x6f, 0x63, 0x66, 0x6c, 0x6f, 0x77, 0x22, 0xe1, 0x02, 0x0a, 0x1a, 0x50,
	0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x44, 0x6f, 0x63, 0x66, 0x6c, 0x6f, 0x77, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x73, 0x46,
	0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x08, 0x52, 0x0a, 0x49,
	0x73, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x12, 0x2a, 0x0a, 0x09, 0x53, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x53,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x56, 0x33, 0x52, 0x09, 0x53, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x29, 0x0a, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x41, 0x74, 0x74,
	0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x56, 0x33, 0x52, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65,
	0x12, 0x38, 0x0a, 0x09, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52,
	0x65, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x6f, 0x63, 0x66, 0x6c, 0x6f, 0x77, 0x52,
	0x09, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x06, 0x53, 0x65,
	0x6e, 0x74, 0x41, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x06, 0x53, 0x65, 0x6e, 0x74, 0x41, 0x74, 0x12, 0x2c,
	0x0a, 0x0b, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x65, 0x64, 0x41, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0b, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x65, 0x64, 0x41, 0x74, 0x12, 0x40, 0x0a, 0x0e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07,
	0x20, 0x02, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xc8,
	0x01, 0x0a, 0x19, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x6a, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x6f, 0x63, 0x66, 0x6c, 0x6f, 0x77, 0x12, 0x43, 0x0a, 0x12,
	0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x65,
	0x64, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x56, 0x33, 0x52, 0x12, 0x53,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x73, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x18, 0x02, 0x20,
	0x02, 0x28, 0x08, 0x52, 0x08, 0x49, 0x73, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x12, 0x2c, 0x0a,
	0x0b, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x65, 0x64, 0x41, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b,
	0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x50,
	0x6c, 0x61, 0x69, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x50, 0x6c, 0x61, 0x69, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x22, 0xad, 0x02, 0x0a, 0x13, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x6f, 0x63, 0x66, 0x6c, 0x6f,
	0x77, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x73, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x08, 0x52, 0x0a, 0x49, 0x73, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65,
	0x64, 0x12, 0x4b, 0x0a, 0x16, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68,
	0x6d, 0x65, 0x6e, 0x74, 0x56, 0x33, 0x52, 0x16, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2c,
	0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x41, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x41, 0x74, 0x12, 0x2b, 0x0a, 0x07,
	0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x44, 0x6f, 0x63, 0x66, 0x6c, 0x6f, 0x77, 0x56, 0x33,
	0x52, 0x07, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x12, 0x4e, 0x0a, 0x13, 0x52, 0x6f, 0x61,
	0x6d, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x6f, 0x63,
	0x66, 0x6c, 0x6f, 0x77, 0x52, 0x13, 0x52, 0x6f, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xb0, 0x02, 0x0a, 0x10, 0x52, 0x65,
	0x63, 0x65, 0x69, 0x70, 0x74, 0x44, 0x6f, 0x63, 0x66, 0x6c, 0x6f, 0x77, 0x56, 0x33, 0x12, 0x1e,
	0x0a, 0x0a, 0x49, 0x73, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x08, 0x52, 0x0a, 0x49, 0x73, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x12, 0x41,
	0x0a, 0x11, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d,
	0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x53, 0x69, 0x67, 0x6e,
	0x65, 0x64, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x56, 0x33, 0x52, 0x11,
	0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x22, 0x0a, 0x06, 0x53, 0x65, 0x6e, 0x74, 0x41, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0a, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x06, 0x53,
	0x65, 0x6e, 0x74, 0x41, 0x74, 0x12, 0x2c, 0x0a, 0x0b, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72,
	0x65, 0x64, 0x41, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x38, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x6f, 0x63, 0x66, 0x6c, 0x6f, 0x77, 0x52,
	0x0c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a,
	0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x15, 0x2e,
	0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x98, 0x01, 0x0a,
	0x1b, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x6f, 0x63, 0x66, 0x6c, 0x6f, 0x77, 0x12, 0x4b, 0x0a, 0x16,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x61,
	0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x53,
	0x69, 0x67, 0x6e, 0x65, 0x64, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x56,
	0x33, 0x52, 0x16, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41,
	0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x0b, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x41, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x72, 0x6d, 0x65, 0x64, 0x41, 0x74, 0x22, 0xd1, 0x02, 0x0a, 0x12, 0x53, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x44, 0x6f, 0x63, 0x66, 0x6c, 0x6f, 0x77, 0x12, 0x1e,
	0x0a, 0x0a, 0x49, 0x73, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x08, 0x52, 0x0a, 0x49, 0x73, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x12, 0x33,
	0x0a, 0x0a, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x02,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x41, 0x74, 0x74, 0x61, 0x63,
	0x68, 0x6d, 0x65, 0x6e, 0x74, 0x56, 0x33, 0x52, 0x0a, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x06, 0x53, 0x65, 0x6e, 0x74, 0x41, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x06, 0x53, 0x65, 0x6e, 0x74, 0x41, 0x74, 0x12, 0x2c, 0x0a, 0x0b, 0x44, 0x65, 0x6c, 0x69, 0x76,
	0x65, 0x72, 0x65, 0x64, 0x41, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65,
	0x72, 0x65, 0x64, 0x41, 0x74, 0x12, 0x46, 0x0a, 0x13, 0x52, 0x6f, 0x61, 0x6d, 0x69, 0x6e, 0x67,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x52, 0x6f, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x13, 0x52, 0x6f, 0x61, 0x6d, 0x69, 0x6e,
	0x67, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4c, 0x0a,
	0x15, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x53,
	0x65, 0x6e, 0x64, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x15, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x60, 0x0a, 0x13, 0x52,
	0x6f, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x0c, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x52, 0x0c, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1c, 0x0a, 0x09, 0x49, 0x73, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x02,
	0x28, 0x08, 0x52, 0x09, 0x49, 0x73, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0xb6, 0x01,
	0x0a, 0x12, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65,
	0x6e, 0x74, 0x56, 0x33, 0x12, 0x2b, 0x0a, 0x0a, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x41, 0x74, 0x74, 0x61, 0x63,
	0x68, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0a, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x2a, 0x0a, 0x09, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x56, 0x33, 0x52, 0x09, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x21, 0x0a,
	0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x07,
	0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x24, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x49,
	0x64, 0x18, 0x04, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0d, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x22, 0x87, 0x01, 0x0a, 0x0a, 0x41, 0x74, 0x74, 0x61, 0x63,
	0x68, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x06, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x06,
	0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x2e, 0x0a, 0x12, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68,
	0x6d, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x12, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x69,
	0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x46, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65,
	0x22, 0xf6, 0x02, 0x0a, 0x0b, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x56, 0x33,
	0x12, 0x19, 0x0a, 0x03, 0x43, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x07, 0x2e,
	0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x03, 0x43, 0x6d, 0x73, 0x12, 0x1f, 0x0a, 0x06, 0x43,
	0x61, 0x64, 0x65, 0x73, 0x54, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x52, 0x06, 0x43, 0x61, 0x64, 0x65, 0x73, 0x54, 0x12, 0x20, 0x0a, 0x0b,
	0x53, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x42, 0x6f, 0x78, 0x49, 0x64, 0x18, 0x03, 0x20, 0x02, 0x28,
	0x09, 0x52, 0x0b, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x42, 0x6f, 0x78, 0x49, 0x64, 0x12, 0x2e,
	0x0a, 0x12, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x18, 0x04, 0x20, 0x02, 0x28, 0x09, 0x52, 0x12, 0x53, 0x69, 0x67, 0x6e,
	0x65, 0x72, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x49, 0x73, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x05, 0x20, 0x02, 0x28, 0x08, 0x52,
	0x07, 0x49, 0x73, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x4c, 0x0a, 0x12, 0x56, 0x65, 0x72, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x52, 0x12, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x2c, 0x0a, 0x0b, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65,
	0x72, 0x65, 0x64, 0x41, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x43, 0x0a, 0x0f, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x4f, 0x66, 0x41,
	0x74, 0x74, 0x6f, 0x72, 0x6e, 0x65, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x4f, 0x66,
	0x41, 0x74, 0x74, 0x6f, 0x72, 0x6e, 0x65, 0x79, 0x52, 0x0f, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x4f,
	0x66, 0x41, 0x74, 0x74, 0x6f, 0x72, 0x6e, 0x65, 0x79, 0x22, 0xc1, 0x01, 0x0a, 0x1b, 0x53, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x49, 0x73, 0x56,
	0x61, 0x6c, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x08, 0x52, 0x07, 0x49, 0x73, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x12, 0x4c, 0x0a, 0x11, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x56, 0x65, 0x72, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x11,
	0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x3a, 0x0a, 0x12, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x12, 0x53, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0xe9, 0x01,
	0x0a, 0x18, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x50, 0x6f, 0x77, 0x65, 0x72,
	0x4f, 0x66, 0x41, 0x74, 0x74, 0x6f, 0x72, 0x6e, 0x65, 0x79, 0x12, 0x1f, 0x0a, 0x06, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x52, 0x06, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x2e, 0x0a, 0x06, 0x46,
	0x75, 0x6c, 0x6c, 0x49, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x50, 0x6f,
	0x77, 0x65, 0x72, 0x4f, 0x66, 0x41, 0x74, 0x74, 0x6f, 0x72, 0x6e, 0x65, 0x79, 0x46, 0x75, 0x6c,
	0x6c, 0x49, 0x64, 0x52, 0x06, 0x46, 0x75, 0x6c, 0x6c, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x06, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x50, 0x6f,
	0x77, 0x65, 0x72, 0x4f, 0x66, 0x41, 0x74, 0x74, 0x6f, 0x72, 0x6e, 0x65, 0x79, 0x56, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x42, 0x0a, 0x0d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x50,
	0x6f, 0x77, 0x65, 0x72, 0x4f, 0x66, 0x41, 0x74, 0x74, 0x6f, 0x72, 0x6e, 0x65, 0x79, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x0d, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x22, 0x96, 0x01, 0x0a, 0x1b, 0x50, 0x6f,
	0x77, 0x65, 0x72, 0x4f, 0x66, 0x41, 0x74, 0x74, 0x6f, 0x72, 0x6e, 0x65, 0x79, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x1f, 0x0a, 0x06, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x52, 0x06, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x56, 0x0a, 0x15, 0x50, 0x6f,
	0x77, 0x65, 0x72, 0x4f, 0x66, 0x41, 0x74, 0x74, 0x6f, 0x72, 0x6e, 0x65, 0x79, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x50, 0x6f, 0x77, 0x65,
	0x72, 0x4f, 0x66, 0x41, 0x74, 0x74, 0x6f, 0x72, 0x6e, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x15, 0x50, 0x6f, 0x77,
	0x65, 0x72, 0x4f, 0x66, 0x41, 0x74, 0x74, 0x6f, 0x72, 0x6e, 0x65, 0x79, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x22, 0xb7, 0x01, 0x0a, 0x1d, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x49, 0x73, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x02, 0x28, 0x08, 0x52, 0x07, 0x49, 0x73, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x44,
	0x0a, 0x10, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61,
	0x69, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x45, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x10, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x43,
	0x68, 0x61, 0x69, 0x6e, 0x12, 0x36, 0x0a, 0x10, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0a,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x10, 0x56, 0x65, 0x72, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x83, 0x01, 0x0a,
	0x17, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x69,
	0x6e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x40, 0x0a, 0x1b, 0x43, 0x65, 0x72, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x1b, 0x43,
	0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x44, 0x65,
	0x72, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x02,
	0x28, 0x0c, 0x52, 0x0e, 0x44, 0x65, 0x72, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x22, 0xb4, 0x01, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x44, 0x6f, 0x63, 0x66, 0x6c, 0x6f,
	0x77, 0x73, 0x42, 0x79, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x08, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x12,
	0x19, 0x0a, 0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x03,
	0x31, 0x30, 0x30, 0x52, 0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x37, 0x0a, 0x13, 0x49, 0x6e,
	0x6a, 0x65, 0x63, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x13,
	0x49, 0x6e, 0x6a, 0x65, 0x63, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x41, 0x66, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x4b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x41, 0x66, 0x74, 0x65,
	0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x4b, 0x65, 0x79, 0x22, 0x7f, 0x0a, 0x1f, 0x47, 0x65, 0x74,
	0x44, 0x6f, 0x63, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x42, 0x79, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x56, 0x33, 0x12, 0x30, 0x0a, 0x09,
	0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x65, 0x64, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x56, 0x33, 0x52, 0x09, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x2a,
	0x0a, 0x10, 0x4e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x4b,
	0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x10, 0x4e, 0x65, 0x78, 0x74, 0x50, 0x61,
	0x67, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x4b, 0x65, 0x79, 0x22, 0x63, 0x0a, 0x11, 0x46, 0x65,
	0x74, 0x63, 0x68, 0x65, 0x64, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x56, 0x33, 0x12,
	0x32, 0x0a, 0x08, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x57, 0x69, 0x74, 0x68,
	0x44, 0x6f, 0x63, 0x66, 0x6c, 0x6f, 0x77, 0x56, 0x33, 0x52, 0x08, 0x44, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x4b, 0x65, 0x79, 0x18,
	0x02, 0x20, 0x02, 0x28, 0x0c, 0x52, 0x08, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x4b, 0x65, 0x79, 0x22,
	0xe1, 0x01, 0x0a, 0x15, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x44, 0x6f, 0x63, 0x66, 0x6c, 0x6f,
	0x77, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0b,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x19, 0x0a, 0x05, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x03, 0x31, 0x30, 0x30, 0x52,
	0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x46, 0x69, 0x72, 0x73, 0x74, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x46, 0x69, 0x72, 0x73,
	0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x32, 0x0a, 0x05, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x53, 0x63,
	0x6f, 0x70, 0x65, 0x3a, 0x0e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x53, 0x63, 0x6f, 0x70, 0x65,
	0x41, 0x6e, 0x79, 0x52, 0x05, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x37, 0x0a, 0x13, 0x49, 0x6e,
	0x6a, 0x65, 0x63, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x13,
	0x49, 0x6e, 0x6a, 0x65, 0x63, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x22, 0x7e, 0x0a, 0x18, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x44, 0x6f, 0x63,
	0x66, 0x6c, 0x6f, 0x77, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x56, 0x33, 0x12,
	0x34, 0x0a, 0x09, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x57, 0x69, 0x74,
	0x68, 0x44, 0x6f, 0x63, 0x66, 0x6c, 0x6f, 0x77, 0x56, 0x33, 0x52, 0x09, 0x44, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x48, 0x61, 0x76, 0x65, 0x4d, 0x6f, 0x72,
	0x65, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x11, 0x48, 0x61, 0x76, 0x65, 0x4d, 0x6f, 0x72, 0x65, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x22, 0x8b, 0x04, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x44, 0x6f, 0x63, 0x66, 0x6c,
	0x6f, 0x77, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x28, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x61, 0x73, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x52, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0d, 0x41, 0x66, 0x74,
	0x65, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x4b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x0d, 0x41, 0x66, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x4b, 0x65, 0x79, 0x12,
	0x33, 0x0a, 0x11, 0x50, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x44, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73,
	0x65, 0x52, 0x11, 0x50, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x44, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x12, 0x37, 0x0a, 0x13, 0x49, 0x6e, 0x6a, 0x65, 0x63, 0x74, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x13, 0x49, 0x6e, 0x6a, 0x65, 0x63, 0x74,
	0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x4d, 0x0a,
	0x1e, 0x50, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x50, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75,
	0x73, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x1e, 0x50, 0x6f,
	0x70, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x50, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x44, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x0c,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73,
	0x12, 0x2e, 0x0a, 0x12, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x44, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x22, 0x0a, 0x0c, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x64, 0x49, 0x64, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x54, 0x79, 0x70, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x64, 0x49, 0x64, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x65, 0x72, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x42, 0x6f, 0x78, 0x49, 0x64, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x11, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x42, 0x6f, 0x78, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x03, 0x31, 0x30, 0x30, 0x52, 0x05, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x22, 0xb2, 0x01, 0x0a, 0x0f, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x61, 0x73, 0x65, 0x64, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x0d, 0x46, 0x72, 0x6f, 0x6d, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x46, 0x72, 0x6f, 0x6d, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x2c, 0x0a, 0x0b, 0x54, 0x6f, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x54, 0x6f, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x3f, 0x0a, 0x0d, 0x53, 0x6f, 0x72, 0x74, 0x44, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x53,
	0x6f, 0x72, 0x74, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x09, 0x41, 0x73,
	0x63, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x0d, 0x53, 0x6f, 0x72, 0x74, 0x44, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x9c, 0x01, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x44, 0x6f,
	0x63, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x06, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x44, 0x6f, 0x63, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x56, 0x33, 0x52, 0x06, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x37, 0x0a, 0x0e,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x02, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0e, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x22, 0xc9, 0x02, 0x0a, 0x0e, 0x44, 0x6f, 0x63, 0x66, 0x6c, 0x6f,
	0x77, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x56, 0x33, 0x12, 0x18, 0x0a, 0x07, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x28, 0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x2b, 0x0a, 0x0a,
	0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0b, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x52, 0x0a, 0x44,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x4b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x4b, 0x65, 0x79, 0x12, 0x32, 0x0a, 0x08, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x57, 0x69, 0x74, 0x68, 0x44, 0x6f, 0x63, 0x66, 0x6c, 0x6f, 0x77, 0x56, 0x33, 0x52,
	0x08, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x50, 0x72, 0x65,
	0x76, 0x69, 0x6f, 0x75, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x50, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x4c, 0x0a, 0x15, 0x50, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x44,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x57, 0x69, 0x74,
	0x68, 0x44, 0x6f, 0x63, 0x66, 0x6c, 0x6f, 0x77, 0x56, 0x33, 0x52, 0x15, 0x50, 0x72, 0x65, 0x76,
	0x69, 0x6f, 0x75, 0x73, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x22, 0x50, 0x0a, 0x1f, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x50, 0x72, 0x69, 0x6e, 0x74,
	0x46, 0x6f, 0x72, 0x6d, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x0b, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x44, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x52, 0x0b, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x73, 0x22, 0x5b, 0x0a, 0x1e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x50, 0x72, 0x69,
	0x6e, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x39, 0x0a, 0x05, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x50, 0x72, 0x69,
	0x6e, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x74, 0x65, 0x6d, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x05, 0x49, 0x74, 0x65, 0x6d, 0x73,
	0x22, 0x81, 0x01, 0x0a, 0x22, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x50, 0x72, 0x69, 0x6e, 0x74,
	0x46, 0x6f, 0x72, 0x6d, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x74, 0x65,
	0x6d, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x2b, 0x0a, 0x0a, 0x44, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x44, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x52, 0x0a, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x12, 0x48, 0x61, 0x73, 0x43, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x50, 0x72, 0x69, 0x6e, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x18, 0x02, 0x20, 0x02, 0x28, 0x08,
	0x52, 0x12, 0x48, 0x61, 0x73, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x50, 0x72, 0x69, 0x6e, 0x74,
	0x46, 0x6f, 0x72, 0x6d, 0x22, 0x5f, 0x0a, 0x16, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x44,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x54, 0x6f, 0x42, 0x6f, 0x78, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52,
	0x07, 0x54, 0x6f, 0x42, 0x6f, 0x78, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x0a, 0x44, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x44,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x52, 0x0a, 0x44, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x99, 0x01, 0x0a, 0x17, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72,
	0x64, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x36, 0x0a, 0x10, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x10, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x46, 0x0a, 0x13, 0x46, 0x6f, 0x72,
	0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64,
	0x65, 0x64, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x52, 0x13, 0x46, 0x6f,
	0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x22, 0x88, 0x01, 0x0a, 0x13, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x44,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x46, 0x72, 0x6f,
	0x6d, 0x42, 0x6f, 0x78, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x46, 0x72,
	0x6f, 0x6d, 0x42, 0x6f, 0x78, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x0a, 0x44, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x44, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x52, 0x0a, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x46, 0x6f,
	0x72, 0x77, 0x61, 0x72, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0xdb, 0x01, 0x0a,
	0x11, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x36, 0x0a, 0x10, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x10, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x46, 0x0a, 0x13, 0x46, 0x6f,
	0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72,
	0x64, 0x65, 0x64, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x52, 0x13, 0x46,
	0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x46, 0x0a, 0x13, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x57, 0x69,
	0x74, 0x68, 0x44, 0x6f, 0x63, 0x66, 0x6c, 0x6f, 0x77, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x57, 0x69, 0x74, 0x68, 0x44, 0x6f,
	0x63, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x13, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x57,
	0x69, 0x74, 0x68, 0x44, 0x6f, 0x63, 0x66, 0x6c, 0x6f, 0x77, 0x22, 0xc6, 0x03, 0x0a, 0x13, 0x44,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x57, 0x69, 0x74, 0x68, 0x44, 0x6f, 0x63, 0x66, 0x6c,
	0x6f, 0x77, 0x12, 0x2b, 0x0a, 0x0a, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x52, 0x0a, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x20, 0x0a, 0x0b, 0x4c, 0x61, 0x73, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x4c, 0x61, 0x73, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x3a, 0x0a, 0x12, 0x4c, 0x61, 0x73, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x12, 0x4c, 0x61, 0x73, 0x74, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x31, 0x0a,
	0x0c, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x0c, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x22, 0x0a, 0x07, 0x44, 0x6f, 0x63, 0x66, 0x6c, 0x6f, 0x77, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x08, 0x2e, 0x44, 0x6f, 0x63, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x07, 0x44, 0x6f, 0x63,
	0x66, 0x6c, 0x6f, 0x77, 0x12, 0x3b, 0x0a, 0x12, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x44,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0b, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x52, 0x12, 0x49,
	0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x73, 0x12, 0x43, 0x0a, 0x16, 0x53, 0x75, 0x62, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65,
	0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0b, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x52, 0x16,
	0x53, 0x75, 0x62, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x44, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x12, 0x4b, 0x0a, 0x15, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72,
	0x64, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18,
	0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x44,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x15, 0x46, 0x6f,
	0x72, 0x77, 0x61, 0x72, 0x64, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x22, 0x90, 0x09, 0x0a, 0x0c, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x48, 0x0a, 0x0c, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x44, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x15, 0x55, 0x6e, 0x6b, 0x6e, 0x6f,
	0x77, 0x6e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x44, 0x54,
	0x52, 0x0c, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x5a,
	0x0a, 0x11, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x44, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x18, 0x55,
	0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x49, 0x73,
	0x54, 0x65, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x49, 0x73, 0x54, 0x65,
	0x73, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x44, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2a,
	0x0a, 0x10, 0x46, 0x72, 0x6f, 0x6d, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x46, 0x72, 0x6f, 0x6d, 0x44, 0x65,
	0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x54, 0x6f,
	0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x54, 0x6f, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x2c, 0x0a, 0x11, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x42, 0x6f, 0x78, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x42, 0x6f, 0x78, 0x49, 0x64,
	0x12, 0x4c, 0x0a, 0x15, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x65,
	0x41, 0x6e, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x65, 0x41, 0x6e,
	0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x15, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x44, 0x61, 0x74, 0x65, 0x41, 0x6e, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x40,
	0x0a, 0x11, 0x42, 0x61, 0x73, 0x69, 0x63, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x42, 0x61, 0x73, 0x69,
	0x63, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x11, 0x42,
	0x61, 0x73, 0x69, 0x63, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x36, 0x0a, 0x0b, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x44,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x49, 0x6e, 0x76,
	0x6f, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x54, 0x0a, 0x15, 0x49, 0x6e, 0x76, 0x6f,
	0x69, 0x63, 0x65, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66,
	0x6f, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63,
	0x65, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x15, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3c,
	0x0a, 0x0d, 0x50, 0x72, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0d, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x39, 0x0a, 0x0c,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x44, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x63, 0x0a, 0x1a, 0x53, 0x75, 0x70, 0x70, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x72, 0x79, 0x41, 0x67, 0x72, 0x65, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x53, 0x75,
	0x70, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x72, 0x79, 0x41, 0x67, 0x72, 0x65, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x1a, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x72, 0x79, 0x41,
	0x67, 0x72, 0x65, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x64, 0x0a, 0x1d,
	0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x61, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x61, 0x6c, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x1d, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x61, 0x6c, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x6a, 0x0a, 0x1f, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x61, 0x6c, 0x43,
	0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x55, 0x6e,
	0x69, 0x76, 0x65, 0x72, 0x73, 0x61, 0x6c, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x1f, 0x55,
	0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x61, 0x6c, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2c,
	0x0a, 0x11, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x41, 0x74, 0x74, 0x61, 0x63,
	0x68, 0x6d, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x12, 0x20, 0x02, 0x28, 0x09, 0x52, 0x07, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xb0, 0x04, 0x0a, 0x1f, 0x55, 0x6e, 0x69, 0x76, 0x65,
	0x72, 0x73, 0x61, 0x6c, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x6f,
	0x74, 0x61, 0x6c, 0x49, 0x6e, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x54, 0x6f,
	0x74, 0x61, 0x6c, 0x49, 0x6e, 0x63, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x44,
	0x65, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x44,
	0x65, 0x63, 0x12, 0x16, 0x0a, 0x06, 0x56, 0x61, 0x74, 0x49, 0x6e, 0x63, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x56, 0x61, 0x74, 0x49, 0x6e, 0x63, 0x12, 0x16, 0x0a, 0x06, 0x56, 0x61,
	0x74, 0x44, 0x65, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x56, 0x61, 0x74, 0x44,
	0x65, 0x63, 0x12, 0x22, 0x0a, 0x0c, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f,
	0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x47, 0x72, 0x6f, 0x75, 0x6e, 0x64,
	0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x47, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x73,
	0x12, 0x29, 0x0a, 0x08, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x02,
	0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x08, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5c, 0x0a, 0x1d, 0x4f,
	0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x44,
	0x61, 0x74, 0x65, 0x41, 0x6e, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74,
	0x65, 0x41, 0x6e, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x1d, 0x4f, 0x72, 0x69, 0x67,
	0x69, 0x6e, 0x61, 0x6c, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x65,
	0x41, 0x6e, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x6c, 0x0a, 0x25, 0x4f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x61, 0x6c, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x76,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x41, 0x6e, 0x64, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x65, 0x41, 0x6e, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x52, 0x25, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x41, 0x6e,
	0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x70, 0x0a, 0x27, 0x4f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x61, 0x6c, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x72, 0x72, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x41, 0x6e, 0x64, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x65, 0x41, 0x6e, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x52, 0x27, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65,
	0x41, 0x6e, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x8e, 0x02, 0x0a, 0x1d, 0x55, 0x6e,
	0x69, 0x76, 0x65, 0x72, 0x73, 0x61, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x44,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x54,
	0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x12, 0x10, 0x0a, 0x03, 0x56, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x56, 0x61, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43,
	0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x47, 0x72, 0x6f, 0x75, 0x6e,
	0x64, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x47, 0x72, 0x6f, 0x75, 0x6e, 0x64,
	0x73, 0x12, 0x29, 0x0a, 0x08, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20,
	0x02, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x08, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5c, 0x0a, 0x1d,
	0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x44, 0x61, 0x74, 0x65, 0x41, 0x6e, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61,
	0x74, 0x65, 0x41, 0x6e, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x1d, 0x4f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x61, 0x6c, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74,
	0x65, 0x41, 0x6e, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x60, 0x0a, 0x14, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x24, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x22, 0x8a, 0x02, 0x0a,
	0x22, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x72, 0x79, 0x41, 0x67,
	0x72, 0x65, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x22, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x5c, 0x0a, 0x1d, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x65, 0x41,
	0x6e, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x65, 0x41, 0x6e, 0x64,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x1d, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x65, 0x41, 0x6e, 0x64, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x4c, 0x0a, 0x15, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x44, 0x61, 0x74, 0x65, 0x41, 0x6e, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03,
	0x20, 0x02, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x44,
	0x61, 0x74, 0x65, 0x41, 0x6e, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x15, 0x44, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x65, 0x41, 0x6e, 0x64, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0xad, 0x01, 0x0a, 0x15, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x36, 0x0a, 0x16, 0x50, 0x72, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x44, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x16, 0x50, 0x72, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x66,
	0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x5c, 0x0a, 0x1d, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x44,
	0x61, 0x74, 0x65, 0x41, 0x6e, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74,
	0x65, 0x41, 0x6e, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x1d, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x65,
	0x41, 0x6e, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0xbd, 0x01, 0x0a, 0x13, 0x49, 0x6e,
	0x76, 0x6f, 0x69, 0x63, 0x65, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x56, 0x61, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x56, 0x61, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0c, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x5a, 0x0a,
	0x1c, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x44, 0x61, 0x74, 0x65, 0x41, 0x6e, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61,
	0x74, 0x65, 0x41, 0x6e, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x1c, 0x4f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x44, 0x61, 0x74, 0x65,
	0x41, 0x6e, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0xe3, 0x03, 0x0a, 0x1d, 0x49, 0x6e,
	0x76, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x54,
	0x6f, 0x74, 0x61, 0x6c, 0x49, 0x6e, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x54,
	0x6f, 0x74, 0x61, 0x6c, 0x49, 0x6e, 0x63, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x44, 0x65, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x44, 0x65, 0x63, 0x12, 0x16, 0x0a, 0x06, 0x56, 0x61, 0x74, 0x49, 0x6e, 0x63, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x56, 0x61, 0x74, 0x49, 0x6e, 0x63, 0x12, 0x16, 0x0a, 0x06, 0x56,
	0x61, 0x74, 0x44, 0x65, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x56, 0x61, 0x74,
	0x44, 0x65, 0x63, 0x12, 0x22, 0x0a, 0x0c, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43,
	0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x5a, 0x0a, 0x1c, 0x4f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x44, 0x61, 0x74, 0x65, 0x41, 0x6e,
	0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x65, 0x41, 0x6e, 0x64, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x1c, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x49,
	0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x44, 0x61, 0x74, 0x65, 0x41, 0x6e, 0x64, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x6a, 0x0a, 0x24, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x49,
	0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x61,
	0x74, 0x65, 0x41, 0x6e, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x65,
	0x41, 0x6e, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x24, 0x4f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x41, 0x6e, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x6e, 0x0a, 0x26, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x76, 0x6f, 0x69,
	0x63, 0x65, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65,
	0x41, 0x6e, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x65, 0x41, 0x6e,
	0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x26, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61,
	0x6c, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x41, 0x6e, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22,
	0x6b, 0x0a, 0x11, 0x42, 0x61, 0x73, 0x69, 0x63, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x4e, 0x6f,
	0x56, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x4e, 0x6f, 0x56, 0x61, 0x74,
	0x12, 0x10, 0x0a, 0x03, 0x56, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x56,
	0x61, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x47, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x47, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x22, 0xca, 0x0a, 0x0a,
	0x07, 0x44, 0x6f, 0x63, 0x66, 0x6c, 0x6f, 0x77, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x73, 0x46, 0x69,
	0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x49, 0x73,
	0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x12, 0x41, 0x0a, 0x12, 0x44, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x41, 0x74, 0x74,
	0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x12, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x44,
	0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x2c, 0x0a, 0x11, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x73, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x44, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x49, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x34, 0x0a,
	0x0d, 0x44, 0x6f, 0x63, 0x66, 0x6c, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x44, 0x6f, 0x63, 0x66, 0x6c, 0x6f, 0x77, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x0d, 0x44, 0x6f, 0x63, 0x66, 0x6c, 0x6f, 0x77, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x30, 0x0a, 0x0d, 0x53, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x53, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x38, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72,
	0x79, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0a, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x11, 0x44, 0x65,
	0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12,
	0x4c, 0x0a, 0x15, 0x49, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63,
	0x65, 0x44, 0x6f, 0x63, 0x66, 0x6c, 0x6f, 0x77, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x49, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x44,
	0x6f, 0x63, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x15, 0x49, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x49,
	0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x44, 0x6f, 0x63, 0x66, 0x6c, 0x6f, 0x77, 0x12, 0x4f, 0x0a,
	0x16, 0x4f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x44, 0x6f, 0x63, 0x66, 0x6c, 0x6f, 0x77, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x4f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x44,
	0x6f, 0x63, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x16, 0x4f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64,
	0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x44, 0x6f, 0x63, 0x66, 0x6c, 0x6f, 0x77, 0x12, 0x46,
	0x0a, 0x13, 0x58, 0x6d, 0x6c, 0x42, 0x69, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x44, 0x6f,
	0x63, 0x66, 0x6c, 0x6f, 0x77, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x58, 0x6d,
	0x6c, 0x42, 0x69, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x44, 0x6f, 0x63, 0x66, 0x6c, 0x6f,
	0x77, 0x52, 0x13, 0x58, 0x6d, 0x6c, 0x42, 0x69, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x44,
	0x6f, 0x63, 0x66, 0x6c, 0x6f, 0x77, 0x12, 0x3d, 0x0a, 0x10, 0x42, 0x69, 0x6c, 0x61, 0x74, 0x65,
	0x72, 0x61, 0x6c, 0x44, 0x6f, 0x63, 0x66, 0x6c, 0x6f, 0x77, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x42, 0x69, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x44, 0x6f, 0x63, 0x66,
	0x6c, 0x6f, 0x77, 0x52, 0x10, 0x42, 0x69, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x44, 0x6f,
	0x63, 0x66, 0x6c, 0x6f, 0x77, 0x12, 0x40, 0x0a, 0x11, 0x55, 0x6e, 0x69, 0x6c, 0x61, 0x74, 0x65,
	0x72, 0x61, 0x6c, 0x44, 0x6f, 0x63, 0x66, 0x6c, 0x6f, 0x77, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x55, 0x6e, 0x69, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x44, 0x6f, 0x63,
	0x66, 0x6c, 0x6f, 0x77, 0x52, 0x11, 0x55, 0x6e, 0x69, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x61, 0x6c,
	0x44, 0x6f, 0x63, 0x66, 0x6c, 0x6f, 0x77, 0x12, 0x40, 0x0a, 0x11, 0x52, 0x65, 0x76, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x6f, 0x63, 0x66, 0x6c, 0x6f, 0x77, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x52, 0x65, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x6f, 0x63, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x11, 0x52, 0x65, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x6f, 0x63, 0x66, 0x6c, 0x6f, 0x77, 0x12, 0x40, 0x0a, 0x11, 0x52, 0x65, 0x73,
	0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x6f, 0x63, 0x66, 0x6c, 0x6f, 0x77, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x6f, 0x63, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x11, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x44, 0x6f, 0x63, 0x66, 0x6c, 0x6f, 0x77, 0x12, 0x5a, 0x0a, 0x28, 0x43,
	0x61, 0x6e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x65, 0x52, 0x65, 0x76, 0x6f,
	0x6b, 0x65, 0x64, 0x55, 0x6e, 0x69, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x6c, 0x79, 0x42,
	0x79, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x28, 0x43,
	0x61, 0x6e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x65, 0x52, 0x65, 0x76, 0x6f,
	0x6b, 0x65, 0x64, 0x55, 0x6e, 0x69, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x6c, 0x79, 0x42,
	0x79, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x49, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x50, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x0a, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x44, 0x61, 0x74,
	0x61, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x44, 0x61, 0x74, 0x61, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0a, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x82, 0x01, 0x0a, 0x27, 0x49, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64,
	0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x61, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x6f, 0x63, 0x66, 0x6c, 0x6f, 0x77,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x49, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64,
	0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x61, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x6f, 0x63, 0x66, 0x6c, 0x6f, 0x77,
	0x52, 0x27, 0x49, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73,
	0x61, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x44, 0x6f, 0x63, 0x66, 0x6c, 0x6f, 0x77, 0x12, 0x85, 0x01, 0x0a, 0x28, 0x4f, 0x75,
	0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x61, 0x6c, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x44,
	0x6f, 0x63, 0x66, 0x6c, 0x6f, 0x77, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x4f,
	0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x61, 0x6c,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x44, 0x6f, 0x63, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x28, 0x4f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e,
	0x64, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x61, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x6f, 0x63, 0x66, 0x6c, 0x6f,
	0x77, 0x12, 0x46, 0x0a, 0x13, 0x52, 0x6f, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x52, 0x6f, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x13, 0x52, 0x6f, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x13, 0x0a, 0x11, 0x52, 0x65, 0x73,
	0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x6f, 0x63, 0x66, 0x6c, 0x6f, 0x77, 0x22, 0xe7,
	0x03, 0x0a, 0x11, 0x52, 0x65, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x6f, 0x63,
	0x66, 0x6c, 0x6f, 0x77, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x73, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68,
	0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x49, 0x73, 0x46, 0x69, 0x6e, 0x69,
	0x73, 0x68, 0x65, 0x64, 0x12, 0x53, 0x0a, 0x1b, 0x52, 0x65, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d,
	0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x53, 0x69, 0x67, 0x6e,
	0x65, 0x64, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x1b, 0x52, 0x65,
	0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41,
	0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x58, 0x0a, 0x19, 0x52, 0x65, 0x63,
	0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x44,
	0x6f, 0x63, 0x66, 0x6c, 0x6f, 0x77, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x52,
	0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x44, 0x6f, 0x63, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x19, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69,
	0x65, 0x6e, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x44, 0x6f, 0x63, 0x66,
	0x6c, 0x6f, 0x77, 0x12, 0x73, 0x0a, 0x22, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74,
	0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x6f, 0x63, 0x66, 0x6c, 0x6f, 0x77, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x6f, 0x63,
	0x66, 0x6c, 0x6f, 0x77, 0x52, 0x22, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x53,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x6f, 0x63, 0x66, 0x6c, 0x6f, 0x77, 0x12, 0x26, 0x0a, 0x0e, 0x49, 0x6e, 0x69, 0x74,
	0x69, 0x61, 0x74, 0x6f, 0x72, 0x42, 0x6f, 0x78, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x42, 0x6f, 0x78, 0x49, 0x64,
	0x12, 0x32, 0x0a, 0x14, 0x49, 0x73, 0x52, 0x65, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14,
	0x49, 0x73, 0x52, 0x65, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x63, 0x65,
	0x70, 0x74, 0x65, 0x64, 0x12, 0x32, 0x0a, 0x14, 0x49, 0x73, 0x52, 0x65, 0x76, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x14, 0x49, 0x73, 0x52, 0x65, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x22, 0xe7, 0x01, 0x0a, 0x22, 0x52, 0x65, 0x63,
	0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52,
	0x65, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x6f, 0x63, 0x66, 0x6c, 0x6f, 0x77, 0x12,
	0x1e, 0x0a, 0x0a, 0x49, 0x73, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0a, 0x49, 0x73, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x12,
	0x67, 0x0a, 0x25, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74,
	0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x25, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74,
	0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x38, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x69,
	0x76, 0x65, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x11, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x22, 0xb1, 0x01, 0x0a, 0x19, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74,
	0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x44, 0x6f, 0x63, 0x66, 0x6c, 0x6f, 0x77,
	0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x73, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x49, 0x73, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64,
	0x12, 0x3a, 0x0a, 0x12, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x53,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x12, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69,
	0x65, 0x6e, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x38, 0x0a, 0x11,
	0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x11, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x71, 0x0a, 0x0e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70,
	0x74, 0x44, 0x6f, 0x63, 0x66, 0x6c, 0x6f, 0x77, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x73, 0x46, 0x69,
	0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x49, 0x73,
	0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x12, 0x3f, 0x0a, 0x11, 0x52, 0x65, 0x63, 0x65,
	0x69, 0x70, 0x74, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x41, 0x74, 0x74, 0x61,
	0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x11, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x41,
	0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x96, 0x02, 0x0a, 0x11, 0x55, 0x6e,
	0x69, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x44, 0x6f, 0x63, 0x66, 0x6c, 0x6f, 0x77, 0x12,
	0x1e, 0x0a, 0x0a, 0x49, 0x73, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0a, 0x49, 0x73, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x12,
	0x37, 0x0a, 0x0e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x44, 0x6f, 0x63, 0x66, 0x6c, 0x6f,
	0x77, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70,
	0x74, 0x44, 0x6f, 0x63, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x0e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70,
	0x74, 0x44, 0x6f, 0x63, 0x66, 0x6c, 0x6f, 0x77, 0x12, 0x2e, 0x0a, 0x12, 0x49, 0x73, 0x52, 0x65,
	0x63, 0x65, 0x69, 0x70, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x49, 0x73, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x12, 0x36, 0x0a, 0x16, 0x43, 0x61, 0x6e, 0x44,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x65, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74,
	0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x43, 0x61, 0x6e, 0x44, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x65, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x65, 0x64,
	0x12, 0x40, 0x0a, 0x1b, 0x43, 0x61, 0x6e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x42,
	0x65, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x42, 0x79, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1b, 0x43, 0x61, 0x6e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x42, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x42, 0x79, 0x53, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x22, 0xb3, 0x05, 0x0a, 0x13, 0x58, 0x6d, 0x6c, 0x42, 0x69, 0x6c, 0x61, 0x74, 0x65,
	0x72, 0x61, 0x6c, 0x44, 0x6f, 0x63, 0x66, 0x6c, 0x6f, 0x77, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x73,
	0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a,
	0x49, 0x73, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x12, 0x37, 0x0a, 0x0e, 0x52, 0x65,
	0x63, 0x65, 0x69, 0x70, 0x74, 0x44, 0x6f, 0x63, 0x66, 0x6c, 0x6f, 0x77, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x44, 0x6f, 0x63, 0x66,
	0x6c, 0x6f, 0x77, 0x52, 0x0e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x44, 0x6f, 0x63, 0x66,
	0x6c, 0x6f, 0x77, 0x12, 0x40, 0x0a, 0x11, 0x42, 0x75, 0x79, 0x65, 0x72, 0x54, 0x69, 0x74, 0x6c,
	0x65, 0x44, 0x6f, 0x63, 0x66, 0x6c, 0x6f, 0x77, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x42, 0x75, 0x79, 0x65, 0x72, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x44, 0x6f, 0x63, 0x66, 0x6c,
	0x6f, 0x77, 0x52, 0x11, 0x42, 0x75, 0x79, 0x65, 0x72, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x44, 0x6f,
	0x63, 0x66, 0x6c, 0x6f, 0x77, 0x12, 0x73, 0x0a, 0x22, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65,
	0x6e, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x6a, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x44, 0x6f, 0x63, 0x66, 0x6c, 0x6f, 0x77, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x6f, 0x63, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x22, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e,
	0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x44, 0x6f, 0x63, 0x66, 0x6c, 0x6f, 0x77, 0x12, 0x2e, 0x0a, 0x12, 0x49, 0x73,
	0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x49, 0x73, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x12, 0x40, 0x0a, 0x1b, 0x49, 0x73,
	0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x42, 0x79,
	0x52, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x1b, 0x49, 0x73, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x65,
	0x64, 0x42, 0x79, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x44, 0x0a, 0x1d,
	0x49, 0x73, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x42, 0x79, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x1d, 0x49, 0x73, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x42, 0x79, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65,
	0x6e, 0x74, 0x12, 0x36, 0x0a, 0x16, 0x43, 0x61, 0x6e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x42, 0x65, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x16, 0x43, 0x61, 0x6e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x42,
	0x65, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x65, 0x64, 0x12, 0x40, 0x0a, 0x1b, 0x43, 0x61,
	0x6e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x65,
	0x64, 0x42, 0x79, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x1b, 0x43, 0x61, 0x6e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x65, 0x53, 0x69,
	0x67, 0x6e, 0x65, 0x64, 0x42, 0x79, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x5a, 0x0a, 0x28,
	0x43, 0x61, 0x6e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x65, 0x53, 0x69, 0x67,
	0x6e, 0x65, 0x64, 0x4f, 0x72, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x42, 0x79, 0x52,
	0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x28,
	0x43, 0x61, 0x6e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x65, 0x53, 0x69, 0x67,
	0x6e, 0x65, 0x64, 0x4f, 0x72, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x42, 0x79, 0x52,
	0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x22, 0xe6, 0x01, 0x0a, 0x11, 0x42, 0x75, 0x79,
	0x65, 0x72, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x44, 0x6f, 0x63, 0x66, 0x6c, 0x6f, 0x77, 0x12, 0x1e,
	0x0a, 0x0a, 0x49, 0x73, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0a, 0x49, 0x73, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x12, 0x45,
	0x0a, 0x14, 0x42, 0x75, 0x79, 0x65, 0x72, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x41, 0x74, 0x74, 0x61,
	0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x53,
	0x69, 0x67, 0x6e, 0x65, 0x64, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x14, 0x42, 0x75, 0x79, 0x65, 0x72, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x41, 0x74, 0x74, 0x61, 0x63,
	0x68, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x0d, 0x53, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x53, 0x65, 0x6e, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x38, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x69, 0x76,
	0x65, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x11,
	0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x22, 0x8e, 0x06, 0x0a, 0x10, 0x42, 0x69, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x44,
	0x6f, 0x63, 0x66, 0x6c, 0x6f, 0x77, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x73, 0x46, 0x69, 0x6e, 0x69,
	0x73, 0x68, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x49, 0x73, 0x46, 0x69,
	0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x12, 0x37, 0x0a, 0x0e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70,
	0x74, 0x44, 0x6f, 0x63, 0x66, 0x6c, 0x6f, 0x77, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x44, 0x6f, 0x63, 0x66, 0x6c, 0x6f, 0x77, 0x52,
	0x0e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x44, 0x6f, 0x63, 0x66, 0x6c, 0x6f, 0x77, 0x12,
	0x58, 0x0a, 0x19, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x44, 0x6f, 0x63, 0x66, 0x6c, 0x6f, 0x77, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x44, 0x6f, 0x63, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x19,
	0x52, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x44, 0x6f, 0x63, 0x66, 0x6c, 0x6f, 0x77, 0x12, 0x73, 0x0a, 0x22, 0x52, 0x65, 0x63,
	0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52,
	0x65, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x6f, 0x63, 0x66, 0x6c, 0x6f, 0x77, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e,
	0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x44, 0x6f, 0x63, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x22, 0x52, 0x65, 0x63, 0x69,
	0x70, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65,
	0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x6f, 0x63, 0x66, 0x6c, 0x6f, 0x77, 0x12, 0x2e,
	0x0a, 0x12, 0x49, 0x73, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x49, 0x73, 0x52, 0x65,
	0x63, 0x65, 0x69, 0x70, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x12, 0x44,
	0x0a, 0x1d, 0x49, 0x73, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1d, 0x49, 0x73, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65,
	0x6e, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x65, 0x64, 0x12, 0x40, 0x0a, 0x1b, 0x49, 0x73, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x42, 0x79, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69,
	0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1b, 0x49, 0x73, 0x44, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x42, 0x79, 0x52, 0x65, 0x63,
	0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x44, 0x0a, 0x1d, 0x49, 0x73, 0x44, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x42, 0x79, 0x52, 0x65,
	0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1d, 0x49,
	0x73, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x42, 0x79, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x36, 0x0a, 0x16,
	0x43, 0x61, 0x6e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x65, 0x52, 0x65, 0x63,
	0x65, 0x69, 0x70, 0x74, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x43, 0x61,
	0x6e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x65, 0x52, 0x65, 0x63, 0x65, 0x69,
	0x70, 0x74, 0x65, 0x64, 0x12, 0x40, 0x0a, 0x1b, 0x43, 0x61, 0x6e, 0x44, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x42, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x42, 0x79, 0x53, 0x65, 0x6e,
	0x64, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1b, 0x43, 0x61, 0x6e, 0x44, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x42, 0x79,
	0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x5a, 0x0a, 0x28, 0x43, 0x61, 0x6e, 0x44, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x4f, 0x72, 0x52,
	0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x42, 0x79, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65,
	0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x28, 0x43, 0x61, 0x6e, 0x44, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x4f, 0x72, 0x52,
	0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x42, 0x79, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65,
	0x6e, 0x74, 0x22, 0x96, 0x04, 0x0a, 0x16, 0x4f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x49,
	0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x44, 0x6f, 0x63, 0x66, 0x6c, 0x6f, 0x77, 0x12, 0x1e, 0x0a,
	0x0a, 0x49, 0x73, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0a, 0x49, 0x73, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x12, 0x37, 0x0a,
	0x0e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x44, 0x6f, 0x63, 0x66, 0x6c, 0x6f, 0x77, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x44,
	0x6f, 0x63, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x0e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x44,
	0x6f, 0x63, 0x66, 0x6c, 0x6f, 0x77, 0x12, 0x4d, 0x0a, 0x13, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x6f, 0x63, 0x66, 0x6c, 0x6f, 0x77, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x6f, 0x63, 0x66, 0x6c, 0x6f, 0x77,
	0x52, 0x13, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x6f,
	0x63, 0x66, 0x6c, 0x6f, 0x77, 0x12, 0x5c, 0x0a, 0x18, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x44, 0x6f, 0x63, 0x66, 0x6c, 0x6f,
	0x77, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63,
	0x65, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x44, 0x6f, 0x63, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x18, 0x43, 0x6f, 0x72, 0x72, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x44, 0x6f, 0x63, 0x66,
	0x6c, 0x6f, 0x77, 0x12, 0x40, 0x0a, 0x15, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x15,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x32, 0x0a, 0x14, 0x49, 0x73, 0x41, 0x6d, 0x65, 0x6e, 0x64,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x14, 0x49, 0x73, 0x41, 0x6d, 0x65, 0x6e, 0x64, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x73, 0x52,
	0x65, 0x76, 0x69, 0x73, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x49, 0x73,
	0x52, 0x65, 0x76, 0x69, 0x73, 0x65, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x49, 0x73, 0x43, 0x6f, 0x72,
	0x72, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x49, 0x73,
	0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x40, 0x0a, 0x1b, 0x43, 0x61, 0x6e,
	0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64,
	0x42, 0x79, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1b,
	0x43, 0x61, 0x6e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x65, 0x53, 0x69, 0x67,
	0x6e, 0x65, 0x64, 0x42, 0x79, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x22, 0xc0, 0x01, 0x0a, 0x1a,
	0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x44, 0x6f, 0x63, 0x66, 0x6c, 0x6f, 0x77, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x73,
	0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a,
	0x49, 0x73, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x12, 0x49, 0x0a, 0x16, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68,
	0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x53, 0x69, 0x67,
	0x6e, 0x65, 0x64, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x16, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x61, 0x63,
	0x68, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x37, 0x0a, 0x0e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74,
	0x44, 0x6f, 0x63, 0x66, 0x6c, 0x6f, 0x77, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x44, 0x6f, 0x63, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x0e,
	0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x44, 0x6f, 0x63, 0x66, 0x6c, 0x6f, 0x77, 0x22, 0xcf,
	0x01, 0x0a, 0x1f, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x44, 0x6f, 0x63, 0x66, 0x6c,
	0x6f, 0x77, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x73, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x49, 0x73, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68,
	0x65, 0x64, 0x12, 0x53, 0x0a, 0x1b, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64,
	0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x1b, 0x43, 0x6f, 0x72, 0x72,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x74, 0x74,
	0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x37, 0x0a, 0x0e, 0x52, 0x65, 0x63, 0x65, 0x69,
	0x70, 0x74, 0x44, 0x6f, 0x63, 0x66, 0x6c, 0x6f, 0x77, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x44, 0x6f, 0x63, 0x66, 0x6c, 0x6f, 0x77,
	0x52, 0x0e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x44, 0x6f, 0x63, 0x66, 0x6c, 0x6f, 0x77,
	0x22, 0xe1, 0x03, 0x0a, 0x15, 0x49, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x6e, 0x76, 0x6f,
	0x69, 0x63, 0x65, 0x44, 0x6f, 0x63, 0x66, 0x6c, 0x6f, 0x77, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x73,
	0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a,
	0x49, 0x73, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x12, 0x45, 0x0a, 0x0e, 0x52, 0x65,
	0x63, 0x65, 0x69, 0x70, 0x74, 0x44, 0x6f, 0x63, 0x66, 0x6c, 0x6f, 0x77, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x49, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x6e, 0x76, 0x6f,
	0x69, 0x63, 0x65, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x44, 0x6f, 0x63, 0x66, 0x6c, 0x6f,
	0x77, 0x52, 0x0e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x44, 0x6f, 0x63, 0x66, 0x6c, 0x6f,
	0x77, 0x12, 0x4d, 0x0a, 0x13, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x6f, 0x63, 0x66, 0x6c, 0x6f, 0x77, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x44, 0x6f, 0x63, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x13, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x6f, 0x63, 0x66, 0x6c, 0x6f, 0x77,
	0x12, 0x5c, 0x0a, 0x18, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x44, 0x6f, 0x63, 0x66, 0x6c, 0x6f, 0x77, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x72, 0x72,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x44, 0x6f, 0x63,
	0x66, 0x6c, 0x6f, 0x77, 0x52, 0x18, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x44, 0x6f, 0x63, 0x66, 0x6c, 0x6f, 0x77, 0x12, 0x40,
	0x0a, 0x15, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x15, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x12, 0x32, 0x0a, 0x14, 0x49, 0x73, 0x41, 0x6d, 0x65, 0x6e, 0x64, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14,
	0x49, 0x73, 0x41, 0x6d, 0x65, 0x6e, 0x64, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x65, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x73, 0x52, 0x65, 0x76, 0x69, 0x73, 0x65,
	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x49, 0x73, 0x52, 0x65, 0x76, 0x69, 0x73,
	0x65, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x49, 0x73, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x49, 0x73, 0x43, 0x6f, 0x72, 0x72, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x22, 0xce, 0x01, 0x0a, 0x1c, 0x49, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64,
	0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x44, 0x6f,
	0x63, 0x66, 0x6c, 0x6f, 0x77, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x73, 0x46, 0x69, 0x6e, 0x69, 0x73,
	0x68, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x49, 0x73, 0x46, 0x69, 0x6e,
	0x69, 0x73, 0x68, 0x65, 0x64, 0x12, 0x3f, 0x0a, 0x11, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74,
	0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x11, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x41, 0x74, 0x74, 0x61,
	0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x4d, 0x0a, 0x13, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x6f, 0x63, 0x66, 0x6c, 0x6f, 0x77, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x6f, 0x63, 0x66, 0x6c, 0x6f, 0x77,
	0x52, 0x13, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x6f,
	0x63, 0x66, 0x6c, 0x6f, 0x77, 0x22, 0xbc, 0x08, 0x0a, 0x27, 0x49, 0x6e, 0x62, 0x6f, 0x75, 0x6e,
	0x64, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x61, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x6f, 0x63, 0x66, 0x6c, 0x6f,
	0x77, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x73, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x49, 0x73, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65,
	0x64, 0x12, 0x45, 0x0a, 0x0e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x44, 0x6f, 0x63, 0x66,
	0x6c, 0x6f, 0x77, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x49, 0x6e, 0x62, 0x6f,
	0x75, 0x6e, 0x64, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70,
	0x74, 0x44, 0x6f, 0x63, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x0e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70,
	0x74, 0x44, 0x6f, 0x63, 0x66, 0x6c, 0x6f, 0x77, 0x12, 0x4d, 0x0a, 0x13, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x6f, 0x63, 0x66, 0x6c, 0x6f, 0x77, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x6f, 0x63, 0x66, 0x6c,
	0x6f, 0x77, 0x52, 0x13, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x6f, 0x63, 0x66, 0x6c, 0x6f, 0x77, 0x12, 0x5c, 0x0a, 0x18, 0x43, 0x6f, 0x72, 0x72, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x44, 0x6f, 0x63, 0x66,
	0x6c, 0x6f, 0x77, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x49, 0x6e, 0x76, 0x6f,
	0x69, 0x63, 0x65, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x44, 0x6f, 0x63, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x18, 0x43, 0x6f, 0x72,
	0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x44, 0x6f,
	0x63, 0x66, 0x6c, 0x6f, 0x77, 0x12, 0x40, 0x0a, 0x15, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x15, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x32, 0x0a, 0x14, 0x49, 0x73, 0x41, 0x6d, 0x65,
	0x6e, 0x64, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x49, 0x73, 0x41, 0x6d, 0x65, 0x6e, 0x64, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x49,
	0x73, 0x52, 0x65, 0x76, 0x69, 0x73, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09,
	0x49, 0x73, 0x52, 0x65, 0x76, 0x69, 0x73, 0x65, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x49, 0x73, 0x43,
	0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b,
	0x49, 0x73, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x40, 0x0a, 0x11, 0x42,
	0x75, 0x79, 0x65, 0x72, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x44, 0x6f, 0x63, 0x66, 0x6c, 0x6f, 0x77,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x42, 0x75, 0x79, 0x65, 0x72, 0x54, 0x69,
	0x74, 0x6c, 0x65, 0x44, 0x6f, 0x63, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x11, 0x42, 0x75, 0x79, 0x65,
	0x72, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x44, 0x6f, 0x63, 0x66, 0x6c, 0x6f, 0x77, 0x12, 0x73, 0x0a,
	0x22, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x6f, 0x63, 0x66,
	0x6c, 0x6f, 0x77, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x52, 0x65, 0x63, 0x69,
	0x70, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65,
	0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x6f, 0x63, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x22,
	0x52, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x6f, 0x63, 0x66, 0x6c,
	0x6f, 0x77, 0x12, 0x2e, 0x0a, 0x12, 0x49, 0x73, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12,
	0x49, 0x73, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x65, 0x64, 0x12, 0x44, 0x0a, 0x1d, 0x49, 0x73, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e,
	0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1d, 0x49, 0x73, 0x52, 0x65, 0x63,
	0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x12, 0x40, 0x0a, 0x1b, 0x49, 0x73, 0x44, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x42, 0x79, 0x52, 0x65,
	0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1b, 0x49,
	0x73, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x42,
	0x79, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x44, 0x0a, 0x1d, 0x49, 0x73,
	0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x42, 0x79, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x1d, 0x49, 0x73, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x6a,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x42, 0x79, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74,
	0x12, 0x36, 0x0a, 0x16, 0x43, 0x61, 0x6e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x42,
	0x65, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x65, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x16, 0x43, 0x61, 0x6e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x65, 0x52,
	0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x65, 0x64, 0x12, 0x5a, 0x0a, 0x28, 0x43, 0x61, 0x6e, 0x44,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x4f,
	0x72, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x42, 0x79, 0x52, 0x65, 0x63, 0x69, 0x70,
	0x69, 0x65, 0x6e, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x28, 0x43, 0x61, 0x6e, 0x44,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x4f,
	0x72, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x42, 0x79, 0x52, 0x65, 0x63, 0x69, 0x70,
	0x69, 0x65, 0x6e, 0x74, 0x22, 0xf1, 0x08, 0x0a, 0x28, 0x4f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e,
	0x64, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x61, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x6f, 0x63, 0x66, 0x6c, 0x6f,
	0x77, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x73, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x49, 0x73, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65,
	0x64, 0x12, 0x37, 0x0a, 0x0e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x44, 0x6f, 0x63, 0x66,
	0x6c, 0x6f, 0x77, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x52, 0x65, 0x63, 0x65,
	0x69, 0x70, 0x74, 0x44, 0x6f, 0x63, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x0e, 0x52, 0x65, 0x63, 0x65,
	0x69, 0x70, 0x74, 0x44, 0x6f, 0x63, 0x66, 0x6c, 0x6f, 0x77, 0x12, 0x4d, 0x0a, 0x13, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x6f, 0x63, 0x66, 0x6c, 0x6f,
	0x77, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x6f, 0x63,
	0x66, 0x6c, 0x6f, 0x77, 0x52, 0x13, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x6f, 0x63, 0x66, 0x6c, 0x6f, 0x77, 0x12, 0x5c, 0x0a, 0x18, 0x43, 0x6f, 0x72,
	0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x44, 0x6f,
	0x63, 0x66, 0x6c, 0x6f, 0x77, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x49, 0x6e,
	0x76, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x44, 0x6f, 0x63, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x18, 0x43,
	0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x44, 0x6f, 0x63, 0x66, 0x6c, 0x6f, 0x77, 0x12, 0x40, 0x0a, 0x15, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x15, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x32, 0x0a, 0x14, 0x49, 0x73, 0x41,
	0x6d, 0x65, 0x6e, 0x64, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x49, 0x73, 0x41, 0x6d, 0x65, 0x6e, 0x64,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x12, 0x1c, 0x0a,
	0x09, 0x49, 0x73, 0x52, 0x65, 0x76, 0x69, 0x73, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x09, 0x49, 0x73, 0x52, 0x65, 0x76, 0x69, 0x73, 0x65, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x49,
	0x73, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0b, 0x49, 0x73, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x40, 0x0a,
	0x1b, 0x43, 0x61, 0x6e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x65, 0x53, 0x69,
	0x67, 0x6e, 0x65, 0x64, 0x42, 0x79, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x1b, 0x43, 0x61, 0x6e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x42,
	0x65, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x42, 0x79, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12,
	0x40, 0x0a, 0x11, 0x42, 0x75, 0x79, 0x65, 0x72, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x44, 0x6f, 0x63,
	0x66, 0x6c, 0x6f, 0x77, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x42, 0x75, 0x79,
	0x65, 0x72, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x44, 0x6f, 0x63, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x11,
	0x42, 0x75, 0x79, 0x65, 0x72, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x44, 0x6f, 0x63, 0x66, 0x6c, 0x6f,
	0x77, 0x12, 0x73, 0x0a, 0x22, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x6f, 0x63, 0x66, 0x6c, 0x6f, 0x77, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x52, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x6f, 0x63, 0x66, 0x6c,
	0x6f, 0x77, 0x52, 0x22, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x6f, 0x63, 0x66, 0x6c, 0x6f, 0x77, 0x12, 0x2e, 0x0a, 0x12, 0x49, 0x73, 0x52, 0x65, 0x63, 0x65,
	0x69, 0x70, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x12, 0x49, 0x73, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x12, 0x44, 0x0a, 0x1d, 0x49, 0x73, 0x52, 0x65, 0x63, 0x69,
	0x70, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1d, 0x49,
	0x73, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x12, 0x40, 0x0a, 0x1b,
	0x49, 0x73, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64,
	0x42, 0x79, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x1b, 0x49, 0x73, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x67,
	0x6e, 0x65, 0x64, 0x42, 0x79, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x44,
	0x0a, 0x1d, 0x49, 0x73, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x6a, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x42, 0x79, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1d, 0x49, 0x73, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x42, 0x79, 0x52, 0x65, 0x63, 0x69, 0x70,
	0x69, 0x65, 0x6e, 0x74, 0x12, 0x36, 0x0a, 0x16, 0x43, 0x61, 0x6e, 0x44, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x42, 0x65, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x65, 0x64, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x43, 0x61, 0x6e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x42, 0x65, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x65, 0x64, 0x12, 0x5a, 0x0a, 0x28,
	0x43, 0x61, 0x6e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x65, 0x53, 0x69, 0x67,
	0x6e, 0x65, 0x64, 0x4f, 0x72, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x42, 0x79, 0x52,
	0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x28,
	0x43, 0x61, 0x6e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x65, 0x53, 0x69, 0x67,
	0x6e, 0x65, 0x64, 0x4f, 0x72, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x42, 0x79, 0x52,
	0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x22, 0x8f, 0x01, 0x0a, 0x0d, 0x44, 0x6f, 0x63,
	0x66, 0x6c, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3c, 0x0a, 0x0d, 0x50, 0x72,
	0x69, 0x6d, 0x61, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x44, 0x6f, 0x63, 0x66, 0x6c, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x4f, 0x6c, 0x64, 0x52, 0x0d, 0x50, 0x72, 0x69, 0x6d, 0x61,
	0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x40, 0x0a, 0x0f, 0x53, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x61, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x44, 0x6f, 0x63, 0x66, 0x6c, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x4f, 0x6c, 0x64, 0x52, 0x0f, 0x53, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x61, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xbe, 0x01, 0x0a, 0x15, 0x44,
	0x6f, 0x63, 0x66, 0x6c, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x4f, 0x6c, 0x64, 0x12, 0x65, 0x0a, 0x08, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x44, 0x6f, 0x63, 0x66, 0x6c, 0x6f, 0x77,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x3a, 0x31,
	0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x44, 0x6f, 0x63, 0x66, 0x6c, 0x6f, 0x77, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x44, 0x6f, 0x63, 0x66,
	0x6c, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74,
	0x79, 0x52, 0x08, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x65, 0x78, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x48, 0x69, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x48, 0x69, 0x6e, 0x74, 0x22, 0x8c, 0x01, 0x0a, 0x10,
	0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x2b, 0x0a, 0x0a, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x0a, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x28, 0x0a,
	0x09, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0a, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x09, 0x53, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x21, 0x0a, 0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x52, 0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0xe6, 0x01, 0x0a, 0x09, 0x53,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x1f, 0x0a, 0x06, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x52, 0x06, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x53, 0x69, 0x67,
	0x6e, 0x65, 0x72, 0x42, 0x6f, 0x78, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x53, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x42, 0x6f, 0x78, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x12, 0x53,
	0x69, 0x67, 0x6e, 0x65, 0x72, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x44,
	0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x49,
	0x73, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x49, 0x73,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x4c, 0x0a, 0x12, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x56, 0x65, 0x72,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52,
	0x12, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x22, 0xb8, 0x07, 0x0a, 0x28, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x61,
	0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x29, 0x0a, 0x08, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x08, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x44,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x22, 0x0a, 0x0c, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x65, 0x18,
	0x03, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0c, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0e, 0x44, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x31, 0x0a, 0x06, 0x53,
	0x65, 0x6c, 0x6c, 0x65, 0x72, 0x18, 0x05, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x2f,
	0x0a, 0x05, 0x42, 0x75, 0x79, 0x65, 0x72, 0x18, 0x06, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x42, 0x75, 0x79, 0x65, 0x72, 0x12,
	0x22, 0x0a, 0x07, 0x53, 0x68, 0x69, 0x70, 0x70, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x08, 0x2e, 0x53, 0x68, 0x69, 0x70, 0x70, 0x65, 0x72, 0x52, 0x07, 0x53, 0x68, 0x69, 0x70,
	0x70, 0x65, 0x72, 0x12, 0x37, 0x0a, 0x09, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65,
	0x64, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x09, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x65, 0x12, 0x29, 0x0a, 0x07,
	0x53, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x52, 0x07,
	0x53, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x73, 0x12, 0x40, 0x0a, 0x10, 0x50, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x10, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x31, 0x0a, 0x0c, 0x49, 0x6e, 0x76,
	0x6f, 0x69, 0x63, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x0c,
	0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x0c, 0x20, 0x02, 0x28, 0x09, 0x52, 0x08,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x52, 0x61, 0x74, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x61, 0x74, 0x65, 0x12, 0x22, 0x0a, 0x0c,
	0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65,
	0x12, 0x26, 0x0a, 0x0e, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x3d, 0x0a, 0x10, 0x41, 0x64, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x49, 0x64, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49,
	0x6e, 0x66, 0x6f, 0x49, 0x64, 0x52, 0x10, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x0c, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x28, 0x0a, 0x0f, 0x44, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x12, 0x20,
	0x02, 0x28, 0x09, 0x52, 0x0f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x6f, 0x72, 0x12, 0x30, 0x0a, 0x13, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x42, 0x61, 0x73, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x13, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x6f, 0x72, 0x42, 0x61, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x16, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x61,
	0x0a, 0x13, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x22, 0x0a, 0x0c, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x44, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0c, 0x44, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x44, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x02, 0x28,
	0x09, 0x52, 0x0e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x22, 0x96, 0x02, 0x0a, 0x0e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x53, 0x69,
	0x67, 0x6e, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x42, 0x6f, 0x78, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x42, 0x6f, 0x78, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x11, 0x53, 0x69,
	0x67, 0x6e, 0x65, 0x72, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x11, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x43, 0x65, 0x72,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x40, 0x0a, 0x1b, 0x53, 0x69, 0x67, 0x6e,
	0x65, 0x72, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x54, 0x68, 0x75,
	0x6d, 0x62, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1b, 0x53,
	0x69, 0x67, 0x6e, 0x65, 0x72, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x54, 0x68, 0x75, 0x6d, 0x62, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x12, 0x3c, 0x0a, 0x0d, 0x53, 0x69,
	0x67, 0x6e, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e,
	0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x0d, 0x53, 0x69, 0x67, 0x6e, 0x65,
	0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x40, 0x0a, 0x0f, 0x50, 0x6f, 0x77, 0x65,
	0x72, 0x4f, 0x66, 0x41, 0x74, 0x74, 0x6f, 0x72, 0x6e, 0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x4f, 0x66, 0x41, 0x74, 0x74, 0x6f, 0x72,
	0x6e, 0x65, 0x79, 0x54, 0x6f, 0x50, 0x6f, 0x73, 0x74, 0x52, 0x0f, 0x50, 0x6f, 0x77, 0x65, 0x72,
	0x4f, 0x66, 0x41, 0x74, 0x74, 0x6f, 0x72, 0x6e, 0x65, 0x79, 0x22, 0xb7, 0x04, 0x0a, 0x15, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x07, 0x53, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x46, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28,
	0x09, 0x52, 0x09, 0x46, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x50, 0x61, 0x74, 0x72, 0x6f, 0x6e, 0x79, 0x6d, 0x69, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x50, 0x61, 0x74, 0x72, 0x6f, 0x6e, 0x79, 0x6d, 0x69, 0x63, 0x12, 0x1a, 0x0a, 0x08,
	0x4a, 0x6f, 0x62, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x4a, 0x6f, 0x62, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x49, 0x6e, 0x6e, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x49, 0x6e, 0x6e, 0x12, 0x38, 0x0a, 0x17, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x12, 0x42, 0x0a, 0x0a, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x07, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x0b, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x15, 0x4c, 0x65, 0x67, 0x61, 0x6c, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x53, 0x69,
	0x67, 0x6e, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x36, 0x0a, 0x16, 0x53, 0x69, 0x67, 0x6e,
	0x65, 0x72, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x72,
	0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x31, 0x0a, 0x0c, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x73,
	0x18, 0x0a, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x50,
	0x6f, 0x77, 0x65, 0x72, 0x73, 0x52, 0x0c, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x50, 0x6f, 0x77,
	0x65, 0x72, 0x73, 0x12, 0x31, 0x0a, 0x0c, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x0b, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x53, 0x69, 0x67, 0x6e,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0c, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x72,
	0x50, 0x6f, 0x77, 0x65, 0x72, 0x73, 0x42, 0x61, 0x73, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x73, 0x42, 0x61,
	0x73, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x4f, 0x72, 0x67, 0x50,
	0x6f, 0x77, 0x65, 0x72, 0x73, 0x42, 0x61, 0x73, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x13, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x4f, 0x72, 0x67, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x73,
	0x42, 0x61, 0x73, 0x65, 0x22, 0x84, 0x03, 0x0a, 0x1b, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65,
	0x64, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x54, 0x6f,
	0x50, 0x6f, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x4a, 0x6f, 0x62, 0x54, 0x69, 0x74, 0x6c, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4a, 0x6f, 0x62, 0x54, 0x69, 0x74, 0x6c, 0x65,
	0x12, 0x38, 0x0a, 0x17, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x17, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x2b, 0x0a, 0x0a, 0x53, 0x69,
	0x67, 0x6e, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x0b,
	0x2e, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x53, 0x69, 0x67,
	0x6e, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x69, 0x67, 0x6e, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x53, 0x69, 0x67,
	0x6e, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x31, 0x0a, 0x0c, 0x53, 0x69, 0x67, 0x6e, 0x65,
	0x72, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x0d, 0x2e,
	0x53, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x73, 0x52, 0x0c, 0x53, 0x69,
	0x67, 0x6e, 0x65, 0x72, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x73, 0x12, 0x31, 0x0a, 0x0c, 0x53, 0x69,
	0x67, 0x6e, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x02, 0x28, 0x0e,
	0x32, 0x0d, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x0c, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2a, 0x0a,
	0x10, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x73, 0x42, 0x61, 0x73,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x50,
	0x6f, 0x77, 0x65, 0x72, 0x73, 0x42, 0x61, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x53, 0x69, 0x67,
	0x6e, 0x65, 0x72, 0x4f, 0x72, 0x67, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x73, 0x42, 0x61, 0x73, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x4f, 0x72,
	0x67, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x73, 0x42, 0x61, 0x73, 0x65, 0x22, 0x62, 0x0a, 0x07, 0x53,
	0x68, 0x69, 0x70, 0x70, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x53, 0x61, 0x6d, 0x65, 0x41, 0x73,
	0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x53, 0x61,
	0x6d, 0x65, 0x41, 0x73, 0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x33, 0x0a, 0x07, 0x4f, 0x72,
	0x67, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x4f, 0x72, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x22,
	0xb2, 0x01, 0x0a, 0x0c, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x12, 0x2a, 0x0a, 0x05, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63,
	0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x32, 0x0a, 0x14,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x57, 0x69, 0x74, 0x68, 0x56, 0x61, 0x74, 0x45, 0x78, 0x63, 0x6c,
	0x75, 0x64, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x57, 0x69, 0x74, 0x68, 0x56, 0x61, 0x74, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64,
	0x12, 0x10, 0x0a, 0x03, 0x56, 0x61, 0x74, 0x18, 0x03, 0x20, 0x02, 0x28, 0x09, 0x52, 0x03, 0x56,
	0x61, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x02, 0x28,
	0x09, 0x52, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x4e, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x4e, 0x65, 0x74, 0x22, 0xb4, 0x05, 0x0a, 0x13, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65,
	0x64, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x18, 0x0a, 0x07,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x07, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x55, 0x6e, 0x69, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x55, 0x6e,
	0x69, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x55, 0x6e,
	0x69, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x45, 0x78, 0x63, 0x69,
	0x73, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x45, 0x78, 0x63, 0x69, 0x73, 0x65,
	0x12, 0x22, 0x0a, 0x07, 0x54, 0x61, 0x78, 0x52, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x02, 0x28,
	0x0e, 0x32, 0x08, 0x2e, 0x54, 0x61, 0x78, 0x52, 0x61, 0x74, 0x65, 0x52, 0x07, 0x54, 0x61, 0x78,
	0x52, 0x61, 0x74, 0x65, 0x12, 0x38, 0x0a, 0x17, 0x53, 0x75, 0x62, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x57, 0x69, 0x74, 0x68, 0x56, 0x61, 0x74, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x53, 0x75, 0x62, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x57,
	0x69, 0x74, 0x68, 0x56, 0x61, 0x74, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x12, 0x10,
	0x0a, 0x03, 0x56, 0x61, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x56, 0x61, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x53, 0x75, 0x62, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x0a, 0x20, 0x02,
	0x28, 0x09, 0x52, 0x08, 0x53, 0x75, 0x62, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x45, 0x0a, 0x13,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x73, 0x44, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x43, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x73, 0x44, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x13,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x73, 0x44, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x25, 0x0a, 0x08, 0x49, 0x74, 0x65, 0x6d, 0x4d, 0x61, 0x72, 0x6b, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x09, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x4d, 0x61, 0x72, 0x6b,
	0x52, 0x08, 0x49, 0x74, 0x65, 0x6d, 0x4d, 0x61, 0x72, 0x6b, 0x12, 0x2e, 0x0a, 0x12, 0x41, 0x64,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x12, 0x26, 0x0a, 0x0e, 0x49, 0x74,
	0x65, 0x6d, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x49, 0x74, 0x65, 0x6d, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x6f, 0x52, 0x65, 0x6c, 0x65,
	0x61, 0x73, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x49, 0x74, 0x65, 0x6d, 0x54,
	0x6f, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x49, 0x74, 0x65, 0x6d,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x65, 0x62, 0x69, 0x74, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x49, 0x74, 0x65, 0x6d, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x44,
	0x65, 0x62, 0x69, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x49, 0x74, 0x65, 0x6d, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x11, 0x49, 0x74, 0x65, 0x6d, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x72, 0x65, 0x64,
	0x69, 0x74, 0x12, 0x37, 0x0a, 0x0e, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x49, 0x6e, 0x66, 0x6f, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x41, 0x64, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x41, 0x64, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x64, 0x0a, 0x12, 0x43,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x73, 0x44, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x44, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x11,
	0x44, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x22, 0xb7, 0x04, 0x0a, 0x0c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x24, 0x0a, 0x0d, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0d, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x24, 0x0a, 0x0d, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22,
	0x0a, 0x0c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x44, 0x61, 0x74, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x44, 0x61,
	0x74, 0x65, 0x12, 0x31, 0x0a, 0x0c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x42, 0x61,
	0x73, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x52, 0x0c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x42, 0x61, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x54, 0x65, 0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x54, 0x65, 0x78, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x22, 0x0a, 0x07, 0x57, 0x61, 0x79, 0x62, 0x69, 0x6c, 0x6c, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x08, 0x2e, 0x57, 0x61, 0x79, 0x62, 0x69, 0x6c, 0x6c, 0x52, 0x07, 0x57, 0x61,
	0x79, 0x62, 0x69, 0x6c, 0x6c, 0x12, 0x33, 0x0a, 0x07, 0x43, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65,
	0x64, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x07, 0x43, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x08, 0x45, 0x6d,
	0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x45,
	0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x4f, 0x6c, 0x64, 0x52, 0x08, 0x45, 0x6d, 0x70, 0x6c,
	0x6f, 0x79, 0x65, 0x65, 0x12, 0x2e, 0x0a, 0x0b, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x49, 0x73, 0x73,
	0x75, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x4f, 0x74, 0x68, 0x65,
	0x72, 0x49, 0x73, 0x73, 0x75, 0x65, 0x72, 0x52, 0x0b, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x49, 0x73,
	0x73, 0x75, 0x65, 0x72, 0x12, 0x3a, 0x0a, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x54,
	0x68, 0x69, 0x6e, 0x67, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x44, 0x61, 0x74, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x54,
	0x68, 0x69, 0x6e, 0x67, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x44, 0x61, 0x74, 0x65,
	0x12, 0x2a, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x68, 0x69, 0x6e, 0x67,
	0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x54, 0x68, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3d, 0x0a, 0x10,
	0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x49, 0x64,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x49, 0x64, 0x52, 0x10, 0x41, 0x64, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x49, 0x64, 0x22, 0xd8, 0x05, 0x0a, 0x18,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x42, 0x6f, 0x78, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x42, 0x6f, 0x78, 0x49, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x4f, 0x72, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x4f, 0x72, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x49, 0x6e, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x49, 0x6e, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x4b, 0x70,
	0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x4b, 0x70, 0x70, 0x12, 0x22, 0x0a, 0x07,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x2a, 0x0a, 0x10, 0x46, 0x6e, 0x73, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61,
	0x6e, 0x74, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x46, 0x6e, 0x73, 0x50,
	0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x07,
	0x4f, 0x72, 0x67, 0x54, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x08, 0x2e,
	0x4f, 0x72, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x4f, 0x72, 0x67, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x4f, 0x6b, 0x6f, 0x70, 0x66, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x4f, 0x6b, 0x6f, 0x70, 0x66, 0x12, 0x12, 0x0a, 0x04, 0x4f, 0x6b, 0x70, 0x6f, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4f, 0x6b, 0x70, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x4f, 0x6b,
	0x64, 0x70, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4f, 0x6b, 0x64, 0x70, 0x12, 0x14,
	0x0a, 0x05, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x50,
	0x68, 0x6f, 0x6e, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x32, 0x0a, 0x14, 0x43, 0x6f,
	0x72, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2c,
	0x0a, 0x11, 0x42, 0x61, 0x6e, 0x6b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x42, 0x61, 0x6e, 0x6b, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08,
	0x42, 0x61, 0x6e, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x42, 0x61, 0x6e, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x42, 0x61, 0x6e, 0x6b,
	0x49, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x42, 0x61, 0x6e, 0x6b, 0x49, 0x64,
	0x12, 0x1e, 0x0a, 0x0a, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x3e, 0x0a, 0x1a, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x1a, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x3a, 0x0a, 0x18, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4f, 0x72, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x18, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4f, 0x72, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x58, 0x0a, 0x27,
	0x49, 0x6e, 0x64, 0x69, 0x76, 0x69, 0x64, 0x75, 0x61, 0x6c, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x65, 0x72, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x27, 0x49,
	0x6e, 0x64, 0x69, 0x76, 0x69, 0x64, 0x75, 0x61, 0x6c, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x65, 0x72, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x22, 0xc2, 0x01, 0x0a, 0x0c, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x42, 0x61, 0x73, 0x65, 0x44,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x09, 0x52, 0x10, 0x42, 0x61, 0x73, 0x65, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x42, 0x61, 0x73, 0x65, 0x44, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x12, 0x42, 0x61, 0x73, 0x65, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x10, 0x42, 0x61, 0x73, 0x65, 0x44, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x42,
	0x61, 0x73, 0x65, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12,
	0x2a, 0x0a, 0x10, 0x42, 0x61, 0x73, 0x65, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x42, 0x61, 0x73, 0x65, 0x44,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x75, 0x0a, 0x07, 0x57,
	0x61, 0x79, 0x62, 0x69, 0x6c, 0x6c, 0x12, 0x36, 0x0a, 0x16, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x16, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x32,
	0x0a, 0x14, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x44, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x14, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61,
	0x74, 0x65, 0x22, 0x89, 0x02, 0x0a, 0x0b, 0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x4f,
	0x6c, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x50, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x10, 0x45, 0x6d,
	0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22,
	0x0a, 0x0c, 0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x22, 0x0a, 0x0c, 0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x42, 0x61,
	0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79,
	0x65, 0x65, 0x42, 0x61, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x53, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x02, 0x28, 0x09, 0x52,
	0x0f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x53, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x2c, 0x0a, 0x11, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x46, 0x69, 0x72, 0x73,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x02, 0x28, 0x09, 0x52, 0x11, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x46, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2e,
	0x0a, 0x12, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x50, 0x61, 0x74, 0x72, 0x6f, 0x6e,
	0x79, 0x6d, 0x69, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x50, 0x61, 0x74, 0x72, 0x6f, 0x6e, 0x79, 0x6d, 0x69, 0x63, 0x22, 0xb1,
	0x03, 0x0a, 0x0b, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x49, 0x73, 0x73, 0x75, 0x65, 0x72, 0x12, 0x3a,
	0x0a, 0x18, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79,
	0x65, 0x65, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x18, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79,
	0x65, 0x65, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x14, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3a,
	0x0a, 0x18, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x18, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x18, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x42, 0x61, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x42, 0x61, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x14, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x42, 0x61, 0x73, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x45, 0x6d,
	0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x42, 0x61, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x53, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20,
	0x02, 0x28, 0x09, 0x52, 0x0f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x53, 0x75, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x46, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x02, 0x28, 0x09, 0x52,
	0x11, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x46, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x50, 0x61,
	0x74, 0x72, 0x6f, 0x6e, 0x79, 0x6d, 0x69, 0x63, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x50, 0x61, 0x74, 0x72, 0x6f, 0x6e, 0x79, 0x6d,
	0x69, 0x63, 0x22, 0x6b, 0x0a, 0x10, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x49, 0x6e, 0x66, 0x6f, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x6e, 0x66, 0x6f, 0x46, 0x69,
	0x6c, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x49, 0x6e, 0x66, 0x6f,
	0x46, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x0e, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x0e, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x22,
	0x36, 0x0a, 0x0e, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x02, 0x49,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09,
	0x52, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x7f, 0x0a, 0x0c, 0x44, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0a, 0x54, 0x6f, 0x74,
	0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x09, 0x44, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x44, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x09, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x12, 0x26, 0x0a, 0x0e, 0x48, 0x61, 0x73, 0x4d, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x48, 0x61, 0x73, 0x4d, 0x6f, 0x72,
	0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x22, 0xf3, 0x01, 0x0a, 0x21, 0x47, 0x65, 0x74,
	0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28,
	0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x61, 0x73, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x52, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0d, 0x41, 0x66, 0x74, 0x65,
	0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x4b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x0d, 0x41, 0x66, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x4b, 0x65, 0x79, 0x12, 0x45,
	0x0a, 0x1a, 0x50, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72,
	0x64, 0x65, 0x64, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x1a, 0x50, 0x6f, 0x70, 0x75, 0x6c,
	0x61, 0x74, 0x65, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x44, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x37, 0x0a, 0x13, 0x49, 0x6e, 0x6a, 0x65, 0x63, 0x74, 0x45,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x13, 0x49, 0x6e, 0x6a, 0x65, 0x63,
	0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0xae,
	0x01, 0x0a, 0x22, 0x47, 0x65, 0x74, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x44,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0a, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2f, 0x0a, 0x06, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65,
	0x64, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x06,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x37, 0x0a, 0x0e, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x0f,
	0x2e, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x0e, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x22,
	0xe8, 0x01, 0x0a, 0x16, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x44, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x09, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0a, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x12, 0x46, 0x0a, 0x13, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65,
	0x64, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x44, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x52, 0x13, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64,
	0x65, 0x64, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x4b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0c, 0x52, 0x08,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x4b, 0x65, 0x79, 0x12, 0x40, 0x0a, 0x11, 0x46, 0x6f, 0x72, 0x77,
	0x61, 0x72, 0x64, 0x65, 0x64, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x44,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x11, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64,
	0x65, 0x64, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x53, 0x0a, 0x13, 0x52, 0x65,
	0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x3c, 0x0a, 0x10, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x6f, 0x75, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x52, 0x65,
	0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x10, 0x52,
	0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x22,
	0x3f, 0x0a, 0x0f, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x09, 0x52, 0x07, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65,
	0x22, 0xa1, 0x01, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65,
	0x64, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x48, 0x0a, 0x14, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x44, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x44, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x52, 0x14, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64,
	0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x12, 0x37, 0x0a, 0x13, 0x49,
	0x6e, 0x6a, 0x65, 0x63, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52,
	0x13, 0x49, 0x6e, 0x6a, 0x65, 0x63, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x22, 0x63, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x46, 0x6f, 0x72, 0x77, 0x61,
	0x72, 0x64, 0x65, 0x64, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x12, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64,
	0x65, 0x64, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x44, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x12, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64,
	0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x85, 0x01, 0x0a, 0x16, 0x44, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x4d, 0x6f, 0x76, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x42, 0x6f, 0x78, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x09, 0x52, 0x05, 0x42, 0x6f, 0x78, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x54, 0x6f,
	0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x54, 0x6f, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x2d, 0x0a, 0x0b, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x52, 0x0b, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x73, 0x22, 0xc9, 0x01, 0x0a, 0x0b, 0x44, 0x72, 0x61, 0x66, 0x74, 0x54, 0x6f, 0x53, 0x65, 0x6e,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x42, 0x6f, 0x78, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09,
	0x52, 0x05, 0x42, 0x6f, 0x78, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x44, 0x72, 0x61, 0x66, 0x74,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x07, 0x44, 0x72, 0x61, 0x66, 0x74, 0x49,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x54, 0x6f, 0x42, 0x6f, 0x78, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x54, 0x6f, 0x42, 0x6f, 0x78, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x54,
	0x6f, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x54, 0x6f, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x48, 0x0a, 0x12, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72,
	0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x12, 0x44, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x22, 0x8a, 0x02,
	0x0a, 0x17, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72,
	0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x50, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x09, 0x52, 0x0e, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49,
	0x64, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12,
	0x3b, 0x0a, 0x15, 0x53, 0x69, 0x67, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x54, 0x65, 0x73, 0x74, 0x53,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05,
	0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x15, 0x53, 0x69, 0x67, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x54,
	0x65, 0x73, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x2a, 0x0a, 0x10,
	0x50, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x50, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x40, 0x0a, 0x0f, 0x50, 0x6f, 0x77, 0x65,
	0x72, 0x4f, 0x66, 0x41, 0x74, 0x74, 0x6f, 0x72, 0x6e, 0x65, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x4f, 0x66, 0x41, 0x74, 0x74, 0x6f, 0x72,
	0x6e, 0x65, 0x79, 0x54, 0x6f, 0x50, 0x6f, 0x73, 0x74, 0x52, 0x0f, 0x50, 0x6f, 0x77, 0x65, 0x72,
	0x4f, 0x66, 0x41, 0x74, 0x74, 0x6f, 0x72, 0x6e, 0x65, 0x79, 0x22, 0x94, 0x04, 0x0a, 0x08, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x09, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x54, 0x69, 0x63, 0x6b, 0x73, 0x18, 0x02, 0x20, 0x02, 0x28, 0x10, 0x52, 0x0e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x54, 0x69, 0x63, 0x6b, 0x73, 0x12, 0x1c, 0x0a,
	0x09, 0x46, 0x72, 0x6f, 0x6d, 0x42, 0x6f, 0x78, 0x49, 0x64, 0x18, 0x03, 0x20, 0x02, 0x28, 0x09,
	0x52, 0x09, 0x46, 0x72, 0x6f, 0x6d, 0x42, 0x6f, 0x78, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x54,
	0x6f, 0x42, 0x6f, 0x78, 0x49, 0x64, 0x18, 0x04, 0x20, 0x02, 0x28, 0x09, 0x52, 0x07, 0x54, 0x6f,
	0x42, 0x6f, 0x78, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x46, 0x72, 0x6f, 0x6d, 0x42, 0x6f, 0x78, 0x49, 0x64, 0x18, 0x05, 0x20, 0x02, 0x28, 0x09, 0x52,
	0x10, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x42, 0x6f, 0x78, 0x49,
	0x64, 0x12, 0x26, 0x0a, 0x0e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x42, 0x6f,
	0x78, 0x49, 0x64, 0x18, 0x06, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0e, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x54, 0x6f, 0x42, 0x6f, 0x78, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x08, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x52, 0x08, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x23,
	0x0a, 0x09, 0x49, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x09, 0x49, 0x73, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x64, 0x12, 0x34, 0x0a, 0x15, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x6f,
	0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x15, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x44, 0x65, 0x70,
	0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x08, 0x4c, 0x6f, 0x63,
	0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x0a, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x09, 0x2e, 0x4c, 0x6f,
	0x63, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x4c, 0x6f, 0x63, 0x6b, 0x4d, 0x6f, 0x64, 0x65,
	0x12, 0x2c, 0x0a, 0x11, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x78, 0x79,
	0x42, 0x6f, 0x78, 0x49, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x42, 0x6f, 0x78, 0x49, 0x64, 0x12, 0x3a,
	0x0a, 0x18, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x44, 0x65,
	0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x18, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x44, 0x65,
	0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0a, 0x49, 0x73,
	0x52, 0x65, 0x75, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05,
	0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x0a, 0x49, 0x73, 0x52, 0x65, 0x75, 0x73, 0x61, 0x62, 0x6c,
	0x65, 0x22, 0xb3, 0x04, 0x0a, 0x0e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x54, 0x6f,
	0x50, 0x6f, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x46, 0x72, 0x6f, 0x6d, 0x42, 0x6f, 0x78, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x09, 0x46, 0x72, 0x6f, 0x6d, 0x42, 0x6f, 0x78,
	0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x54, 0x6f, 0x42, 0x6f, 0x78, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x02, 0x28, 0x09, 0x52, 0x07, 0x54, 0x6f, 0x42, 0x6f, 0x78, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x10,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x42, 0x6f, 0x78, 0x49, 0x64,
	0x18, 0x03, 0x20, 0x02, 0x28, 0x09, 0x52, 0x10, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x46,
	0x72, 0x6f, 0x6d, 0x42, 0x6f, 0x78, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x54, 0x6f, 0x42, 0x6f, 0x78, 0x49, 0x64, 0x18, 0x04, 0x20, 0x02, 0x28, 0x09,
	0x52, 0x0e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x42, 0x6f, 0x78, 0x49, 0x64,
	0x12, 0x34, 0x0a, 0x15, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x44, 0x65, 0x70,
	0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x15, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74,
	0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x4d, 0x0a, 0x13, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x44, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x13, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x2b, 0x0a, 0x08, 0x4c, 0x6f, 0x63, 0x6b, 0x4d, 0x6f, 0x64,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x09, 0x2e, 0x4c, 0x6f, 0x63, 0x6b, 0x4d, 0x6f,
	0x64, 0x65, 0x3a, 0x04, 0x4e, 0x6f, 0x6e, 0x65, 0x52, 0x08, 0x4c, 0x6f, 0x63, 0x6b, 0x4d, 0x6f,
	0x64, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x46, 0x72, 0x6f, 0x6d, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74,
	0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x46, 0x72,
	0x6f, 0x6d, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x26,
	0x0a, 0x0e, 0x54, 0x6f, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x54, 0x6f, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74,
	0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x11, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x42, 0x6f, 0x78, 0x49, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x11, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x42,
	0x6f, 0x78, 0x49, 0x64, 0x12, 0x3a, 0x0a, 0x18, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x50,
	0x72, 0x6f, 0x78, 0x79, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x50,
	0x72, 0x6f, 0x78, 0x79, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x25, 0x0a, 0x0a, 0x49, 0x73, 0x52, 0x65, 0x75, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x0a, 0x49, 0x73, 0x52,
	0x65, 0x75, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x22, 0xe5, 0x04, 0x0a, 0x1a, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x74, 0x74, 0x61,
	0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x3a, 0x0a, 0x0f, 0x55, 0x6e, 0x73, 0x69, 0x67, 0x6e,
	0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x55, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x52, 0x0f, 0x55, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b,
	0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x49, 0x64, 0x18, 0x03, 0x20, 0x02, 0x28,
	0x09, 0x52, 0x0b, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x49, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x08, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x08, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x1e, 0x0a, 0x0a, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0a, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x12,
	0x2a, 0x0a, 0x10, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x43, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x45,
	0x64, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x45, 0x64, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x12, 0x3d, 0x0a, 0x16, 0x4e, 0x65, 0x65, 0x64, 0x52,
	0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x16,
	0x4e, 0x65, 0x65, 0x64, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x55, 0x0a, 0x18, 0x50, 0x72, 0x65, 0x64, 0x65, 0x66,
	0x69, 0x6e, 0x65, 0x64, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x74,
	0x6c, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x50, 0x72, 0x65, 0x64, 0x65,
	0x66, 0x69, 0x6e, 0x65, 0x64, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x69,
	0x74, 0x6c, 0x65, 0x52, 0x18, 0x50, 0x72, 0x65, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x52,
	0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x2f, 0x0a,
	0x0f, 0x52, 0x65, 0x66, 0x75, 0x73, 0x61, 0x6c, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x0f, 0x52,
	0x65, 0x66, 0x75, 0x73, 0x61, 0x6c, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x2f,
	0x0a, 0x0a, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x18, 0x0d, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x49,
	0x74, 0x65, 0x6d, 0x52, 0x0a, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x22,
	0x56, 0x0a, 0x18, 0x50, 0x72, 0x65, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x52, 0x65, 0x63,
	0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x3a, 0x0a, 0x0f, 0x55,
	0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x55, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x0f, 0x55, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x4d, 0x0a, 0x13, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x50, 0x61, 0x74, 0x63, 0x68, 0x54, 0x6f, 0x50, 0x6f, 0x73, 0x74, 0x12, 0x36,
	0x0a, 0x08, 0x52, 0x65, 0x66, 0x75, 0x73, 0x61, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x66, 0x75, 0x73,
	0x61, 0x6c, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x08, 0x52, 0x65,
	0x66, 0x75, 0x73, 0x61, 0x6c, 0x73, 0x22, 0x6d, 0x0a, 0x19, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x66, 0x75, 0x73, 0x61, 0x6c, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0a, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x22, 0xa7, 0x01, 0x0a, 0x1c, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x6f, 0x50, 0x6f, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x42, 0x6f, 0x78, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x05, 0x42, 0x6f, 0x78, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09,
	0x52, 0x0a, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x64, 0x12, 0x51, 0x0a, 0x17,
	0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x17, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22,
	0x64, 0x0a, 0x16, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x44, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0a, 0x44,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x43, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x44, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x2a, 0xa9, 0x01, 0x0a, 0x12, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x72, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x19,
	0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x49,
	0x73, 0x4d, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x10,
	0x01, 0x12, 0x0d, 0x0a, 0x09, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x4d, 0x65, 0x10, 0x02,
	0x12, 0x11, 0x0a, 0x0d, 0x49, 0x73, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x64, 0x42, 0x79, 0x4d,
	0x65, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x4d, 0x65,
	0x10, 0x05, 0x12, 0x12, 0x0a, 0x0e, 0x49, 0x73, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x42, 0x79, 0x4d, 0x65, 0x10, 0x06, 0x12, 0x19, 0x0a, 0x15, 0x4e, 0x6f, 0x74, 0x49, 0x6e, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x10,
	0x07, 0x2a, 0x49, 0x0a, 0x0e, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x71, 0x75,
	0x61, 0x6c, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x47, 0x72, 0x65, 0x61, 0x74, 0x65, 0x72, 0x54,
	0x68, 0x61, 0x6e, 0x4f, 0x72, 0x45, 0x71, 0x75, 0x61, 0x6c, 0x10, 0x02, 0x2a, 0x9e, 0x01, 0x0a,
	0x13, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x12, 0x27, 0x0a, 0x1a, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x44,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x10, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x12, 0x0a,
	0x0e, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x6e, 0x6c, 0x79, 0x10,
	0x00, 0x12, 0x1f, 0x0a, 0x1b, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x41,
	0x6e, 0x64, 0x53, 0x75, 0x62, 0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x41, 0x6c, 0x6c, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x10, 0x03, 0x2a, 0x49, 0x0a,
	0x0f, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x0b, 0x0a, 0x07, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x09, 0x0a,
	0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x44, 0x73, 0x73, 0x10,
	0x02, 0x12, 0x15, 0x0a, 0x11, 0x4b, 0x6f, 0x6e, 0x74, 0x75, 0x72, 0x43, 0x65, 0x72, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x10, 0x03, 0x2a, 0x76, 0x0a, 0x16, 0x43, 0x65, 0x72, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x21, 0x0a, 0x1d, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x43, 0x65, 0x72,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x4c, 0x65, 0x67, 0x61, 0x6c, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x49, 0x6e, 0x64, 0x69, 0x76, 0x69,
	0x64, 0x75, 0x61, 0x6c, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e,
	0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x10, 0x03,
	0x2a, 0x4e, 0x0a, 0x08, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x12, 0x13, 0x0a, 0x0f,
	0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x10,
	0x00, 0x12, 0x08, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x53,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x57, 0x61, 0x72, 0x6e,
	0x69, 0x6e, 0x67, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x04,
	0x2a, 0x84, 0x01, 0x0a, 0x26, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x4f, 0x66, 0x41, 0x74, 0x74, 0x6f,
	0x72, 0x6e, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x49, 0x64, 0x12, 0x11, 0x0a, 0x0d, 0x55,
	0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x10, 0x00, 0x12, 0x15,
	0x0a, 0x11, 0x43, 0x61, 0x6e, 0x4e, 0x6f, 0x74, 0x42, 0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x73, 0x56, 0x61, 0x6c, 0x69, 0x64,
	0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x49, 0x73, 0x4e, 0x6f, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64,
	0x10, 0x03, 0x12, 0x13, 0x0a, 0x0f, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x04, 0x2a, 0x3a, 0x0a, 0x0b, 0x53, 0x6f, 0x63, 0x69, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x14, 0x0a, 0x10, 0x41, 0x6c, 0x6c, 0x4f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x4f, 0x6e, 0x6c,
	0x79, 0x10, 0x01, 0x2a, 0x38, 0x0a, 0x20, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x09, 0x0a, 0x05, 0x76, 0x35, 0x5f, 0x30, 0x31,
	0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x76, 0x35, 0x5f, 0x30, 0x32, 0x10, 0x02, 0x2a, 0x28, 0x0a,
	0x08, 0x4c, 0x6f, 0x63, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x6f, 0x6e,
	0x65, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x53, 0x65, 0x6e, 0x64, 0x10, 0x02, 0x12, 0x08, 0x0a,
	0x04, 0x46, 0x75, 0x6c, 0x6c, 0x10, 0x03, 0x2a, 0x47, 0x0a, 0x0b, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77,
	0x6e, 0x4d, 0x54, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x4c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x4d,
	0x54, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x72, 0x61, 0x66, 0x74, 0x4d, 0x54, 0x10, 0x02,
	0x12, 0x0e, 0x0a, 0x0a, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x4d, 0x54, 0x10, 0x03,
	0x2a, 0x4a, 0x0a, 0x0a, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x15,
	0x0a, 0x11, 0x54, 0x79, 0x70, 0x65, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x54, 0x79, 0x70, 0x65, 0x41, 0x74, 0x74,
	0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x54, 0x79, 0x70,
	0x65, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x10, 0x02, 0x2a, 0xdd, 0x0c, 0x0a,
	0x0e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x22, 0x0a, 0x15, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68,
	0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x10, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x4e, 0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6c,
	0x69, 0x7a, 0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x49, 0x6e,
	0x76, 0x6f, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x49,
	0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x10, 0x02, 0x12, 0x1b, 0x0a, 0x17, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x10, 0x03,
	0x12, 0x20, 0x0a, 0x1c, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x72, 0x72, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x10, 0x04, 0x12, 0x19, 0x0a, 0x15, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74,
	0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x10, 0x05, 0x12, 0x23, 0x0a,
	0x1f, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x10, 0x06, 0x12, 0x21, 0x0a, 0x1d, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x10, 0x08, 0x12, 0x23, 0x0a, 0x1f, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x10, 0x0a, 0x12, 0x1e, 0x0a, 0x1a, 0x54, 0x72,
	0x75, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x10, 0x0b, 0x12, 0x0e, 0x0a, 0x0a, 0x54, 0x6f,
	0x72, 0x67, 0x31, 0x32, 0x54, 0x79, 0x70, 0x65, 0x10, 0x0c, 0x12, 0x17, 0x0a, 0x13, 0x49, 0x6e,
	0x76, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x10, 0x0d, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x6f,
	0x72, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x10, 0x0e, 0x12, 0x21,
	0x0a, 0x1d, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x10,
	0x0f, 0x12, 0x1d, 0x0a, 0x19, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43,
	0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x10, 0x10,
	0x12, 0x16, 0x0a, 0x12, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x64, 0x44, 0x61,
	0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x10, 0x11, 0x12, 0x17, 0x0a, 0x13, 0x50, 0x72, 0x6f, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x10,
	0x12, 0x12, 0x11, 0x0a, 0x0d, 0x58, 0x6d, 0x6c, 0x54, 0x6f, 0x72, 0x67, 0x31, 0x32, 0x54, 0x79,
	0x70, 0x65, 0x10, 0x13, 0x12, 0x20, 0x0a, 0x1c, 0x58, 0x6d, 0x6c, 0x41, 0x63, 0x63, 0x65, 0x70,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x10, 0x14, 0x12, 0x1b, 0x0a, 0x17, 0x58, 0x6d, 0x6c, 0x54, 0x6f, 0x72,
	0x67, 0x31, 0x32, 0x42, 0x75, 0x79, 0x65, 0x72, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x10, 0x15, 0x12, 0x2a, 0x0a, 0x26, 0x58, 0x6d, 0x6c, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x42,
	0x75, 0x79, 0x65, 0x72, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x10, 0x16, 0x12,
	0x0e, 0x0a, 0x0a, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x17, 0x12,
	0x15, 0x0a, 0x11, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x10, 0x18, 0x12, 0x1f, 0x0a, 0x1b, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x44, 0x65, 0x6e, 0x69, 0x61,
	0x6c, 0x54, 0x79, 0x70, 0x65, 0x10, 0x19, 0x12, 0x11, 0x0a, 0x0d, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x10, 0x1a, 0x12, 0x0f, 0x0a, 0x0b, 0x52, 0x65,
	0x63, 0x65, 0x69, 0x70, 0x74, 0x54, 0x79, 0x70, 0x65, 0x10, 0x1b, 0x12, 0x1d, 0x0a, 0x19, 0x58,
	0x6d, 0x6c, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x6a, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x10, 0x1c, 0x12, 0x19, 0x0a, 0x15, 0x52, 0x65,
	0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x10, 0x1d, 0x12, 0x1a, 0x0a, 0x16, 0x50, 0x72, 0x69, 0x63, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x41, 0x67, 0x72, 0x65, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x10,
	0x1e, 0x12, 0x1b, 0x0a, 0x17, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x10, 0x22, 0x12, 0x19,
	0x0a, 0x15, 0x52, 0x65, 0x63, 0x6f, 0x6e, 0x63, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x41, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x10, 0x23, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x10, 0x24, 0x12, 0x0e, 0x0a, 0x0a, 0x54,
	0x6f, 0x72, 0x67, 0x31, 0x33, 0x54, 0x79, 0x70, 0x65, 0x10, 0x25, 0x12, 0x16, 0x0a, 0x12, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x54, 0x79, 0x70,
	0x65, 0x10, 0x26, 0x12, 0x1b, 0x0a, 0x17, 0x52, 0x6f, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x10, 0x27,
	0x12, 0x1e, 0x0a, 0x1a, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x72,
	0x79, 0x41, 0x67, 0x72, 0x65, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x10, 0x28,
	0x12, 0x21, 0x0a, 0x1d, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x61, 0x6c, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x10, 0x29, 0x12, 0x2b, 0x0a, 0x27, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x61, 0x6c,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x42, 0x75, 0x79, 0x65, 0x72, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x10, 0x2a,
	0x12, 0x29, 0x0a, 0x25, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x61, 0x6c, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x76,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x10, 0x2d, 0x12, 0x23, 0x0a, 0x1f, 0x55,
	0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x61, 0x6c, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x10, 0x31,
	0x12, 0x2b, 0x0a, 0x27, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x61, 0x6c, 0x43, 0x6f, 0x72,
	0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x10, 0x32, 0x12, 0x2d, 0x0a,
	0x29, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x61, 0x6c, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x75, 0x79, 0x65,
	0x72, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x10, 0x33, 0x12, 0x12, 0x0a, 0x0e,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x10, 0x40,
	0x12, 0x14, 0x0a, 0x10, 0x4d, 0x6f, 0x76, 0x65, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x10, 0x41, 0x12, 0x21, 0x0a, 0x1d, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x10, 0x42, 0x12, 0x1e, 0x0a, 0x1a, 0x52, 0x65, 0x73,
	0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x10, 0x43, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x69, 0x74,
	0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x10, 0x44, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x10, 0x45, 0x12, 0x0f,
	0x0a, 0x0b, 0x45, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x10, 0x47, 0x12,
	0x1b, 0x0a, 0x17, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x10, 0x48, 0x12, 0x1e, 0x0a, 0x1a,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x10, 0x49, 0x12, 0x13, 0x0a, 0x0f,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x66, 0x75, 0x73, 0x61, 0x6c, 0x10,
	0x4a, 0x12, 0x14, 0x0a, 0x10, 0x4f, 0x75, 0x74, 0x65, 0x72, 0x44, 0x6f, 0x63, 0x66, 0x6c, 0x6f,
	0x77, 0x54, 0x79, 0x70, 0x65, 0x10, 0x4b, 0x12, 0x1b, 0x0a, 0x17, 0x52, 0x6f, 0x61, 0x6d, 0x69,
	0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x10, 0x4c, 0x12, 0x17, 0x0a, 0x13, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x4f, 0x66, 0x41,
	0x74, 0x74, 0x6f, 0x72, 0x6e, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x10, 0x4d, 0x12, 0x1d, 0x0a,
	0x19, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x4f, 0x66, 0x41, 0x74, 0x74, 0x6f, 0x72, 0x6e, 0x65, 0x79,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x79, 0x70, 0x65, 0x10, 0x4e, 0x2a, 0x99, 0x01, 0x0a,
	0x19, 0x52, 0x6f, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x24, 0x0a, 0x20, 0x55, 0x6e,
	0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x52, 0x6f, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x10, 0x00,
	0x12, 0x1a, 0x0a, 0x16, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x01, 0x12, 0x1d, 0x0a, 0x19,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x10, 0x02, 0x12, 0x1b, 0x0a, 0x17, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x03, 0x2a, 0x65, 0x0a, 0x0e, 0x52, 0x65, 0x73, 0x6f,
	0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x55, 0x6e,
	0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x41, 0x70, 0x70, 0x72, 0x6f,
	0x76, 0x65, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x44, 0x69, 0x73, 0x61, 0x70, 0x70, 0x72, 0x6f,
	0x76, 0x65, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x52,
	0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x10, 0x03, 0x2a,
	0x9d, 0x01, 0x0a, 0x15, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x29, 0x0a, 0x1c, 0x55, 0x6e, 0x6b,
	0x6e, 0x6f, 0x77, 0x6e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x10, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10,
	0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x10, 0x01, 0x12, 0x1f, 0x0a, 0x1b, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x10, 0x03, 0x2a,
	0xbb, 0x01, 0x0a, 0x10, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x11, 0x0a, 0x0d, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x41, 0x70, 0x70, 0x72, 0x6f,
	0x76, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x44, 0x69,
	0x73, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x02,
	0x12, 0x20, 0x0a, 0x1c, 0x53, 0x69, 0x67, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x41, 0x70, 0x70, 0x72,
	0x6f, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x10, 0x03, 0x12, 0x1c, 0x0a, 0x18, 0x53, 0x69, 0x67, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x50, 0x72,
	0x69, 0x6d, 0x61, 0x72, 0x79, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x10, 0x04,
	0x12, 0x18, 0x0a, 0x14, 0x44, 0x65, 0x6e, 0x79, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x10, 0x05, 0x12, 0x11, 0x0a, 0x0d, 0x52, 0x65,
	0x6a, 0x65, 0x63, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x10, 0x06, 0x2a, 0x52, 0x0a,
	0x13, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x66, 0x75, 0x73, 0x61, 0x6c,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x1a, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x66, 0x75, 0x73, 0x61, 0x6c, 0x54, 0x79,
	0x70, 0x65, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x65, 0x66, 0x75, 0x73, 0x61, 0x6c, 0x10,
	0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x10,
	0x02, 0x2a, 0x69, 0x0a, 0x0f, 0x4f, 0x75, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x79, 0x70, 0x65, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x4e,
	0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x53,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b,
	0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x10, 0x03, 0x12, 0x0d, 0x0a,
	0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x10, 0x04, 0x2a, 0x81, 0x05, 0x0a,
	0x0c, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a,
	0x15, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x44, 0x54, 0x10, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0x01, 0x12, 0x13, 0x0a, 0x0f, 0x4e, 0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a,
	0x65, 0x64, 0x44, 0x54, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63,
	0x65, 0x44, 0x54, 0x10, 0x01, 0x12, 0x1c, 0x0a, 0x18, 0x54, 0x72, 0x75, 0x73, 0x74, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x44,
	0x54, 0x10, 0x0b, 0x12, 0x0c, 0x0a, 0x08, 0x54, 0x6f, 0x72, 0x67, 0x31, 0x32, 0x44, 0x54, 0x10,
	0x0c, 0x12, 0x15, 0x0a, 0x11, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x65, 0x76, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x44, 0x54, 0x10, 0x0d, 0x12, 0x17, 0x0a, 0x13, 0x49, 0x6e, 0x76, 0x6f,
	0x69, 0x63, 0x65, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x54, 0x10,
	0x0e, 0x12, 0x1f, 0x0a, 0x1b, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x72, 0x72,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x54,
	0x10, 0x0f, 0x12, 0x1b, 0x0a, 0x17, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x44, 0x54, 0x10, 0x10, 0x12,
	0x15, 0x0a, 0x11, 0x50, 0x72, 0x6f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x49, 0x6e, 0x76, 0x6f, 0x69,
	0x63, 0x65, 0x44, 0x54, 0x10, 0x12, 0x12, 0x0f, 0x0a, 0x0b, 0x58, 0x6d, 0x6c, 0x54, 0x6f, 0x72,
	0x67, 0x31, 0x32, 0x44, 0x54, 0x10, 0x13, 0x12, 0x1e, 0x0a, 0x1a, 0x58, 0x6d, 0x6c, 0x41, 0x63,
	0x63, 0x65, 0x70, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x44, 0x54, 0x10, 0x14, 0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x44, 0x54, 0x10, 0x1a, 0x12, 0x18, 0x0a, 0x14, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x67, 0x72, 0x65, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x54,
	0x10, 0x1e, 0x12, 0x19, 0x0a, 0x15, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x44, 0x54, 0x10, 0x22, 0x12, 0x17, 0x0a,
	0x13, 0x52, 0x65, 0x63, 0x6f, 0x6e, 0x63, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41,
	0x63, 0x74, 0x44, 0x54, 0x10, 0x23, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x44, 0x54, 0x10, 0x24, 0x12, 0x0c, 0x0a, 0x08, 0x54, 0x6f, 0x72, 0x67, 0x31, 0x33,
	0x44, 0x54, 0x10, 0x25, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x44, 0x54, 0x10, 0x26, 0x12, 0x1c, 0x0a, 0x18, 0x53, 0x75,
	0x70, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x72, 0x79, 0x41, 0x67, 0x72, 0x65, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x44, 0x54, 0x10, 0x28, 0x12, 0x1f, 0x0a, 0x1b, 0x55, 0x6e, 0x69, 0x76,
	0x65, 0x72, 0x73, 0x61, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x44, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x54, 0x10, 0x29, 0x12, 0x27, 0x0a, 0x23, 0x55, 0x6e, 0x69,
	0x76, 0x65, 0x72, 0x73, 0x61, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x44, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x54,
	0x10, 0x2d, 0x12, 0x21, 0x0a, 0x1d, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x61, 0x6c, 0x43,
	0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x44, 0x54, 0x10, 0x31, 0x12, 0x29, 0x0a, 0x25, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73,
	0x61, 0x6c, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x54, 0x10, 0x32,
	0x2a, 0x92, 0x08, 0x0a, 0x1b, 0x4e, 0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a,
	0x65, 0x64, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x26, 0x0a, 0x22, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x4e, 0x6f, 0x6e, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x10, 0x00, 0x12, 0x35, 0x0a, 0x31, 0x4f, 0x75, 0x74, 0x62,
	0x6f, 0x75, 0x6e, 0x64, 0x4e, 0x6f, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x53,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x44,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x10, 0x01, 0x12,
	0x36, 0x0a, 0x32, 0x4f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x57, 0x61, 0x69, 0x74, 0x69,
	0x6e, 0x67, 0x46, 0x6f, 0x72, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x10, 0x02, 0x12, 0x30, 0x0a, 0x2c, 0x4f, 0x75, 0x74, 0x62, 0x6f,
	0x75, 0x6e, 0x64, 0x57, 0x69, 0x74, 0x68, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74,
	0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x10, 0x03, 0x12, 0x3b, 0x0a, 0x37, 0x4f, 0x75, 0x74,
	0x62, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65,
	0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x10, 0x04, 0x12, 0x33, 0x0a, 0x2f, 0x4f, 0x75, 0x74, 0x62, 0x6f, 0x75,
	0x6e, 0x64, 0x57, 0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x46, 0x6f, 0x72, 0x53, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x44, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x10, 0x0d, 0x12, 0x30, 0x0a, 0x2c, 0x4f,
	0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x53, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x44, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x10, 0x0e, 0x12, 0x34, 0x0a,
	0x30, 0x49, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x4e, 0x6f, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69,
	0x65, 0x6e, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x10, 0x05, 0x12, 0x35, 0x0a, 0x31, 0x49, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x57, 0x61,
	0x69, 0x74, 0x69, 0x6e, 0x67, 0x46, 0x6f, 0x72, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e,
	0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x10, 0x06, 0x12, 0x2f, 0x0a, 0x2b, 0x49, 0x6e,
	0x62, 0x6f, 0x75, 0x6e, 0x64, 0x57, 0x69, 0x74, 0x68, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65,
	0x6e, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x44, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x10, 0x07, 0x12, 0x3a, 0x0a, 0x36, 0x49,
	0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x53,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52,
	0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x10, 0x08, 0x12, 0x32, 0x0a, 0x2e, 0x49, 0x6e, 0x62, 0x6f, 0x75,
	0x6e, 0x64, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65,
	0x6e, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x44, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x10, 0x0f, 0x12, 0x35, 0x0a, 0x31, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4e, 0x6f, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65,
	0x6e, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x10, 0x09, 0x12, 0x36, 0x0a, 0x32, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x57, 0x61,
	0x69, 0x74, 0x69, 0x6e, 0x67, 0x46, 0x6f, 0x72, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e,
	0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x10, 0x0a, 0x12, 0x30, 0x0a, 0x2c, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x57, 0x69, 0x74, 0x68, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69,
	0x65, 0x6e, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x44, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x10, 0x0b, 0x12, 0x3b, 0x0a, 0x37,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e,
	0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x10, 0x0c, 0x12, 0x33, 0x0a, 0x2f, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x57, 0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x46, 0x6f, 0x72, 0x53,
	0x65, 0x6e, 0x64, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x44, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x10, 0x10, 0x12, 0x30,
	0x0a, 0x2c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x10, 0x11,
	0x12, 0x33, 0x0a, 0x2f, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x10, 0x12, 0x2a, 0xf6, 0x01, 0x0a, 0x0d, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x14, 0x55, 0x6e, 0x6b, 0x6e, 0x6f,
	0x77, 0x6e, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x10,
	0x00, 0x12, 0x24, 0x0a, 0x20, 0x4f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x57, 0x61, 0x69,
	0x74, 0x69, 0x6e, 0x67, 0x46, 0x6f, 0x72, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x65,
	0x63, 0x65, 0x69, 0x70, 0x74, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x4f, 0x75, 0x74, 0x62, 0x6f,
	0x75, 0x6e, 0x64, 0x4e, 0x6f, 0x74, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x10, 0x02,
	0x12, 0x14, 0x0a, 0x10, 0x4f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x46, 0x69, 0x6e, 0x69,
	0x73, 0x68, 0x65, 0x64, 0x10, 0x03, 0x12, 0x25, 0x0a, 0x21, 0x4f, 0x75, 0x74, 0x62, 0x6f, 0x75,
	0x6e, 0x64, 0x57, 0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x46, 0x6f, 0x72, 0x53, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x10, 0x06, 0x12, 0x22, 0x0a,
	0x1e, 0x4f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x10,
	0x07, 0x12, 0x16, 0x0a, 0x12, 0x49, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x4e, 0x6f, 0x74, 0x46,
	0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x10, 0x04, 0x12, 0x13, 0x0a, 0x0f, 0x49, 0x6e, 0x62,
	0x6f, 0x75, 0x6e, 0x64, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x10, 0x05, 0x2a, 0x84,
	0x08, 0x0a, 0x17, 0x42, 0x69, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x44, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x39, 0x0a, 0x35, 0x55, 0x6e,
	0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x42, 0x69, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x44, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x69, 0x6c, 0x61,
	0x74, 0x65, 0x72, 0x61, 0x6c, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x10, 0x00, 0x12, 0x3f, 0x0a, 0x3b, 0x4f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e,
	0x64, 0x57, 0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x46, 0x6f, 0x72, 0x52, 0x65, 0x63, 0x69, 0x70,
	0x69, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x42, 0x69, 0x6c,
	0x61, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x10, 0x01, 0x12, 0x39, 0x0a, 0x35, 0x4f, 0x75, 0x74, 0x62, 0x6f, 0x75,
	0x6e, 0x64, 0x57, 0x69, 0x74, 0x68, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x53,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x42, 0x69, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x61,
	0x6c, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x10,
	0x02, 0x12, 0x44, 0x0a, 0x40, 0x4f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x63,
	0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x42, 0x69,
	0x6c, 0x61, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x10, 0x03, 0x12, 0x3c, 0x0a, 0x38, 0x4f, 0x75, 0x74, 0x62, 0x6f,
	0x75, 0x6e, 0x64, 0x57, 0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x46, 0x6f, 0x72, 0x53, 0x65, 0x6e,
	0x64, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x42, 0x69, 0x6c, 0x61,
	0x74, 0x65, 0x72, 0x61, 0x6c, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x10, 0x0a, 0x12, 0x39, 0x0a, 0x35, 0x4f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e,
	0x64, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x53, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x42, 0x69, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x61, 0x6c,
	0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x10, 0x0b,
	0x12, 0x3e, 0x0a, 0x3a, 0x49, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x57, 0x61, 0x69, 0x74, 0x69,
	0x6e, 0x67, 0x46, 0x6f, 0x72, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x42, 0x69, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x61, 0x6c,
	0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x10, 0x04,
	0x12, 0x38, 0x0a, 0x34, 0x49, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x57, 0x69, 0x74, 0x68, 0x52,
	0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x42, 0x69, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x10, 0x05, 0x12, 0x43, 0x0a, 0x3f, 0x49, 0x6e,
	0x62, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65,
	0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x42, 0x69, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x44,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x10, 0x06, 0x12,
	0x3b, 0x0a, 0x37, 0x49, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x42, 0x69, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x44, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x10, 0x0c, 0x12, 0x3f, 0x0a, 0x3b,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x57, 0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x46,
	0x6f, 0x72, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x42, 0x69, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x44, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x10, 0x07, 0x12, 0x39, 0x0a,
	0x35, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x57, 0x69, 0x74, 0x68, 0x52, 0x65, 0x63,
	0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x42,
	0x69, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x10, 0x08, 0x12, 0x44, 0x0a, 0x40, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x6a,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x42, 0x69, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x44, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x10, 0x09, 0x12, 0x3c,
	0x0a, 0x38, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x57, 0x61, 0x69, 0x74, 0x69, 0x6e,
	0x67, 0x46, 0x6f, 0x72, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x42, 0x69, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x44, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x10, 0x0d, 0x12, 0x39, 0x0a, 0x35,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x53,
	0x65, 0x6e, 0x64, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x42, 0x69,
	0x6c, 0x61, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x10, 0x0e, 0x12, 0x3c, 0x0a, 0x38, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69,
	0x65, 0x6e, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x42, 0x69, 0x6c, 0x61,
	0x74, 0x65, 0x72, 0x61, 0x6c, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x10, 0x0f, 0x2a, 0xe6, 0x01, 0x0a, 0x0d, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x25, 0x0a, 0x21, 0x55, 0x6e, 0x6b, 0x6e, 0x6f,
	0x77, 0x6e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x10, 0x00, 0x12, 0x22,
	0x0a, 0x1e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4e,
	0x6f, 0x6e, 0x65, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x10, 0x01, 0x12, 0x26, 0x0a, 0x22, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x52, 0x65, 0x63, 0x65, 0x69,
	0x70, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x10, 0x02, 0x12, 0x31, 0x0a, 0x2d, 0x52, 0x65,
	0x63, 0x65, 0x69, 0x70, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x48, 0x61, 0x76, 0x65, 0x54,
	0x6f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x52, 0x65,
	0x63, 0x65, 0x69, 0x70, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x10, 0x03, 0x12, 0x2f, 0x0a,
	0x2b, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x57, 0x61,
	0x69, 0x74, 0x69, 0x6e, 0x67, 0x46, 0x6f, 0x72, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x52,
	0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x10, 0x04, 0x2a, 0xbf,
	0x0b, 0x0a, 0x23, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x65, 0x72,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x51, 0x0a, 0x4d, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77,
	0x6e, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x65, 0x72, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x65,
	0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x10, 0x00, 0x12, 0x4b, 0x0a, 0x47, 0x4f, 0x75, 0x74,
	0x62, 0x6f, 0x75, 0x6e, 0x64, 0x57, 0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x46, 0x6f, 0x72, 0x52,
	0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x65, 0x72, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x10, 0x01, 0x12, 0x45, 0x0a, 0x41, 0x4f, 0x75, 0x74, 0x62, 0x6f, 0x75,
	0x6e, 0x64, 0x57, 0x69, 0x74, 0x68, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x53,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x44, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x10, 0x02, 0x12, 0x50, 0x0a,
	0x4c, 0x4f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65,
	0x6e, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x44,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x10, 0x03, 0x12,
	0x48, 0x0a, 0x44, 0x4f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x57, 0x61, 0x69, 0x74, 0x69,
	0x6e, 0x67, 0x46, 0x6f, 0x72, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x65,
	0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x10, 0x0a, 0x12, 0x45, 0x0a, 0x41, 0x4f, 0x75, 0x74,
	0x62, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x53, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x41, 0x63, 0x63, 0x65, 0x70,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x10, 0x0b,
	0x12, 0x4a, 0x0a, 0x46, 0x4f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x4e, 0x6f, 0x52, 0x65,
	0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x44, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x10, 0x10, 0x12, 0x4a, 0x0a, 0x46,
	0x49, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x57, 0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x46, 0x6f,
	0x72, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x65, 0x72,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x10, 0x04, 0x12, 0x44, 0x0a, 0x40, 0x49, 0x6e, 0x62, 0x6f,
	0x75, 0x6e, 0x64, 0x57, 0x69, 0x74, 0x68, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74,
	0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x44, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x10, 0x05, 0x12, 0x4f,
	0x0a, 0x4b, 0x49, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65,
	0x6e, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x44,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x10, 0x06, 0x12,
	0x47, 0x0a, 0x43, 0x49, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x65, 0x72,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x10, 0x0c, 0x12, 0x49, 0x0a, 0x45, 0x49, 0x6e, 0x62, 0x6f,
	0x75, 0x6e, 0x64, 0x4e, 0x6f, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x63,
	0x63, 0x65, 0x70, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x10, 0x11, 0x12, 0x4b, 0x0a, 0x47, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x57,
	0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x46, 0x6f, 0x72, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65,
	0x6e, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x41, 0x63, 0x63, 0x65, 0x70,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x10, 0x07,
	0x12, 0x45, 0x0a, 0x41, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x57, 0x69, 0x74, 0x68,
	0x52, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x65, 0x72, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x10, 0x08, 0x12, 0x50, 0x0a, 0x4c, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x6a, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x65,
	0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x10, 0x09, 0x12, 0x48, 0x0a, 0x44, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x57, 0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x46, 0x6f, 0x72, 0x53,
	0x65, 0x6e, 0x64, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x41, 0x63,
	0x63, 0x65, 0x70, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x10, 0x0d, 0x12, 0x45, 0x0a, 0x41, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49,
	0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43,
	0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x10, 0x0e, 0x12, 0x48, 0x0a, 0x44, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x52, 0x65, 0x63,
	0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x41,
	0x63, 0x63, 0x65, 0x70, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x10, 0x0f, 0x12, 0x4a, 0x0a, 0x46, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x4e, 0x6f, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x63, 0x63, 0x65, 0x70,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x10, 0x12,
	0x2a, 0xb8, 0x06, 0x0a, 0x1f, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x61, 0x6c, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x38, 0x0a, 0x34, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x44,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x55, 0x6e, 0x69,
	0x76, 0x65, 0x72, 0x73, 0x61, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x44, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x10, 0x00, 0x12, 0x44,
	0x0a, 0x40, 0x4f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x57, 0x61, 0x69, 0x74, 0x69, 0x6e,
	0x67, 0x46, 0x6f, 0x72, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x61, 0x6c, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x10, 0x01, 0x12, 0x58, 0x0a, 0x54, 0x4f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64,
	0x57, 0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x46, 0x6f, 0x72, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63,
	0x65, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x41, 0x6e, 0x64, 0x52, 0x65, 0x63, 0x69, 0x70,
	0x69, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x55, 0x6e, 0x69,
	0x76, 0x65, 0x72, 0x73, 0x61, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x44, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x10, 0x02, 0x12, 0x43,
	0x0a, 0x3f, 0x4f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x57, 0x61, 0x69, 0x74, 0x69, 0x6e,
	0x67, 0x46, 0x6f, 0x72, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x65, 0x63, 0x65, 0x69,
	0x70, 0x74, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x61, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x10, 0x03, 0x12, 0x47, 0x0a, 0x43, 0x4f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x57,
	0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x46, 0x6f, 0x72, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65,
	0x6e, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x55, 0x6e, 0x69, 0x76, 0x65,
	0x72, 0x73, 0x61, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x44, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x10, 0x04, 0x12, 0x41, 0x0a, 0x3d,
	0x4f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x53,
	0x65, 0x6e, 0x64, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x55, 0x6e,
	0x69, 0x76, 0x65, 0x72, 0x73, 0x61, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x44,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x10, 0x05, 0x12,
	0x57, 0x0a, 0x53, 0x49, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x57, 0x61, 0x69, 0x74, 0x69, 0x6e,
	0x67, 0x46, 0x6f, 0x72, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x65, 0x63, 0x65, 0x69,
	0x70, 0x74, 0x41, 0x6e, 0x64, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x61, 0x6c,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x10, 0x06, 0x12, 0x46, 0x0a, 0x42, 0x49, 0x6e, 0x62, 0x6f,
	0x75, 0x6e, 0x64, 0x57, 0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x46, 0x6f, 0x72, 0x52, 0x65, 0x63,
	0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x55,
	0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x61, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x10, 0x07,
	0x12, 0x42, 0x0a, 0x3e, 0x49, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x57, 0x61, 0x69, 0x74, 0x69,
	0x6e, 0x67, 0x46, 0x6f, 0x72, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x65, 0x63, 0x65,
	0x69, 0x70, 0x74, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x61, 0x6c, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x10, 0x08, 0x12, 0x40, 0x0a, 0x3c, 0x49, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x57,
	0x69, 0x74, 0x68, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x61, 0x6c, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x10, 0x09, 0x12, 0x43, 0x0a, 0x3f, 0x49, 0x6e, 0x62, 0x6f, 0x75, 0x6e,
	0x64, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e,
	0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72,
	0x73, 0x61, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x44, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x10, 0x0a, 0x2a, 0xbe, 0x03, 0x0a, 0x18,
	0x55, 0x6e, 0x69, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3b, 0x0a, 0x37, 0x55, 0x6e, 0x6b, 0x6e,
	0x6f, 0x77, 0x6e, 0x55, 0x6e, 0x69, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x44, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x55, 0x6e, 0x69, 0x6c, 0x61,
	0x74, 0x65, 0x72, 0x61, 0x6c, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x10, 0x00, 0x12, 0x24, 0x0a, 0x20, 0x4f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e,
	0x64, 0x55, 0x6e, 0x69, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x44, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x10, 0x01, 0x12, 0x3d, 0x0a, 0x39, 0x4f,
	0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x57, 0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x46, 0x6f,
	0x72, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x55, 0x6e, 0x69, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x10, 0x04, 0x12, 0x3a, 0x0a, 0x36, 0x4f, 0x75,
	0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x53, 0x65, 0x6e,
	0x64, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x55, 0x6e, 0x69, 0x6c,
	0x61, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x10, 0x05, 0x12, 0x23, 0x0a, 0x1f, 0x49, 0x6e, 0x62, 0x6f, 0x75, 0x6e,
	0x64, 0x55, 0x6e, 0x69, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x44, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x10, 0x02, 0x12, 0x24, 0x0a, 0x20, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x55, 0x6e, 0x69, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x61,
	0x6c, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x10,
	0x03, 0x12, 0x3d, 0x0a, 0x39, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x57, 0x61, 0x69,
	0x74, 0x69, 0x6e, 0x67, 0x46, 0x6f, 0x72, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x53, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x55, 0x6e, 0x69, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x61, 0x6c,
	0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x10, 0x06,
	0x12, 0x3a, 0x0a, 0x36, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x55, 0x6e, 0x69, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x44, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x10, 0x07, 0x2a, 0xa8, 0x02, 0x0a,
	0x14, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x18, 0x4e, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x73,
	0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x79, 0x70,
	0x65, 0x10, 0x00, 0x12, 0x20, 0x0a, 0x1c, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x52,
	0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54,
	0x79, 0x70, 0x65, 0x10, 0x01, 0x12, 0x23, 0x0a, 0x1f, 0x44, 0x69, 0x73, 0x61, 0x70, 0x70, 0x72,
	0x6f, 0x76, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x54, 0x79, 0x70, 0x65, 0x10, 0x02, 0x12, 0x2c, 0x0a, 0x28, 0x41, 0x70,
	0x70, 0x72, 0x6f, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x54, 0x79, 0x70, 0x65, 0x10, 0x03, 0x12, 0x2a, 0x0a, 0x26, 0x53, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x52, 0x65,
	0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x79,
	0x70, 0x65, 0x10, 0x04, 0x12, 0x27, 0x0a, 0x23, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x44, 0x65, 0x6e, 0x69, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x79, 0x70, 0x65, 0x10, 0x05, 0x12, 0x28, 0x0a,
	0x24, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65,
	0x64, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x54, 0x79, 0x70, 0x65, 0x10, 0x06, 0x2a, 0xb2, 0x01, 0x0a, 0x10, 0x52, 0x65, 0x76, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1b, 0x0a, 0x17,
	0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x52, 0x65, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x52, 0x65, 0x76,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4e, 0x6f, 0x6e,
	0x65, 0x10, 0x01, 0x12, 0x1d, 0x0a, 0x19, 0x52, 0x65, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x42, 0x79, 0x4d, 0x65,
	0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x4d, 0x79,
	0x52, 0x65, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x03, 0x12, 0x16, 0x0a, 0x12,
	0x52, 0x65, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74,
	0x65, 0x64, 0x10, 0x04, 0x12, 0x16, 0x0a, 0x12, 0x52, 0x65, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x10, 0x05, 0x2a, 0x5a, 0x0a, 0x11,
	0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1c, 0x0a, 0x18, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x44, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x00, 0x12,
	0x0b, 0x0a, 0x07, 0x49, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08,
	0x4f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x10, 0x03, 0x2a, 0xc0, 0x01, 0x0a, 0x15, 0x53, 0x65, 0x6e,
	0x64, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x20, 0x0a, 0x1c, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x53, 0x65, 0x6e,
	0x64, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19, 0x57, 0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x46,
	0x6f, 0x72, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x10, 0x01, 0x12, 0x1c, 0x0a, 0x18, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x53, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x55, 0x6e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x64, 0x10,
	0x02, 0x12, 0x22, 0x0a, 0x1e, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x64, 0x41, 0x6e, 0x64, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x10, 0x03, 0x12, 0x24, 0x0a, 0x20, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x53,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x64, 0x41,
	0x6e, 0x64, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x10, 0x04, 0x2a, 0xc2, 0x01, 0x0a, 0x14,
	0x50, 0x72, 0x6f, 0x78, 0x79, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x1f, 0x0a, 0x1b, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x50,
	0x72, 0x6f, 0x78, 0x79, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x53, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4e, 0x6f, 0x6e,
	0x65, 0x10, 0x01, 0x12, 0x1c, 0x0a, 0x18, 0x57, 0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x46, 0x6f,
	0x72, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x10,
	0x02, 0x12, 0x16, 0x0a, 0x12, 0x57, 0x69, 0x74, 0x68, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x53, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x10, 0x03, 0x12, 0x1a, 0x0a, 0x16, 0x50, 0x72, 0x6f,
	0x78, 0x79, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x6a, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x10, 0x04, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x50, 0x72, 0x6f, 0x78, 0x79, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x10, 0x05,
	0x2a, 0x9c, 0x01, 0x0a, 0x14, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x65,
	0x69, 0x70, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1f, 0x0a, 0x1b, 0x47, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x25, 0x0a, 0x21, 0x47, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x4e, 0x6f, 0x74, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x10,
	0x01, 0x12, 0x17, 0x0a, 0x13, 0x48, 0x61, 0x76, 0x65, 0x54, 0x6f, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x57, 0x61,
	0x69, 0x74, 0x69, 0x6e, 0x67, 0x46, 0x6f, 0x72, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x10,
	0x03, 0x12, 0x0c, 0x0a, 0x08, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x10, 0x04, 0x2a,
	0x90, 0x02, 0x0a, 0x17, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x22, 0x0a, 0x1e, 0x52,
	0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12,
	0x28, 0x0a, 0x24, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4e, 0x6f, 0x74, 0x41, 0x63, 0x63,
	0x65, 0x70, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x10, 0x01, 0x12, 0x20, 0x0a, 0x1c, 0x57, 0x61, 0x69,
	0x74, 0x69, 0x6e, 0x67, 0x46, 0x6f, 0x72, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74,
	0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16, 0x57,
	0x69, 0x74, 0x68, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x10, 0x03, 0x12, 0x25, 0x0a, 0x21, 0x52, 0x65, 0x63, 0x69, 0x70,
	0x69, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x10, 0x04, 0x12, 0x1d,
	0x0a, 0x19, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65,
	0x6e, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x10, 0x05, 0x12, 0x23, 0x0a,
	0x1f, 0x57, 0x69, 0x74, 0x68, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x61, 0x6c, 0x6c, 0x79, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x10, 0x06, 0x2a, 0x41, 0x0a, 0x18, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x44, 0x61, 0x74, 0x61,
	0x50, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10,
	0x0a, 0x0c, 0x53, 0x65, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x00,
	0x12, 0x13, 0x0a, 0x0f, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x10, 0x01, 0x2a, 0x84, 0x01, 0x0a, 0x0b, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x53, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x53,
	0x63, 0x6f, 0x70, 0x65, 0x41, 0x6e, 0x79, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67,
	0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x53, 0x63, 0x6f, 0x70,
	0x65, 0x4f, 0x75, 0x74, 0x67, 0x6f, 0x69, 0x6e, 0x67, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x64, 0x10, 0x03, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x53, 0x63, 0x6f,
	0x70, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x10, 0x04, 0x2a, 0x48, 0x0a, 0x0d,
	0x53, 0x6f, 0x72, 0x74, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a,
	0x14, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x53, 0x6f, 0x72, 0x74, 0x44, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x41, 0x73, 0x63, 0x65, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x44, 0x65, 0x73, 0x63, 0x65, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x10, 0x02, 0x2a, 0xd1, 0x01, 0x0a, 0x15, 0x44, 0x6f, 0x63, 0x66, 0x6c,
	0x6f, 0x77, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79,
	0x12, 0x35, 0x0a, 0x31, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x44, 0x6f, 0x63, 0x66, 0x6c,
	0x6f, 0x77, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79,
	0x44, 0x6f, 0x63, 0x66, 0x6c, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x53, 0x65, 0x76,
	0x65, 0x72, 0x69, 0x74, 0x79, 0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19, 0x49, 0x6e, 0x66, 0x6f, 0x44,
	0x6f, 0x63, 0x66, 0x6c, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x53, 0x65, 0x76, 0x65,
	0x72, 0x69, 0x74, 0x79, 0x10, 0x01, 0x12, 0x20, 0x0a, 0x1c, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x44, 0x6f, 0x63, 0x66, 0x6c, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x53, 0x65,
	0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x10, 0x02, 0x12, 0x20, 0x0a, 0x1c, 0x57, 0x61, 0x72, 0x6e,
	0x69, 0x6e, 0x67, 0x44, 0x6f, 0x63, 0x66, 0x6c, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x10, 0x03, 0x12, 0x1e, 0x0a, 0x1a, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x44, 0x6f, 0x63, 0x66, 0x6c, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x10, 0x04, 0x2a, 0x65, 0x0a, 0x0a, 0x53, 0x69,
	0x67, 0x6e, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x4c, 0x65, 0x67, 0x61,
	0x6c, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x10, 0x01, 0x12, 0x1e, 0x0a, 0x1a, 0x49, 0x6e, 0x64, 0x69, 0x76, 0x69, 0x64, 0x75, 0x61,
	0x6c, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x10, 0x02, 0x12, 0x1c, 0x0a, 0x18, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x50,
	0x65, 0x72, 0x73, 0x6f, 0x6e, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x10,
	0x03, 0x2a, 0x93, 0x03, 0x0a, 0x0c, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x50, 0x6f, 0x77, 0x65,
	0x72, 0x73, 0x12, 0x11, 0x0a, 0x0d, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x53, 0x69, 0x67,
	0x6e, 0x65, 0x72, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x4d,
	0x61, 0x64, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x01, 0x12, 0x18,
	0x0a, 0x14, 0x4d, 0x61, 0x64, 0x65, 0x41, 0x6e, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x02, 0x12, 0x1d, 0x0a, 0x19, 0x50, 0x65, 0x72, 0x73,
	0x6f, 0x6e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x03, 0x12, 0x21, 0x0a, 0x1d, 0x4d, 0x61, 0x64, 0x65, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6e, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x65,
	0x64, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x10, 0x04, 0x12, 0x32, 0x0a, 0x2e, 0x4d, 0x61,
	0x64, 0x65, 0x41, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x69, 0x62, 0x6c, 0x65,
	0x46, 0x6f, 0x72, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6e, 0x64, 0x53,
	0x69, 0x67, 0x6e, 0x65, 0x64, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x10, 0x05, 0x12, 0x2e,
	0x0a, 0x2a, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x46, 0x6f, 0x72,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6e, 0x64, 0x53, 0x69, 0x67, 0x6e,
	0x65, 0x72, 0x46, 0x6f, 0x72, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x10, 0x06, 0x12, 0x16,
	0x0a, 0x12, 0x43, 0x68, 0x61, 0x69, 0x72, 0x6d, 0x61, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x10, 0x07, 0x12, 0x14, 0x0a, 0x10, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x10, 0x08, 0x12, 0x1a, 0x0a, 0x16,
	0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x44, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x15, 0x12, 0x1b, 0x0a, 0x17, 0x50, 0x65, 0x72, 0x73,
	0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x44, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x10, 0x16, 0x12, 0x1a, 0x0a, 0x16, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x41,
	0x67, 0x72, 0x65, 0x65, 0x64, 0x4f, 0x6e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x10,
	0x17, 0x12, 0x14, 0x0a, 0x10, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x4f, 0x74, 0x68, 0x65, 0x72,
	0x50, 0x6f, 0x77, 0x65, 0x72, 0x10, 0x1d, 0x2a, 0xaf, 0x01, 0x0a, 0x0c, 0x53, 0x69, 0x67, 0x6e,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x65, 0x6c, 0x6c,
	0x65, 0x72, 0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x10, 0x01, 0x12, 0x1e, 0x0a, 0x1a,
	0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x6f, 0x72, 0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x10, 0x02, 0x12, 0x1d, 0x0a, 0x19,
	0x4f, 0x74, 0x68, 0x65, 0x72, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x41,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x10,
	0x04, 0x12, 0x11, 0x0a, 0x0d, 0x42, 0x75, 0x79, 0x65, 0x72, 0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79,
	0x65, 0x65, 0x10, 0x05, 0x12, 0x23, 0x0a, 0x1f, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x42, 0x75, 0x79, 0x65, 0x72, 0x45,
	0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x10, 0x06, 0x2a, 0x3b, 0x0a, 0x0c, 0x46, 0x75, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x6e, 0x76,
	0x6f, 0x69, 0x63, 0x65, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x42, 0x61, 0x73, 0x69, 0x63, 0x10,
	0x01, 0x12, 0x13, 0x0a, 0x0f, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x41, 0x6e, 0x64, 0x42,
	0x61, 0x73, 0x69, 0x63, 0x10, 0x02, 0x2a, 0xa4, 0x01, 0x0a, 0x07, 0x54, 0x61, 0x78, 0x52, 0x61,
	0x74, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x4e, 0x6f, 0x56, 0x61, 0x74, 0x10, 0x00, 0x12, 0x0d, 0x0a,
	0x09, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x5f, 0x30, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a,
	0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x5f, 0x31, 0x30, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a,
	0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x5f, 0x31, 0x38, 0x10, 0x03, 0x12, 0x0e, 0x0a, 0x0a,
	0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x5f, 0x32, 0x30, 0x10, 0x04, 0x12, 0x13, 0x0a, 0x0f,
	0x46, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x31, 0x30, 0x5f, 0x31, 0x31, 0x30, 0x10,
	0x05, 0x12, 0x13, 0x0a, 0x0f, 0x46, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x31, 0x38,
	0x5f, 0x31, 0x31, 0x38, 0x10, 0x06, 0x12, 0x10, 0x0a, 0x0c, 0x54, 0x61, 0x78, 0x65, 0x64, 0x42,
	0x79, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x10, 0x07, 0x12, 0x13, 0x0a, 0x0f, 0x46, 0x72, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x32, 0x30, 0x5f, 0x31, 0x32, 0x30, 0x10, 0x08, 0x2a, 0x5f, 0x0a,
	0x08, 0x49, 0x74, 0x65, 0x6d, 0x4d, 0x61, 0x72, 0x6b, 0x12, 0x10, 0x0a, 0x0c, 0x4e, 0x6f, 0x74,
	0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x50,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x4a, 0x6f, 0x62,
	0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x10, 0x03, 0x12,
	0x12, 0x0a, 0x0e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x52, 0x69, 0x67, 0x68, 0x74,
	0x73, 0x10, 0x04, 0x12, 0x09, 0x0a, 0x05, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x10, 0x05, 0x2a, 0x58,
	0x0a, 0x07, 0x4f, 0x72, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x12, 0x4c, 0x65, 0x67,
	0x61, 0x6c, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4f, 0x72, 0x67, 0x54, 0x79, 0x70, 0x65, 0x10,
	0x01, 0x12, 0x1b, 0x0a, 0x17, 0x49, 0x6e, 0x64, 0x69, 0x76, 0x69, 0x64, 0x75, 0x61, 0x6c, 0x45,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x4f, 0x72, 0x67, 0x54, 0x79, 0x70, 0x65, 0x10, 0x02, 0x12, 0x18,
	0x0a, 0x14, 0x46, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4f,
	0x72, 0x67, 0x54, 0x79, 0x70, 0x65, 0x10, 0x03, 0x42, 0x10, 0x5a, 0x0e, 0x64, 0x69, 0x61, 0x64,
	0x6f, 0x63, 0x65, 0x72, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
}

var (
	file_Full_proto_rawDescOnce sync.Once
	file_Full_proto_rawDescData = file_Full_proto_rawDesc
)

func file_Full_proto_rawDescGZIP() []byte {
	file_Full_proto_rawDescOnce.Do(func() {
		file_Full_proto_rawDescData = protoimpl.X.CompressGZIP(file_Full_proto_rawDescData)
	})
	return file_Full_proto_rawDescData
}

var file_Full_proto_enumTypes = make([]protoimpl.EnumInfo, 45)
var file_Full_proto_msgTypes = make([]protoimpl.MessageInfo, 295)
var file_Full_proto_goTypes = []interface{}{
	(CounteragentStatus)(0),                               // 0: CounteragentStatus
	(TotalCountType)(0),                                   // 1: TotalCountType
	(DocumentAccessLevel)(0),                              // 2: DocumentAccessLevel
	(CertificateType)(0),                                  // 3: CertificateType
	(CertificateSubjectType)(0),                           // 4: CertificateSubjectType
	(Severity)(0),                                         // 5: Severity
	(PowerOfAttorneyValidationStatusNamedId)(0),           // 6: PowerOfAttorneyValidationStatusNamedId
	(Sociability)(0),                                      // 7: Sociability
	(OrganizationInvoiceFormatVersion)(0),                 // 8: OrganizationInvoiceFormatVersion
	(LockMode)(0),                                         // 9: LockMode
	(MessageType)(0),                                      // 10: MessageType
	(EntityType)(0),                                       // 11: EntityType
	(AttachmentType)(0),                                   // 12: AttachmentType
	(RoamingNotificationStatus)(0),                        // 13: RoamingNotificationStatus
	(ResolutionType)(0),                                   // 14: ResolutionType
	(ResolutionRequestType)(0),                            // 15: ResolutionRequestType
	(ResolutionAction)(0),                                 // 16: ResolutionAction
	(TemplateRefusalType)(0),                              // 17: TemplateRefusalType
	(OuterStatusType)(0),                                  // 18: OuterStatusType
	(DocumentType)(0),                                     // 19: DocumentType
	(NonformalizedDocumentStatus)(0),                      // 20: NonformalizedDocumentStatus
	(InvoiceStatus)(0),                                    // 21: InvoiceStatus
	(BilateralDocumentStatus)(0),                          // 22: BilateralDocumentStatus
	(ReceiptStatus)(0),                                    // 23: ReceiptStatus
	(AcceptanceCertificateDocumentStatus)(0),              // 24: AcceptanceCertificateDocumentStatus
	(UniversalTransferDocumentStatus)(0),                  // 25: UniversalTransferDocumentStatus
	(UnilateralDocumentStatus)(0),                         // 26: UnilateralDocumentStatus
	(ResolutionStatusType)(0),                             // 27: ResolutionStatusType
	(RevocationStatus)(0),                                 // 28: RevocationStatus
	(DocumentDirection)(0),                                // 29: DocumentDirection
	(SenderSignatureStatus)(0),                            // 30: SenderSignatureStatus
	(ProxySignatureStatus)(0),                             // 31: ProxySignatureStatus
	(GeneralReceiptStatus)(0),                             // 32: GeneralReceiptStatus
	(RecipientResponseStatus)(0),                          // 33: RecipientResponseStatus
	(CustomDataPatchOperation)(0),                         // 34: CustomDataPatchOperation
	(SearchScope)(0),                                      // 35: SearchScope
	(SortDirection)(0),                                    // 36: SortDirection
	(DocflowStatusSeverity)(0),                            // 37: DocflowStatusSeverity
	(SignerType)(0),                                       // 38: SignerType
	(SignerPowers)(0),                                     // 39: SignerPowers
	(SignerStatus)(0),                                     // 40: SignerStatus
	(FunctionType)(0),                                     // 41: FunctionType
	(TaxRate)(0),                                          // 42: TaxRate
	(ItemMark)(0),                                         // 43: ItemMark
	(OrgType)(0),                                          // 44: OrgType
	(*Address)(nil),                                       // 45: Address
	(*RussianAddress)(nil),                                // 46: RussianAddress
	(*ForeignAddress)(nil),                                // 47: ForeignAddress
	(*CounteragentList)(nil),                              // 48: CounteragentList
	(*Counteragent)(nil),                                  // 49: Counteragent
	(*CounteragentCertificateList)(nil),                   // 50: CounteragentCertificateList
	(*Certificate)(nil),                                   // 51: Certificate
	(*AcquireCounteragentRequest)(nil),                    // 52: AcquireCounteragentRequest
	(*InvitationDocument)(nil),                            // 53: InvitationDocument
	(*Department)(nil),                                    // 54: Department
	(*DepartmentAdmin)(nil),                               // 55: DepartmentAdmin
	(*DepartmentList)(nil),                                // 56: DepartmentList
	(*Routing)(nil),                                       // 57: Routing
	(*DepartmentToCreate)(nil),                            // 58: DepartmentToCreate
	(*DepartmentToUpdate)(nil),                            // 59: DepartmentToUpdate
	(*ParentDepartmentPatch)(nil),                         // 60: ParentDepartmentPatch
	(*DepartmentNamingPatch)(nil),                         // 61: DepartmentNamingPatch
	(*DepartmentKppPatch)(nil),                            // 62: DepartmentKppPatch
	(*DepartmentAddressPatch)(nil),                        // 63: DepartmentAddressPatch
	(*DepartmentRoutingPatch)(nil),                        // 64: DepartmentRoutingPatch
	(*DocumentId)(nil),                                    // 65: DocumentId
	(*Employee)(nil),                                      // 66: Employee
	(*EmployeePermissions)(nil),                           // 67: EmployeePermissions
	(*EmployeeAction)(nil),                                // 68: EmployeeAction
	(*AuthorizationPermission)(nil),                       // 69: AuthorizationPermission
	(*UserV2)(nil),                                        // 70: UserV2
	(*FullName)(nil),                                      // 71: FullName
	(*EmployeeList)(nil),                                  // 72: EmployeeList
	(*User)(nil),                                          // 73: User
	(*CertificateInfo)(nil),                               // 74: CertificateInfo
	(*OrganizationUser)(nil),                              // 75: OrganizationUser
	(*OrganizationUsersList)(nil),                         // 76: OrganizationUsersList
	(*OrganizationUserPermissions)(nil),                   // 77: OrganizationUserPermissions
	(*EmployeeSubscriptions)(nil),                         // 78: EmployeeSubscriptions
	(*Subscription)(nil),                                  // 79: Subscription
	(*SubscriptionsToUpdate)(nil),                         // 80: SubscriptionsToUpdate
	(*CertificateList)(nil),                               // 81: CertificateList
	(*CertificateInfoV2)(nil),                             // 82: CertificateInfoV2
	(*EmployeeToCreate)(nil),                              // 83: EmployeeToCreate
	(*EmployeeToCreateCredentials)(nil),                   // 84: EmployeeToCreateCredentials
	(*EmployeeToCreateByLogin)(nil),                       // 85: EmployeeToCreateByLogin
	(*EmployeeToCreateByCertificate)(nil),                 // 86: EmployeeToCreateByCertificate
	(*EmployeeToUpdate)(nil),                              // 87: EmployeeToUpdate
	(*EmployeePermissionsPatch)(nil),                      // 88: EmployeePermissionsPatch
	(*EmployeeDepartmentPatch)(nil),                       // 89: EmployeeDepartmentPatch
	(*EmployeeDocumentAccessLevelPatch)(nil),              // 90: EmployeeDocumentAccessLevelPatch
	(*EmployeeSelectedDepartmentsPatch)(nil),              // 91: EmployeeSelectedDepartmentsPatch
	(*EmployeePositionPatch)(nil),                         // 92: EmployeePositionPatch
	(*EmployeeCanBeInvitedForChatPatch)(nil),              // 93: EmployeeCanBeInvitedForChatPatch
	(*AuthorizationPermissionPatch)(nil),                  // 94: AuthorizationPermissionPatch
	(*EmployeeIsAdministratorPatch)(nil),                  // 95: EmployeeIsAdministratorPatch
	(*UserToUpdate)(nil),                                  // 96: UserToUpdate
	(*UserLoginPatch)(nil),                                // 97: UserLoginPatch
	(*UserFullNamePatch)(nil),                             // 98: UserFullNamePatch
	(*SignedContent)(nil),                                 // 99: SignedContent
	(*PowerOfAttorneyToPost)(nil),                         // 100: PowerOfAttorneyToPost
	(*PowerOfAttorneyFullId)(nil),                         // 101: PowerOfAttorneyFullId
	(*PowerOfAttorneyValidationStatus)(nil),               // 102: PowerOfAttorneyValidationStatus
	(*PowerOfAttorneyValidationError)(nil),                // 103: PowerOfAttorneyValidationError
	(*GetOrganizationsByInnListRequest)(nil),              // 104: GetOrganizationsByInnListRequest
	(*OrganizationWithCounteragentStatus)(nil),            // 105: OrganizationWithCounteragentStatus
	(*GetOrganizationsByInnListResponse)(nil),             // 106: GetOrganizationsByInnListResponse
	(*LoginPassword)(nil),                                 // 107: LoginPassword
	(*OrganizationList)(nil),                              // 108: OrganizationList
	(*Organization)(nil),                                  // 109: Organization
	(*Box)(nil),                                           // 110: Box
	(*OrganizationFeatures)(nil),                          // 111: OrganizationFeatures
	(*BlockStatus)(nil),                                   // 112: BlockStatus
	(*ManualBlockStatus)(nil),                             // 113: ManualBlockStatus
	(*AutoBlockStatus)(nil),                               // 114: AutoBlockStatus
	(*Timestamp)(nil),                                     // 115: Timestamp
	(*AsyncMethodResult)(nil),                             // 116: AsyncMethodResult
	(*AcquireCounteragentResult)(nil),                     // 117: AcquireCounteragentResult
	(*Message)(nil),                                       // 118: Message
	(*TemplateToLetterTransformationInfo)(nil),            // 119: TemplateToLetterTransformationInfo
	(*Entity)(nil),                                        // 120: Entity
	(*Content)(nil),                                       // 121: Content
	(*Document)(nil),                                      // 122: Document
	(*ResolutionInfo)(nil),                                // 123: ResolutionInfo
	(*ResolutionRequestInfo)(nil),                         // 124: ResolutionRequestInfo
	(*ResolutionTarget)(nil),                              // 125: ResolutionTarget
	(*ResolutionRequestDenialInfo)(nil),                   // 126: ResolutionRequestDenialInfo
	(*ResolutionRequestDenialAttachment)(nil),             // 127: ResolutionRequestDenialAttachment
	(*ResolutionRequestDenialCancellationAttachment)(nil), // 128: ResolutionRequestDenialCancellationAttachment
	(*ResolutionRouteAssignmentInfo)(nil),                 // 129: ResolutionRouteAssignmentInfo
	(*ResolutionRouteRemovalInfo)(nil),                    // 130: ResolutionRouteRemovalInfo
	(*CancellationInfo)(nil),                              // 131: CancellationInfo
	(*TemplateTransformationInfo)(nil),                    // 132: TemplateTransformationInfo
	(*TemplateRefusalInfo)(nil),                           // 133: TemplateRefusalInfo
	(*OuterDocflowInfo)(nil),                              // 134: OuterDocflowInfo
	(*Status)(nil),                                        // 135: Status
	(*StatusDetail)(nil),                                  // 136: StatusDetail
	(*EntityRevocationRequestInfo)(nil),                   // 137: EntityRevocationRequestInfo
	(*PowerOfAttorneyInfo)(nil),                           // 138: PowerOfAttorneyInfo
	(*NonformalizedDocumentMetadata)(nil),                 // 139: NonformalizedDocumentMetadata
	(*InvoiceMetadata)(nil),                               // 140: InvoiceMetadata
	(*InvoiceRevisionMetadata)(nil),                       // 141: InvoiceRevisionMetadata
	(*InvoiceCorrectionMetadata)(nil),                     // 142: InvoiceCorrectionMetadata
	(*InvoiceCorrectionRevisionMetadata)(nil),             // 143: InvoiceCorrectionRevisionMetadata
	(*TrustConnectionRequestMetadata)(nil),                // 144: TrustConnectionRequestMetadata
	(*BasicDocumentMetadata)(nil),                         // 145: BasicDocumentMetadata
	(*PriceListMetadata)(nil),                             // 146: PriceListMetadata
	(*ContractMetadata)(nil),                              // 147: ContractMetadata
	(*BilateralDocumentMetadata)(nil),                     // 148: BilateralDocumentMetadata
	(*AcceptanceCertificateMetadata)(nil),                 // 149: AcceptanceCertificateMetadata
	(*SupplementaryAgreementMetadata)(nil),                // 150: SupplementaryAgreementMetadata
	(*ProformaInvoiceMetadata)(nil),                       // 151: ProformaInvoiceMetadata
	(*ServiceDetailsMetadata)(nil),                        // 152: ServiceDetailsMetadata
	(*ResolutionStatus)(nil),                              // 153: ResolutionStatus
	(*ForwardDocumentEvent)(nil),                          // 154: ForwardDocumentEvent
	(*CustomDataItem)(nil),                                // 155: CustomDataItem
	(*UniversalTransferDocumentMetadata)(nil),             // 156: UniversalTransferDocumentMetadata
	(*UniversalTransferDocumentRevisionMetadata)(nil),     // 157: UniversalTransferDocumentRevisionMetadata
	(*UniversalCorrectionDocumentMetadata)(nil),           // 158: UniversalCorrectionDocumentMetadata
	(*UniversalCorrectionDocumentRevisionMetadata)(nil),   // 159: UniversalCorrectionDocumentRevisionMetadata
	(*MetadataItem)(nil),                                  // 160: MetadataItem
	(*RecipientReceiptMetadata)(nil),                      // 161: RecipientReceiptMetadata
	(*ConfirmationMetadata)(nil),                          // 162: ConfirmationMetadata
	(*AmendmentRequestMetadata)(nil),                      // 163: AmendmentRequestMetadata
	(*Origin)(nil),                                        // 164: Origin
	(*SenderReceiptMetadata)(nil),                         // 165: SenderReceiptMetadata
	(*LastOuterDocflow)(nil),                              // 166: LastOuterDocflow
	(*DocflowStatusV3)(nil),                               // 167: DocflowStatusV3
	(*DocflowStatusModelV3)(nil),                          // 168: DocflowStatusModelV3
	(*MessageToPost)(nil),                                 // 169: MessageToPost
	(*XmlDocumentAttachment)(nil),                         // 170: XmlDocumentAttachment
	(*NonformalizedAttachment)(nil),                       // 171: NonformalizedAttachment
	(*BasicDocumentAttachment)(nil),                       // 172: BasicDocumentAttachment
	(*TrustConnectionRequestAttachment)(nil),              // 173: TrustConnectionRequestAttachment
	(*AcceptanceCertificateAttachment)(nil),               // 174: AcceptanceCertificateAttachment
	(*StructuredDataAttachment)(nil),                      // 175: StructuredDataAttachment
	(*PriceListAttachment)(nil),                           // 176: PriceListAttachment
	(*ReconciliationActAttachment)(nil),                   // 177: ReconciliationActAttachment
	(*ContractAttachment)(nil),                            // 178: ContractAttachment
	(*Torg13Attachment)(nil),                              // 179: Torg13Attachment
	(*ServiceDetailsAttachment)(nil),                      // 180: ServiceDetailsAttachment
	(*EncryptedInvoiceAttachment)(nil),                    // 181: EncryptedInvoiceAttachment
	(*EncryptedDocumentMetadata)(nil),                     // 182: EncryptedDocumentMetadata
	(*EncryptedInvoiceMetadata)(nil),                      // 183: EncryptedInvoiceMetadata
	(*EncryptedInvoiceCorrectionMetadata)(nil),            // 184: EncryptedInvoiceCorrectionMetadata
	(*DocumentDateAndNumber)(nil),                         // 185: DocumentDateAndNumber
	(*EncryptedXmlDocumentAttachment)(nil),                // 186: EncryptedXmlDocumentAttachment
	(*EncryptedXmlBasicDocumentMetadata)(nil),             // 187: EncryptedXmlBasicDocumentMetadata
	(*SupplementaryAgreementAttachment)(nil),              // 188: SupplementaryAgreementAttachment
	(*DocumentAttachment)(nil),                            // 189: DocumentAttachment
	(*MessagePatchToPost)(nil),                            // 190: MessagePatchToPost
	(*ReceiptAttachment)(nil),                             // 191: ReceiptAttachment
	(*CorrectionRequestAttachment)(nil),                   // 192: CorrectionRequestAttachment
	(*RecipientTitleAttachment)(nil),                      // 193: RecipientTitleAttachment
	(*RequestedSignatureRejection)(nil),                   // 194: RequestedSignatureRejection
	(*RevocationRequestAttachment)(nil),                   // 195: RevocationRequestAttachment
	(*XmlSignatureRejectionAttachment)(nil),               // 196: XmlSignatureRejectionAttachment
	(*ResolutionRouteAssignment)(nil),                     // 197: ResolutionRouteAssignment
	(*ResolutionRouteRemoval)(nil),                        // 198: ResolutionRouteRemoval
	(*SignatureVerification)(nil),                         // 199: SignatureVerification
	(*EditDocumentPacketCommand)(nil),                     // 200: EditDocumentPacketCommand
	(*EditingPatch)(nil),                                  // 201: EditingPatch
	(*UnsignedContent)(nil),                               // 202: UnsignedContent
	(*DocumentSignature)(nil),                             // 203: DocumentSignature
	(*ResolutionAttachment)(nil),                          // 204: ResolutionAttachment
	(*ResolutionRequestAttachment)(nil),                   // 205: ResolutionRequestAttachment
	(*ResolutionRequestCancellationAttachment)(nil),       // 206: ResolutionRequestCancellationAttachment
	(*CustomDataPatch)(nil),                               // 207: CustomDataPatch
	(*MessagePatch)(nil),                                  // 208: MessagePatch
	(*EntityPatch)(nil),                                   // 209: EntityPatch
	(*BoxEvent)(nil),                                      // 210: BoxEvent
	(*BoxEventList)(nil),                                  // 211: BoxEventList
	(*GetDocflowBatchRequest)(nil),                        // 212: GetDocflowBatchRequest
	(*GetDocflowRequest)(nil),                             // 213: GetDocflowRequest
	(*GetDocflowBatchResponseV3)(nil),                     // 214: GetDocflowBatchResponseV3
	(*DocumentWithDocflowV3)(nil),                         // 215: DocumentWithDocflowV3
	(*LastEvent)(nil),                                     // 216: LastEvent
	(*DocumentInfoV3)(nil),                                // 217: DocumentInfoV3
	(*PacketInfo)(nil),                                    // 218: PacketInfo
	(*DocumentLinks)(nil),                                 // 219: DocumentLinks
	(*FullVersion)(nil),                                   // 220: FullVersion
	(*DocumentLetterInfo)(nil),                            // 221: DocumentLetterInfo
	(*DocumentDraftInfo)(nil),                             // 222: DocumentDraftInfo
	(*DocumentTemplateInfo)(nil),                          // 223: DocumentTemplateInfo
	(*DocumentParticipants)(nil),                          // 224: DocumentParticipants
	(*DocumentParticipant)(nil),                           // 225: DocumentParticipant
	(*TemplateTransformationInfoDocflow)(nil),             // 226: TemplateTransformationInfoDocflow
	(*TemplateRefusalInfoDocflow)(nil),                    // 227: TemplateRefusalInfoDocflow
	(*DocflowV3)(nil),                                     // 228: DocflowV3
	(*ResolutionDocflowV3)(nil),                           // 229: ResolutionDocflowV3
	(*OuterDocflow)(nil),                                  // 230: OuterDocflow
	(*RevocationDocflowV3)(nil),                           // 231: RevocationDocflowV3
	(*OuterDocflowEntities)(nil),                          // 232: OuterDocflowEntities
	(*StatusEntity)(nil),                                  // 233: StatusEntity
	(*ResolutionEntitiesV3)(nil),                          // 234: ResolutionEntitiesV3
	(*ResolutionRequestV3)(nil),                           // 235: ResolutionRequestV3
	(*ApprovementSignatureV3)(nil),                        // 236: ApprovementSignatureV3
	(*SignatureDenialV3)(nil),                             // 237: SignatureDenialV3
	(*ResolutionV3)(nil),                                  // 238: ResolutionV3
	(*RevocationRequestDocflow)(nil),                      // 239: RevocationRequestDocflow
	(*RevocationResponseDocflow)(nil),                     // 240: RevocationResponseDocflow
	(*AmendmentRequestDocflow)(nil),                       // 241: AmendmentRequestDocflow
	(*ParticipantResponseDocflow)(nil),                    // 242: ParticipantResponseDocflow
	(*SignatureRejectionDocflow)(nil),                     // 243: SignatureRejectionDocflow
	(*ConfirmationDocflow)(nil),                           // 244: ConfirmationDocflow
	(*ReceiptDocflowV3)(nil),                              // 245: ReceiptDocflowV3
	(*OperatorConfirmationDocflow)(nil),                   // 246: OperatorConfirmationDocflow
	(*SenderTitleDocflow)(nil),                            // 247: SenderTitleDocflow
	(*RoamingNotification)(nil),                           // 248: RoamingNotification
	(*SignedAttachmentV3)(nil),                            // 249: SignedAttachmentV3
	(*Attachment)(nil),                                    // 250: Attachment
	(*SignatureV3)(nil),                                   // 251: SignatureV3
	(*SignatureVerificationResult)(nil),                   // 252: SignatureVerificationResult
	(*SignaturePowerOfAttorney)(nil),                      // 253: SignaturePowerOfAttorney
	(*PowerOfAttorneyStatusChange)(nil),                   // 254: PowerOfAttorneyStatusChange
	(*CertificateVerificationResult)(nil),                 // 255: CertificateVerificationResult
	(*CertificateChainElement)(nil),                       // 256: CertificateChainElement
	(*GetDocflowsByPacketIdRequest)(nil),                  // 257: GetDocflowsByPacketIdRequest
	(*GetDocflowsByPacketIdResponseV3)(nil),               // 258: GetDocflowsByPacketIdResponseV3
	(*FetchedDocumentV3)(nil),                             // 259: FetchedDocumentV3
	(*SearchDocflowsRequest)(nil),                         // 260: SearchDocflowsRequest
	(*SearchDocflowsResponseV3)(nil),                      // 261: SearchDocflowsResponseV3
	(*GetDocflowEventsRequest)(nil),                       // 262: GetDocflowEventsRequest
	(*TimeBasedFilter)(nil),                               // 263: TimeBasedFilter
	(*GetDocflowEventsResponse)(nil),                      // 264: GetDocflowEventsResponse
	(*DocflowEventV3)(nil),                                // 265: DocflowEventV3
	(*CustomPrintFormDetectionRequest)(nil),               // 266: CustomPrintFormDetectionRequest
	(*CustomPrintFormDetectionResult)(nil),                // 267: CustomPrintFormDetectionResult
	(*CustomPrintFormDetectionItemResult)(nil),            // 268: CustomPrintFormDetectionItemResult
	(*ForwardDocumentRequest)(nil),                        // 269: ForwardDocumentRequest
	(*ForwardDocumentResponse)(nil),                       // 270: ForwardDocumentResponse
	(*ForwardedDocumentId)(nil),                           // 271: ForwardedDocumentId
	(*ForwardedDocument)(nil),                             // 272: ForwardedDocument
	(*DocumentWithDocflow)(nil),                           // 273: DocumentWithDocflow
	(*DocumentInfo)(nil),                                  // 274: DocumentInfo
	(*UniversalCorrectionDocumentInfo)(nil),               // 275: UniversalCorrectionDocumentInfo
	(*UniversalTransferDocumentInfo)(nil),                 // 276: UniversalTransferDocumentInfo
	(*ContractDocumentInfo)(nil),                          // 277: ContractDocumentInfo
	(*SupplementaryAgreementDocumentInfo)(nil),            // 278: SupplementaryAgreementDocumentInfo
	(*PriceListDocumentInfo)(nil),                         // 279: PriceListDocumentInfo
	(*InvoiceDocumentInfo)(nil),                           // 280: InvoiceDocumentInfo
	(*InvoiceCorrectionDocumentInfo)(nil),                 // 281: InvoiceCorrectionDocumentInfo
	(*BasicDocumentInfo)(nil),                             // 282: BasicDocumentInfo
	(*Docflow)(nil),                                       // 283: Docflow
	(*ResolutionDocflow)(nil),                             // 284: ResolutionDocflow
	(*RevocationDocflow)(nil),                             // 285: RevocationDocflow
	(*RecipientSignatureRejectionDocflow)(nil),            // 286: RecipientSignatureRejectionDocflow
	(*RecipientSignatureDocflow)(nil),                     // 287: RecipientSignatureDocflow
	(*ReceiptDocflow)(nil),                                // 288: ReceiptDocflow
	(*UnilateralDocflow)(nil),                             // 289: UnilateralDocflow
	(*XmlBilateralDocflow)(nil),                           // 290: XmlBilateralDocflow
	(*BuyerTitleDocflow)(nil),                             // 291: BuyerTitleDocflow
	(*BilateralDocflow)(nil),                              // 292: BilateralDocflow
	(*OutboundInvoiceDocflow)(nil),                        // 293: OutboundInvoiceDocflow
	(*InvoiceConfirmationDocflow)(nil),                    // 294: InvoiceConfirmationDocflow
	(*InvoiceCorrectionRequestDocflow)(nil),               // 295: InvoiceCorrectionRequestDocflow
	(*InboundInvoiceDocflow)(nil),                         // 296: InboundInvoiceDocflow
	(*InboundInvoiceReceiptDocflow)(nil),                  // 297: InboundInvoiceReceiptDocflow
	(*InboundUniversalTransferDocumentDocflow)(nil),       // 298: InboundUniversalTransferDocumentDocflow
	(*OutboundUniversalTransferDocumentDocflow)(nil),      // 299: OutboundUniversalTransferDocumentDocflow
	(*DocflowStatus)(nil),                                 // 300: DocflowStatus
	(*DocflowStatusModelOld)(nil),                         // 301: DocflowStatusModelOld
	(*SignedAttachment)(nil),                              // 302: SignedAttachment
	(*Signature)(nil),                                     // 303: Signature
	(*UniversalTransferDocumentSellerTitleInfo)(nil),      // 304: UniversalTransferDocumentSellerTitleInfo
	(*PaymentDocumentInfo)(nil),                           // 305: PaymentDocumentInfo
	(*ExtendedSigner)(nil),                                // 306: ExtendedSigner
	(*ExtendedSignerDetails)(nil),                         // 307: ExtendedSignerDetails
	(*ExtendedSignerDetailsToPost)(nil),                   // 308: ExtendedSignerDetailsToPost
	(*Shipper)(nil),                                       // 309: Shipper
	(*InvoiceTable)(nil),                                  // 310: InvoiceTable
	(*ExtendedInvoiceItem)(nil),                           // 311: ExtendedInvoiceItem
	(*CustomsDeclaration)(nil),                            // 312: CustomsDeclaration
	(*TransferInfo)(nil),                                  // 313: TransferInfo
	(*ExtendedOrganizationInfo)(nil),                      // 314: ExtendedOrganizationInfo
	(*TransferBase)(nil),                                  // 315: TransferBase
	(*Waybill)(nil),                                       // 316: Waybill
	(*EmployeeOld)(nil),                                   // 317: EmployeeOld
	(*OtherIssuer)(nil),                                   // 318: OtherIssuer
	(*AdditionalInfoId)(nil),                              // 319: AdditionalInfoId
	(*AdditionalInfo)(nil),                                // 320: AdditionalInfo
	(*DocumentList)(nil),                                  // 321: DocumentList
	(*GetForwardedDocumentEventsRequest)(nil),             // 322: GetForwardedDocumentEventsRequest
	(*GetForwardedDocumentEventsResponse)(nil),            // 323: GetForwardedDocumentEventsResponse
	(*ForwardedDocumentEvent)(nil),                        // 324: ForwardedDocumentEvent
	(*ResolutionRouteList)(nil),                           // 325: ResolutionRouteList
	(*ResolutionRoute)(nil),                               // 326: ResolutionRoute
	(*GetForwardedDocumentsRequest)(nil),                  // 327: GetForwardedDocumentsRequest
	(*GetForwardedDocumentsResponse)(nil),                 // 328: GetForwardedDocumentsResponse
	(*DocumentsMoveOperation)(nil),                        // 329: DocumentsMoveOperation
	(*DraftToSend)(nil),                                   // 330: DraftToSend
	(*DocumentSenderSignature)(nil),                       // 331: DocumentSenderSignature
	(*Template)(nil),                                      // 332: Template
	(*TemplateToPost)(nil),                                // 333: TemplateToPost
	(*TemplateDocumentAttachment)(nil),                    // 334: TemplateDocumentAttachment
	(*PredefinedRecipientTitle)(nil),                      // 335: PredefinedRecipientTitle
	(*TemplatePatchToPost)(nil),                           // 336: TemplatePatchToPost
	(*TemplateRefusalAttachment)(nil),                     // 337: TemplateRefusalAttachment
	(*TemplateTransformationToPost)(nil),                  // 338: TemplateTransformationToPost
	(*DocumentTransformation)(nil),                        // 339: DocumentTransformation
}
var file_Full_proto_depIdxs = []int32{
	46,  // 0: Address.RussianAddress:type_name -> RussianAddress
	47,  // 1: Address.ForeignAddress:type_name -> ForeignAddress
	49,  // 2: CounteragentList.Counteragents:type_name -> Counteragent
	1,   // 3: CounteragentList.TotalCountType:type_name -> TotalCountType
	109, // 4: Counteragent.Organization:type_name -> Organization
	0,   // 5: Counteragent.CurrentStatus:type_name -> CounteragentStatus
	65,  // 6: Counteragent.InvitationDocumentId:type_name -> DocumentId
	51,  // 7: CounteragentCertificateList.Certificates:type_name -> Certificate
	53,  // 8: AcquireCounteragentRequest.InvitationDocument:type_name -> InvitationDocument
	99,  // 9: InvitationDocument.SignedContent:type_name -> SignedContent
	45,  // 10: Department.Address:type_name -> Address
	45,  // 11: DepartmentAdmin.Address:type_name -> Address
	57,  // 12: DepartmentAdmin.Routing:type_name -> Routing
	115, // 13: DepartmentAdmin.CreationTimestamp:type_name -> Timestamp
	55,  // 14: DepartmentList.Departments:type_name -> DepartmentAdmin
	45,  // 15: DepartmentToCreate.Address:type_name -> Address
	57,  // 16: DepartmentToCreate.Routing:type_name -> Routing
	60,  // 17: DepartmentToUpdate.ParentDepartment:type_name -> ParentDepartmentPatch
	61,  // 18: DepartmentToUpdate.DepartmentNaming:type_name -> DepartmentNamingPatch
	62,  // 19: DepartmentToUpdate.Kpp:type_name -> DepartmentKppPatch
	63,  // 20: DepartmentToUpdate.Address:type_name -> DepartmentAddressPatch
	64,  // 21: DepartmentToUpdate.Routing:type_name -> DepartmentRoutingPatch
	45,  // 22: DepartmentAddressPatch.Address:type_name -> Address
	70,  // 23: Employee.User:type_name -> UserV2
	67,  // 24: Employee.Permissions:type_name -> EmployeePermissions
	115, // 25: Employee.CreationTimestamp:type_name -> Timestamp
	2,   // 26: EmployeePermissions.DocumentAccessLevel:type_name -> DocumentAccessLevel
	68,  // 27: EmployeePermissions.Actions:type_name -> EmployeeAction
	69,  // 28: EmployeePermissions.AuthorizationPermission:type_name -> AuthorizationPermission
	71,  // 29: UserV2.FullName:type_name -> FullName
	66,  // 30: EmployeeList.Employees:type_name -> Employee
	74,  // 31: User.CloudCertificates:type_name -> CertificateInfo
	77,  // 32: OrganizationUser.Permissions:type_name -> OrganizationUserPermissions
	75,  // 33: OrganizationUsersList.Users:type_name -> OrganizationUser
	2,   // 34: OrganizationUserPermissions.DocumentAccessLevel:type_name -> DocumentAccessLevel
	69,  // 35: OrganizationUserPermissions.AuthorizationPermission:type_name -> AuthorizationPermission
	79,  // 36: EmployeeSubscriptions.Subscriptions:type_name -> Subscription
	79,  // 37: SubscriptionsToUpdate.Subscriptions:type_name -> Subscription
	82,  // 38: CertificateList.Certificates:type_name -> CertificateInfoV2
	3,   // 39: CertificateInfoV2.Type:type_name -> CertificateType
	4,   // 40: CertificateInfoV2.SubjectType:type_name -> CertificateSubjectType
	84,  // 41: EmployeeToCreate.Credentials:type_name -> EmployeeToCreateCredentials
	67,  // 42: EmployeeToCreate.Permissions:type_name -> EmployeePermissions
	85,  // 43: EmployeeToCreateCredentials.Login:type_name -> EmployeeToCreateByLogin
	86,  // 44: EmployeeToCreateCredentials.Certificate:type_name -> EmployeeToCreateByCertificate
	71,  // 45: EmployeeToCreateByLogin.FullName:type_name -> FullName
	88,  // 46: EmployeeToUpdate.Permissions:type_name -> EmployeePermissionsPatch
	92,  // 47: EmployeeToUpdate.Position:type_name -> EmployeePositionPatch
	93,  // 48: EmployeeToUpdate.CanBeInvitedForChat:type_name -> EmployeeCanBeInvitedForChatPatch
	89,  // 49: EmployeePermissionsPatch.Department:type_name -> EmployeeDepartmentPatch
	95,  // 50: EmployeePermissionsPatch.IsAdministrator:type_name -> EmployeeIsAdministratorPatch
	90,  // 51: EmployeePermissionsPatch.DocumentAccessLevel:type_name -> EmployeeDocumentAccessLevelPatch
	91,  // 52: EmployeePermissionsPatch.SelectedDepartments:type_name -> EmployeeSelectedDepartmentsPatch
	68,  // 53: EmployeePermissionsPatch.Actions:type_name -> EmployeeAction
	94,  // 54: EmployeePermissionsPatch.AuthorizationPermission:type_name -> AuthorizationPermissionPatch
	2,   // 55: EmployeeDocumentAccessLevelPatch.DocumentAccessLevel:type_name -> DocumentAccessLevel
	97,  // 56: UserToUpdate.Login:type_name -> UserLoginPatch
	98,  // 57: UserToUpdate.FullName:type_name -> UserFullNamePatch
	71,  // 58: UserFullNamePatch.FullName:type_name -> FullName
	100, // 59: SignedContent.PowerOfAttorney:type_name -> PowerOfAttorneyToPost
	101, // 60: PowerOfAttorneyToPost.FullId:type_name -> PowerOfAttorneyFullId
	5,   // 61: PowerOfAttorneyValidationStatus.Severity:type_name -> Severity
	6,   // 62: PowerOfAttorneyValidationStatus.StatusNamedId:type_name -> PowerOfAttorneyValidationStatusNamedId
	103, // 63: PowerOfAttorneyValidationStatus.Errors:type_name -> PowerOfAttorneyValidationError
	109, // 64: OrganizationWithCounteragentStatus.Organization:type_name -> Organization
	0,   // 65: OrganizationWithCounteragentStatus.CounteragentStatus:type_name -> CounteragentStatus
	65,  // 66: OrganizationWithCounteragentStatus.InvitationDocumentId:type_name -> DocumentId
	105, // 67: GetOrganizationsByInnListResponse.Organizations:type_name -> OrganizationWithCounteragentStatus
	109, // 68: OrganizationList.Organizations:type_name -> Organization
	110, // 69: Organization.Boxes:type_name -> Box
	45,  // 70: Organization.Address:type_name -> Address
	54,  // 71: Organization.Departments:type_name -> Department
	7,   // 72: Organization.Sociability:type_name -> Sociability
	109, // 73: Box.Organization:type_name -> Organization
	8,   // 74: Box.InvoiceFormatVersion:type_name -> OrganizationInvoiceFormatVersion
	112, // 75: OrganizationFeatures.BlockStatus:type_name -> BlockStatus
	113, // 76: BlockStatus.ManualBlockStatus:type_name -> ManualBlockStatus
	114, // 77: BlockStatus.AutoBlockStatus:type_name -> AutoBlockStatus
	65,  // 78: AcquireCounteragentResult.InvitationDocumentId:type_name -> DocumentId
	120, // 79: Message.Entities:type_name -> Entity
	9,   // 80: Message.LockMode:type_name -> LockMode
	10,  // 81: Message.MessageType:type_name -> MessageType
	119, // 82: Message.TemplateToLetterTransformationInfo:type_name -> TemplateToLetterTransformationInfo
	11,  // 83: Entity.EntityType:type_name -> EntityType
	121, // 84: Entity.Content:type_name -> Content
	12,  // 85: Entity.AttachmentType:type_name -> AttachmentType
	122, // 86: Entity.DocumentInfo:type_name -> Document
	123, // 87: Entity.ResolutionInfo:type_name -> ResolutionInfo
	124, // 88: Entity.ResolutionRequestInfo:type_name -> ResolutionRequestInfo
	126, // 89: Entity.ResolutionRequestDenialInfo:type_name -> ResolutionRequestDenialInfo
	129, // 90: Entity.ResolutionRouteAssignmentInfo:type_name -> ResolutionRouteAssignmentInfo
	130, // 91: Entity.ResolutionRouteRemovalInfo:type_name -> ResolutionRouteRemovalInfo
	131, // 92: Entity.CancellationInfo:type_name -> CancellationInfo
	132, // 93: Entity.TemplateTransformationInfo:type_name -> TemplateTransformationInfo
	133, // 94: Entity.TemplateRefusalInfo:type_name -> TemplateRefusalInfo
	134, // 95: Entity.OuterDocflow:type_name -> OuterDocflowInfo
	137, // 96: Entity.RevocationRequestInfo:type_name -> EntityRevocationRequestInfo
	138, // 97: Entity.PowerOfAttorneyInfo:type_name -> PowerOfAttorneyInfo
	19,  // 98: Document.DocumentType:type_name -> DocumentType
	65,  // 99: Document.InitialDocumentIds:type_name -> DocumentId
	65,  // 100: Document.SubordinateDocumentIds:type_name -> DocumentId
	121, // 101: Document.Content:type_name -> Content
	139, // 102: Document.NonformalizedDocumentMetadata:type_name -> NonformalizedDocumentMetadata
	140, // 103: Document.InvoiceMetadata:type_name -> InvoiceMetadata
	144, // 104: Document.TrustConnectionRequestMetadata:type_name -> TrustConnectionRequestMetadata
	145, // 105: Document.Torg12Metadata:type_name -> BasicDocumentMetadata
	141, // 106: Document.InvoiceRevisionMetadata:type_name -> InvoiceRevisionMetadata
	142, // 107: Document.InvoiceCorrectionMetadata:type_name -> InvoiceCorrectionMetadata
	143, // 108: Document.InvoiceCorrectionRevisionMetadata:type_name -> InvoiceCorrectionRevisionMetadata
	149, // 109: Document.AcceptanceCertificateMetadata:type_name -> AcceptanceCertificateMetadata
	151, // 110: Document.ProformaInvoiceMetadata:type_name -> ProformaInvoiceMetadata
	145, // 111: Document.XmlTorg12Metadata:type_name -> BasicDocumentMetadata
	145, // 112: Document.XmlAcceptanceCertificateMetadata:type_name -> BasicDocumentMetadata
	146, // 113: Document.PriceListMetadata:type_name -> PriceListMetadata
	153, // 114: Document.ResolutionStatus:type_name -> ResolutionStatus
	28,  // 115: Document.RevocationStatus:type_name -> RevocationStatus
	154, // 116: Document.ForwardDocumentEvents:type_name -> ForwardDocumentEvent
	148, // 117: Document.ReconciliationActMetadata:type_name -> BilateralDocumentMetadata
	147, // 118: Document.ContractMetadata:type_name -> ContractMetadata
	145, // 119: Document.Torg13Metadata:type_name -> BasicDocumentMetadata
	152, // 120: Document.ServiceDetailsMetadata:type_name -> ServiceDetailsMetadata
	13,  // 121: Document.RoamingNotificationStatus:type_name -> RoamingNotificationStatus
	155, // 122: Document.CustomData:type_name -> CustomDataItem
	29,  // 123: Document.DocumentDirection:type_name -> DocumentDirection
	30,  // 124: Document.SenderSignatureStatus:type_name -> SenderSignatureStatus
	150, // 125: Document.SupplementaryAgreementMetadata:type_name -> SupplementaryAgreementMetadata
	139, // 126: Document.PriceListAgreementMetadata:type_name -> NonformalizedDocumentMetadata
	139, // 127: Document.CertificateRegistryMetadata:type_name -> NonformalizedDocumentMetadata
	156, // 128: Document.UniversalTransferDocumentMetadata:type_name -> UniversalTransferDocumentMetadata
	157, // 129: Document.UniversalTransferDocumentRevisionMetadata:type_name -> UniversalTransferDocumentRevisionMetadata
	158, // 130: Document.UniversalCorrectionDocumentMetadata:type_name -> UniversalCorrectionDocumentMetadata
	159, // 131: Document.UniversalCorrectionDocumentRevisionMetadata:type_name -> UniversalCorrectionDocumentRevisionMetadata
	31,  // 132: Document.ProxySignatureStatus:type_name -> ProxySignatureStatus
	160, // 133: Document.Metadata:type_name -> MetadataItem
	161, // 134: Document.RecipientReceiptMetadata:type_name -> RecipientReceiptMetadata
	162, // 135: Document.ConfirmationMetadata:type_name -> ConfirmationMetadata
	33,  // 136: Document.RecipientResponseStatus:type_name -> RecipientResponseStatus
	163, // 137: Document.AmendmentRequestMetadata:type_name -> AmendmentRequestMetadata
	164, // 138: Document.Origin:type_name -> Origin
	9,   // 139: Document.LockMode:type_name -> LockMode
	165, // 140: Document.SenderReceiptMetadata:type_name -> SenderReceiptMetadata
	166, // 141: Document.LastOuterDocflows:type_name -> LastOuterDocflow
	167, // 142: Document.DocflowStatus:type_name -> DocflowStatusV3
	14,  // 143: ResolutionInfo.ResolutionType:type_name -> ResolutionType
	15,  // 144: ResolutionRequestInfo.RequestType:type_name -> ResolutionRequestType
	125, // 145: ResolutionRequestInfo.Target:type_name -> ResolutionTarget
	16,  // 146: ResolutionRequestInfo.Actions:type_name -> ResolutionAction
	65,  // 147: TemplateTransformationInfo.TransformedToLetterId:type_name -> DocumentId
	17,  // 148: TemplateRefusalInfo.Type:type_name -> TemplateRefusalType
	135, // 149: OuterDocflowInfo.Status:type_name -> Status
	18,  // 150: Status.Type:type_name -> OuterStatusType
	136, // 151: Status.Details:type_name -> StatusDetail
	101, // 152: PowerOfAttorneyInfo.FullId:type_name -> PowerOfAttorneyFullId
	102, // 153: PowerOfAttorneyInfo.Status:type_name -> PowerOfAttorneyValidationStatus
	20,  // 154: NonformalizedDocumentMetadata.DocumentStatus:type_name -> NonformalizedDocumentStatus
	23,  // 155: NonformalizedDocumentMetadata.ReceiptStatus:type_name -> ReceiptStatus
	21,  // 156: InvoiceMetadata.InvoiceStatus:type_name -> InvoiceStatus
	21,  // 157: InvoiceRevisionMetadata.InvoiceRevisionStatus:type_name -> InvoiceStatus
	21,  // 158: InvoiceCorrectionMetadata.InvoiceCorrectionStatus:type_name -> InvoiceStatus
	21,  // 159: InvoiceCorrectionRevisionMetadata.InvoiceCorrectionRevisionStatus:type_name -> InvoiceStatus
	22,  // 160: TrustConnectionRequestMetadata.TrustConnectionRequestStatus:type_name -> BilateralDocumentStatus
	22,  // 161: BasicDocumentMetadata.DocumentStatus:type_name -> BilateralDocumentStatus
	23,  // 162: BasicDocumentMetadata.ReceiptStatus:type_name -> ReceiptStatus
	22,  // 163: PriceListMetadata.DocumentStatus:type_name -> BilateralDocumentStatus
	22,  // 164: ContractMetadata.DocumentStatus:type_name -> BilateralDocumentStatus
	23,  // 165: ContractMetadata.ReceiptStatus:type_name -> ReceiptStatus
	22,  // 166: BilateralDocumentMetadata.DocumentStatus:type_name -> BilateralDocumentStatus
	23,  // 167: BilateralDocumentMetadata.ReceiptStatus:type_name -> ReceiptStatus
	24,  // 168: AcceptanceCertificateMetadata.DocumentStatus:type_name -> AcceptanceCertificateDocumentStatus
	23,  // 169: AcceptanceCertificateMetadata.ReceiptStatus:type_name -> ReceiptStatus
	22,  // 170: SupplementaryAgreementMetadata.DocumentStatus:type_name -> BilateralDocumentStatus
	23,  // 171: SupplementaryAgreementMetadata.ReceiptStatus:type_name -> ReceiptStatus
	26,  // 172: ProformaInvoiceMetadata.DocumentStatus:type_name -> UnilateralDocumentStatus
	26,  // 173: ServiceDetailsMetadata.DocumentStatus:type_name -> UnilateralDocumentStatus
	27,  // 174: ResolutionStatus.Type:type_name -> ResolutionStatusType
	125, // 175: ResolutionStatus.Target:type_name -> ResolutionTarget
	115, // 176: ForwardDocumentEvent.Timestamp:type_name -> Timestamp
	25,  // 177: UniversalTransferDocumentMetadata.DocumentStatus:type_name -> UniversalTransferDocumentStatus
	25,  // 178: UniversalTransferDocumentRevisionMetadata.DocumentStatus:type_name -> UniversalTransferDocumentStatus
	25,  // 179: UniversalCorrectionDocumentMetadata.DocumentStatus:type_name -> UniversalTransferDocumentStatus
	25,  // 180: UniversalCorrectionDocumentRevisionMetadata.DocumentStatus:type_name -> UniversalTransferDocumentStatus
	32,  // 181: RecipientReceiptMetadata.ReceiptStatus:type_name -> GeneralReceiptStatus
	162, // 182: RecipientReceiptMetadata.ConfirmationMetadata:type_name -> ConfirmationMetadata
	32,  // 183: ConfirmationMetadata.ReceiptStatus:type_name -> GeneralReceiptStatus
	32,  // 184: AmendmentRequestMetadata.ReceiptStatus:type_name -> GeneralReceiptStatus
	10,  // 185: Origin.MessageType:type_name -> MessageType
	32,  // 186: SenderReceiptMetadata.ReceiptStatus:type_name -> GeneralReceiptStatus
	134, // 187: LastOuterDocflow.OuterDocflow:type_name -> OuterDocflowInfo
	168, // 188: DocflowStatusV3.PrimaryStatus:type_name -> DocflowStatusModelV3
	168, // 189: DocflowStatusV3.SecondaryStatus:type_name -> DocflowStatusModelV3
	102, // 190: DocflowStatusV3.PowerOfAttorneyGeneralStatus:type_name -> PowerOfAttorneyValidationStatus
	170, // 191: MessageToPost.Invoices:type_name -> XmlDocumentAttachment
	171, // 192: MessageToPost.NonformalizedDocuments:type_name -> NonformalizedAttachment
	172, // 193: MessageToPost.Torg12Documents:type_name -> BasicDocumentAttachment
	173, // 194: MessageToPost.TrustConnectionRequest:type_name -> TrustConnectionRequestAttachment
	174, // 195: MessageToPost.AcceptanceCertificates:type_name -> AcceptanceCertificateAttachment
	175, // 196: MessageToPost.StructuredDataAttachments:type_name -> StructuredDataAttachment
	172, // 197: MessageToPost.ProformaInvoices:type_name -> BasicDocumentAttachment
	170, // 198: MessageToPost.XmlTorg12SellerTitles:type_name -> XmlDocumentAttachment
	170, // 199: MessageToPost.XmlAcceptanceCertificateSellerTitles:type_name -> XmlDocumentAttachment
	176, // 200: MessageToPost.PriceLists:type_name -> PriceListAttachment
	171, // 201: MessageToPost.PriceListAgreements:type_name -> NonformalizedAttachment
	171, // 202: MessageToPost.CertificateRegistries:type_name -> NonformalizedAttachment
	177, // 203: MessageToPost.ReconciliationActs:type_name -> ReconciliationActAttachment
	178, // 204: MessageToPost.Contracts:type_name -> ContractAttachment
	179, // 205: MessageToPost.Torg13Documents:type_name -> Torg13Attachment
	180, // 206: MessageToPost.ServiceDetailsDocuments:type_name -> ServiceDetailsAttachment
	181, // 207: MessageToPost.EncryptedInvoices:type_name -> EncryptedInvoiceAttachment
	186, // 208: MessageToPost.EncryptedXmlTorg12SellerTitles:type_name -> EncryptedXmlDocumentAttachment
	186, // 209: MessageToPost.EncryptedXmlAcceptanceCertificateSellerTitles:type_name -> EncryptedXmlDocumentAttachment
	188, // 210: MessageToPost.SupplementaryAgreements:type_name -> SupplementaryAgreementAttachment
	170, // 211: MessageToPost.UniversalTransferDocumentSellerTitles:type_name -> XmlDocumentAttachment
	189, // 212: MessageToPost.DocumentAttachments:type_name -> DocumentAttachment
	9,   // 213: MessageToPost.LockMode:type_name -> LockMode
	99,  // 214: XmlDocumentAttachment.SignedContent:type_name -> SignedContent
	65,  // 215: XmlDocumentAttachment.InitialDocumentIds:type_name -> DocumentId
	65,  // 216: XmlDocumentAttachment.SubordinateDocumentIds:type_name -> DocumentId
	155, // 217: XmlDocumentAttachment.CustomData:type_name -> CustomDataItem
	99,  // 218: NonformalizedAttachment.SignedContent:type_name -> SignedContent
	65,  // 219: NonformalizedAttachment.InitialDocumentIds:type_name -> DocumentId
	65,  // 220: NonformalizedAttachment.SubordinateDocumentIds:type_name -> DocumentId
	155, // 221: NonformalizedAttachment.CustomData:type_name -> CustomDataItem
	99,  // 222: BasicDocumentAttachment.SignedContent:type_name -> SignedContent
	65,  // 223: BasicDocumentAttachment.InitialDocumentIds:type_name -> DocumentId
	65,  // 224: BasicDocumentAttachment.SubordinateDocumentIds:type_name -> DocumentId
	155, // 225: BasicDocumentAttachment.CustomData:type_name -> CustomDataItem
	99,  // 226: TrustConnectionRequestAttachment.SignedContent:type_name -> SignedContent
	155, // 227: TrustConnectionRequestAttachment.CustomData:type_name -> CustomDataItem
	99,  // 228: AcceptanceCertificateAttachment.SignedContent:type_name -> SignedContent
	65,  // 229: AcceptanceCertificateAttachment.InitialDocumentIds:type_name -> DocumentId
	65,  // 230: AcceptanceCertificateAttachment.SubordinateDocumentIds:type_name -> DocumentId
	155, // 231: AcceptanceCertificateAttachment.CustomData:type_name -> CustomDataItem
	99,  // 232: PriceListAttachment.SignedContent:type_name -> SignedContent
	65,  // 233: PriceListAttachment.InitialDocumentIds:type_name -> DocumentId
	65,  // 234: PriceListAttachment.SubordinateDocumentIds:type_name -> DocumentId
	155, // 235: PriceListAttachment.CustomData:type_name -> CustomDataItem
	99,  // 236: ReconciliationActAttachment.SignedContent:type_name -> SignedContent
	65,  // 237: ReconciliationActAttachment.InitialDocumentIds:type_name -> DocumentId
	65,  // 238: ReconciliationActAttachment.SubordinateDocumentIds:type_name -> DocumentId
	155, // 239: ReconciliationActAttachment.CustomData:type_name -> CustomDataItem
	99,  // 240: ContractAttachment.SignedContent:type_name -> SignedContent
	65,  // 241: ContractAttachment.InitialDocumentIds:type_name -> DocumentId
	65,  // 242: ContractAttachment.SubordinateDocumentIds:type_name -> DocumentId
	155, // 243: ContractAttachment.CustomData:type_name -> CustomDataItem
	99,  // 244: Torg13Attachment.SignedContent:type_name -> SignedContent
	65,  // 245: Torg13Attachment.InitialDocumentIds:type_name -> DocumentId
	65,  // 246: Torg13Attachment.SubordinateDocumentIds:type_name -> DocumentId
	155, // 247: Torg13Attachment.CustomData:type_name -> CustomDataItem
	99,  // 248: ServiceDetailsAttachment.SignedContent:type_name -> SignedContent
	65,  // 249: ServiceDetailsAttachment.InitialDocumentIds:type_name -> DocumentId
	65,  // 250: ServiceDetailsAttachment.SubordinateDocumentIds:type_name -> DocumentId
	155, // 251: ServiceDetailsAttachment.CustomData:type_name -> CustomDataItem
	99,  // 252: EncryptedInvoiceAttachment.SignedContent:type_name -> SignedContent
	65,  // 253: EncryptedInvoiceAttachment.InitialDocumentIds:type_name -> DocumentId
	65,  // 254: EncryptedInvoiceAttachment.SubordinateDocumentIds:type_name -> DocumentId
	155, // 255: EncryptedInvoiceAttachment.CustomData:type_name -> CustomDataItem
	182, // 256: EncryptedInvoiceAttachment.Metadata:type_name -> EncryptedDocumentMetadata
	183, // 257: EncryptedInvoiceAttachment.InvoiceMetadata:type_name -> EncryptedInvoiceMetadata
	184, // 258: EncryptedInvoiceAttachment.InvoiceCorrectionMetadata:type_name -> EncryptedInvoiceCorrectionMetadata
	185, // 259: EncryptedDocumentMetadata.DocumentDateAndNumber:type_name -> DocumentDateAndNumber
	185, // 260: EncryptedInvoiceMetadata.RevisionDateAndNumber:type_name -> DocumentDateAndNumber
	185, // 261: EncryptedInvoiceCorrectionMetadata.OriginalInvoiceDateAndNumber:type_name -> DocumentDateAndNumber
	185, // 262: EncryptedInvoiceCorrectionMetadata.OriginalInvoiceRevisionDateAndNumber:type_name -> DocumentDateAndNumber
	185, // 263: EncryptedInvoiceCorrectionMetadata.InvoiceCorrectionRevisionDateAndNumber:type_name -> DocumentDateAndNumber
	99,  // 264: EncryptedXmlDocumentAttachment.SignedContent:type_name -> SignedContent
	65,  // 265: EncryptedXmlDocumentAttachment.InitialDocumentIds:type_name -> DocumentId
	65,  // 266: EncryptedXmlDocumentAttachment.SubordinateDocumentIds:type_name -> DocumentId
	155, // 267: EncryptedXmlDocumentAttachment.CustomData:type_name -> CustomDataItem
	182, // 268: EncryptedXmlDocumentAttachment.Metadata:type_name -> EncryptedDocumentMetadata
	187, // 269: EncryptedXmlDocumentAttachment.XmlBasicMetadata:type_name -> EncryptedXmlBasicDocumentMetadata
	99,  // 270: SupplementaryAgreementAttachment.SignedContent:type_name -> SignedContent
	65,  // 271: SupplementaryAgreementAttachment.InitialDocumentIds:type_name -> DocumentId
	65,  // 272: SupplementaryAgreementAttachment.SubordinateDocumentIds:type_name -> DocumentId
	155, // 273: SupplementaryAgreementAttachment.CustomData:type_name -> CustomDataItem
	99,  // 274: DocumentAttachment.SignedContent:type_name -> SignedContent
	65,  // 275: DocumentAttachment.InitialDocumentIds:type_name -> DocumentId
	65,  // 276: DocumentAttachment.SubordinateDocumentIds:type_name -> DocumentId
	155, // 277: DocumentAttachment.CustomData:type_name -> CustomDataItem
	160, // 278: DocumentAttachment.Metadata:type_name -> MetadataItem
	191, // 279: MessagePatchToPost.Receipts:type_name -> ReceiptAttachment
	192, // 280: MessagePatchToPost.CorrectionRequests:type_name -> CorrectionRequestAttachment
	203, // 281: MessagePatchToPost.Signatures:type_name -> DocumentSignature
	194, // 282: MessagePatchToPost.RequestedSignatureRejections:type_name -> RequestedSignatureRejection
	193, // 283: MessagePatchToPost.XmlTorg12BuyerTitles:type_name -> RecipientTitleAttachment
	193, // 284: MessagePatchToPost.XmlAcceptanceCertificateBuyerTitles:type_name -> RecipientTitleAttachment
	204, // 285: MessagePatchToPost.Resolutions:type_name -> ResolutionAttachment
	205, // 286: MessagePatchToPost.ResolutionRequests:type_name -> ResolutionRequestAttachment
	206, // 287: MessagePatchToPost.ResolutionRequestCancellations:type_name -> ResolutionRequestCancellationAttachment
	127, // 288: MessagePatchToPost.ResolutionRequestDenials:type_name -> ResolutionRequestDenialAttachment
	128, // 289: MessagePatchToPost.ResolutionRequestDenialCancellations:type_name -> ResolutionRequestDenialCancellationAttachment
	195, // 290: MessagePatchToPost.RevocationRequests:type_name -> RevocationRequestAttachment
	196, // 291: MessagePatchToPost.XmlSignatureRejections:type_name -> XmlSignatureRejectionAttachment
	207, // 292: MessagePatchToPost.CustomDataPatches:type_name -> CustomDataPatch
	197, // 293: MessagePatchToPost.ResolutionRouteAssignments:type_name -> ResolutionRouteAssignment
	199, // 294: MessagePatchToPost.SignatureVerifications:type_name -> SignatureVerification
	200, // 295: MessagePatchToPost.EditDocumentPacketCommands:type_name -> EditDocumentPacketCommand
	193, // 296: MessagePatchToPost.UniversalTransferDocumentBuyerTitles:type_name -> RecipientTitleAttachment
	198, // 297: MessagePatchToPost.ResolutionRouteRemovals:type_name -> ResolutionRouteRemoval
	193, // 298: MessagePatchToPost.RecipientTitles:type_name -> RecipientTitleAttachment
	201, // 299: MessagePatchToPost.EditingPatches:type_name -> EditingPatch
	99,  // 300: ReceiptAttachment.SignedContent:type_name -> SignedContent
	99,  // 301: CorrectionRequestAttachment.SignedContent:type_name -> SignedContent
	99,  // 302: RecipientTitleAttachment.SignedContent:type_name -> SignedContent
	99,  // 303: RequestedSignatureRejection.SignedContent:type_name -> SignedContent
	99,  // 304: RevocationRequestAttachment.SignedContent:type_name -> SignedContent
	99,  // 305: XmlSignatureRejectionAttachment.SignedContent:type_name -> SignedContent
	65,  // 306: EditDocumentPacketCommand.AddDocumentsToPacket:type_name -> DocumentId
	65,  // 307: EditDocumentPacketCommand.RemoveDocumentsFromPacket:type_name -> DocumentId
	202, // 308: EditingPatch.Content:type_name -> UnsignedContent
	100, // 309: DocumentSignature.PowerOfAttorney:type_name -> PowerOfAttorneyToPost
	14,  // 310: ResolutionAttachment.ResolutionType:type_name -> ResolutionType
	15,  // 311: ResolutionRequestAttachment.Type:type_name -> ResolutionRequestType
	34,  // 312: CustomDataPatch.Operation:type_name -> CustomDataPatchOperation
	120, // 313: MessagePatch.Entities:type_name -> Entity
	209, // 314: MessagePatch.EntityPatches:type_name -> EntityPatch
	10,  // 315: MessagePatch.MessageType:type_name -> MessageType
	118, // 316: BoxEvent.Message:type_name -> Message
	208, // 317: BoxEvent.Patch:type_name -> MessagePatch
	210, // 318: BoxEventList.Events:type_name -> BoxEvent
	1,   // 319: BoxEventList.TotalCountType:type_name -> TotalCountType
	213, // 320: GetDocflowBatchRequest.Requests:type_name -> GetDocflowRequest
	65,  // 321: GetDocflowRequest.DocumentId:type_name -> DocumentId
	215, // 322: GetDocflowBatchResponseV3.Documents:type_name -> DocumentWithDocflowV3
	65,  // 323: DocumentWithDocflowV3.DocumentId:type_name -> DocumentId
	216, // 324: DocumentWithDocflowV3.LastEvent:type_name -> LastEvent
	217, // 325: DocumentWithDocflowV3.DocumentInfo:type_name -> DocumentInfoV3
	228, // 326: DocumentWithDocflowV3.Docflow:type_name -> DocflowV3
	115, // 327: LastEvent.Timestamp:type_name -> Timestamp
	220, // 328: DocumentInfoV3.FullVersion:type_name -> FullVersion
	10,  // 329: DocumentInfoV3.MessageType:type_name -> MessageType
	224, // 330: DocumentInfoV3.Participants:type_name -> DocumentParticipants
	29,  // 331: DocumentInfoV3.DocumentDirection:type_name -> DocumentDirection
	160, // 332: DocumentInfoV3.Metadata:type_name -> MetadataItem
	155, // 333: DocumentInfoV3.CustomData:type_name -> CustomDataItem
	219, // 334: DocumentInfoV3.DocumentLinks:type_name -> DocumentLinks
	218, // 335: DocumentInfoV3.PacketInfo:type_name -> PacketInfo
	221, // 336: DocumentInfoV3.LetterInfo:type_name -> DocumentLetterInfo
	222, // 337: DocumentInfoV3.DraftInfo:type_name -> DocumentDraftInfo
	223, // 338: DocumentInfoV3.TemplateInfo:type_name -> DocumentTemplateInfo
	164, // 339: DocumentInfoV3.Origin:type_name -> Origin
	9,   // 340: PacketInfo.LockMode:type_name -> LockMode
	115, // 341: PacketInfo.AddedAt:type_name -> Timestamp
	65,  // 342: DocumentLinks.InitialIds:type_name -> DocumentId
	65,  // 343: DocumentLinks.SubordinateIds:type_name -> DocumentId
	154, // 344: DocumentLetterInfo.ForwardDocumentEvents:type_name -> ForwardDocumentEvent
	224, // 345: DocumentTemplateInfo.LetterParticipants:type_name -> DocumentParticipants
	226, // 346: DocumentTemplateInfo.TemplateTransformationInfos:type_name -> TemplateTransformationInfoDocflow
	227, // 347: DocumentTemplateInfo.TemplateRefusalInfo:type_name -> TemplateRefusalInfoDocflow
	225, // 348: DocumentParticipants.Sender:type_name -> DocumentParticipant
	225, // 349: DocumentParticipants.Proxy:type_name -> DocumentParticipant
	225, // 350: DocumentParticipants.Recipient:type_name -> DocumentParticipant
	65,  // 351: TemplateTransformationInfoDocflow.TransformedToLetterId:type_name -> DocumentId
	247, // 352: DocflowV3.SenderTitle:type_name -> SenderTitleDocflow
	244, // 353: DocflowV3.Confirmation:type_name -> ConfirmationDocflow
	242, // 354: DocflowV3.ProxyResponse:type_name -> ParticipantResponseDocflow
	245, // 355: DocflowV3.RecipientReceipt:type_name -> ReceiptDocflowV3
	242, // 356: DocflowV3.RecipientResponse:type_name -> ParticipantResponseDocflow
	241, // 357: DocflowV3.AmendmentRequest:type_name -> AmendmentRequestDocflow
	231, // 358: DocflowV3.Revocation:type_name -> RevocationDocflowV3
	245, // 359: DocflowV3.SenderReceipt:type_name -> ReceiptDocflowV3
	229, // 360: DocflowV3.Resolution:type_name -> ResolutionDocflowV3
	234, // 361: DocflowV3.ResolutionEntities:type_name -> ResolutionEntitiesV3
	230, // 362: DocflowV3.OuterDocflows:type_name -> OuterDocflow
	232, // 363: DocflowV3.OuterDocflowEntities:type_name -> OuterDocflowEntities
	167, // 364: DocflowV3.DocflowStatus:type_name -> DocflowStatusV3
	153, // 365: ResolutionDocflowV3.ResolutionStatus:type_name -> ResolutionStatus
	239, // 366: RevocationDocflowV3.RevocationRequest:type_name -> RevocationRequestDocflow
	240, // 367: RevocationDocflowV3.RevocationResponse:type_name -> RevocationResponseDocflow
	28,  // 368: RevocationDocflowV3.RevocationStatus:type_name -> RevocationStatus
	234, // 369: RevocationDocflowV3.ResolutionEntities:type_name -> ResolutionEntitiesV3
	232, // 370: RevocationDocflowV3.OuterDocflowEntities:type_name -> OuterDocflowEntities
	233, // 371: OuterDocflowEntities.StatusEntities:type_name -> StatusEntity
	249, // 372: StatusEntity.Attachment:type_name -> SignedAttachmentV3
	135, // 373: StatusEntity.Status:type_name -> Status
	235, // 374: ResolutionEntitiesV3.Requests:type_name -> ResolutionRequestV3
	238, // 375: ResolutionEntitiesV3.Resolutions:type_name -> ResolutionV3
	236, // 376: ResolutionEntitiesV3.ApprovementSignatures:type_name -> ApprovementSignatureV3
	237, // 377: ResolutionEntitiesV3.SignatureDenials:type_name -> SignatureDenialV3
	120, // 378: ResolutionRequestV3.Entity:type_name -> Entity
	125, // 379: ResolutionRequestV3.Target:type_name -> ResolutionTarget
	15,  // 380: ResolutionRequestV3.RequestType:type_name -> ResolutionRequestType
	16,  // 381: ResolutionRequestV3.Actions:type_name -> ResolutionAction
	251, // 382: ApprovementSignatureV3.Signature:type_name -> SignatureV3
	120, // 383: SignatureDenialV3.Entity:type_name -> Entity
	120, // 384: ResolutionV3.Entity:type_name -> Entity
	14,  // 385: ResolutionV3.ResolutionType:type_name -> ResolutionType
	249, // 386: RevocationRequestDocflow.RevocationRequest:type_name -> SignedAttachmentV3
	115, // 387: RevocationRequestDocflow.SentAt:type_name -> Timestamp
	115, // 388: RevocationRequestDocflow.DeliveredAt:type_name -> Timestamp
	248, // 389: RevocationRequestDocflow.RoamingNotification:type_name -> RoamingNotification
	251, // 390: RevocationResponseDocflow.RecipientSignature:type_name -> SignatureV3
	243, // 391: RevocationResponseDocflow.SignatureRejection:type_name -> SignatureRejectionDocflow
	249, // 392: AmendmentRequestDocflow.AmendmentRequest:type_name -> SignedAttachmentV3
	115, // 393: AmendmentRequestDocflow.SentAt:type_name -> Timestamp
	115, // 394: AmendmentRequestDocflow.DeliveredAt:type_name -> Timestamp
	245, // 395: AmendmentRequestDocflow.Receipt:type_name -> ReceiptDocflowV3
	244, // 396: AmendmentRequestDocflow.ConfirmationDocflow:type_name -> ConfirmationDocflow
	251, // 397: ParticipantResponseDocflow.Signature:type_name -> SignatureV3
	249, // 398: ParticipantResponseDocflow.Title:type_name -> SignedAttachmentV3
	243, // 399: ParticipantResponseDocflow.Rejection:type_name -> SignatureRejectionDocflow
	115, // 400: ParticipantResponseDocflow.SentAt:type_name -> Timestamp
	115, // 401: ParticipantResponseDocflow.DeliveredAt:type_name -> Timestamp
	33,  // 402: ParticipantResponseDocflow.ResponseStatus:type_name -> RecipientResponseStatus
	249, // 403: SignatureRejectionDocflow.SignatureRejection:type_name -> SignedAttachmentV3
	115, // 404: SignatureRejectionDocflow.DeliveredAt:type_name -> Timestamp
	249, // 405: ConfirmationDocflow.ConfirmationAttachment:type_name -> SignedAttachmentV3
	115, // 406: ConfirmationDocflow.ConfirmedAt:type_name -> Timestamp
	245, // 407: ConfirmationDocflow.Receipt:type_name -> ReceiptDocflowV3
	246, // 408: ConfirmationDocflow.RoamingConfirmation:type_name -> OperatorConfirmationDocflow
	249, // 409: ReceiptDocflowV3.ReceiptAttachment:type_name -> SignedAttachmentV3
	115, // 410: ReceiptDocflowV3.SentAt:type_name -> Timestamp
	115, // 411: ReceiptDocflowV3.DeliveredAt:type_name -> Timestamp
	244, // 412: ReceiptDocflowV3.Confirmation:type_name -> ConfirmationDocflow
	32,  // 413: ReceiptDocflowV3.Status:type_name -> GeneralReceiptStatus
	249, // 414: OperatorConfirmationDocflow.ConfirmationAttachment:type_name -> SignedAttachmentV3
	115, // 415: OperatorConfirmationDocflow.ConfirmedAt:type_name -> Timestamp
	249, // 416: SenderTitleDocflow.Attachment:type_name -> SignedAttachmentV3
	115, // 417: SenderTitleDocflow.SentAt:type_name -> Timestamp
	115, // 418: SenderTitleDocflow.DeliveredAt:type_name -> Timestamp
	248, // 419: SenderTitleDocflow.RoamingNotification:type_name -> RoamingNotification
	30,  // 420: SenderTitleDocflow.SenderSignatureStatus:type_name -> SenderSignatureStatus
	120, // 421: RoamingNotification.Notification:type_name -> Entity
	250, // 422: SignedAttachmentV3.Attachment:type_name -> Attachment
	251, // 423: SignedAttachmentV3.Signature:type_name -> SignatureV3
	120, // 424: SignedAttachmentV3.Comment:type_name -> Entity
	120, // 425: Attachment.Entity:type_name -> Entity
	120, // 426: SignatureV3.Cms:type_name -> Entity
	120, // 427: SignatureV3.CadesT:type_name -> Entity
	252, // 428: SignatureV3.VerificationResult:type_name -> SignatureVerificationResult
	115, // 429: SignatureV3.DeliveredAt:type_name -> Timestamp
	253, // 430: SignatureV3.PowerOfAttorney:type_name -> SignaturePowerOfAttorney
	255, // 431: SignatureVerificationResult.CertificateStatus:type_name -> CertificateVerificationResult
	115, // 432: SignatureVerificationResult.SignatureTimestamp:type_name -> Timestamp
	120, // 433: SignaturePowerOfAttorney.Entity:type_name -> Entity
	101, // 434: SignaturePowerOfAttorney.FullId:type_name -> PowerOfAttorneyFullId
	102, // 435: SignaturePowerOfAttorney.Status:type_name -> PowerOfAttorneyValidationStatus
	254, // 436: SignaturePowerOfAttorney.StatusChanges:type_name -> PowerOfAttorneyStatusChange
	120, // 437: PowerOfAttorneyStatusChange.Entity:type_name -> Entity
	102, // 438: PowerOfAttorneyStatusChange.PowerOfAttorneyStatus:type_name -> PowerOfAttorneyValidationStatus
	256, // 439: CertificateVerificationResult.CertificateChain:type_name -> CertificateChainElement
	115, // 440: CertificateVerificationResult.VerificationTime:type_name -> Timestamp
	259, // 441: GetDocflowsByPacketIdResponseV3.Documents:type_name -> FetchedDocumentV3
	215, // 442: FetchedDocumentV3.Document:type_name -> DocumentWithDocflowV3
	35,  // 443: SearchDocflowsRequest.Scope:type_name -> SearchScope
	215, // 444: SearchDocflowsResponseV3.Documents:type_name -> DocumentWithDocflowV3
	263, // 445: GetDocflowEventsRequest.Filter:type_name -> TimeBasedFilter
	115, // 446: TimeBasedFilter.FromTimestamp:type_name -> Timestamp
	115, // 447: TimeBasedFilter.ToTimestamp:type_name -> Timestamp
	36,  // 448: TimeBasedFilter.SortDirection:type_name -> SortDirection
	265, // 449: GetDocflowEventsResponse.Events:type_name -> DocflowEventV3
	1,   // 450: GetDocflowEventsResponse.TotalCountType:type_name -> TotalCountType
	115, // 451: DocflowEventV3.Timestamp:type_name -> Timestamp
	65,  // 452: DocflowEventV3.DocumentId:type_name -> DocumentId
	215, // 453: DocflowEventV3.Document:type_name -> DocumentWithDocflowV3
	215, // 454: DocflowEventV3.PreviousDocumentState:type_name -> DocumentWithDocflowV3
	65,  // 455: CustomPrintFormDetectionRequest.DocumentIds:type_name -> DocumentId
	268, // 456: CustomPrintFormDetectionResult.Items:type_name -> CustomPrintFormDetectionItemResult
	65,  // 457: CustomPrintFormDetectionItemResult.DocumentId:type_name -> DocumentId
	65,  // 458: ForwardDocumentRequest.DocumentId:type_name -> DocumentId
	115, // 459: ForwardDocumentResponse.ForwardTimestamp:type_name -> Timestamp
	271, // 460: ForwardDocumentResponse.ForwardedDocumentId:type_name -> ForwardedDocumentId
	65,  // 461: ForwardedDocumentId.DocumentId:type_name -> DocumentId
	115, // 462: ForwardedDocument.ForwardTimestamp:type_name -> Timestamp
	271, // 463: ForwardedDocument.ForwardedDocumentId:type_name -> ForwardedDocumentId
	273, // 464: ForwardedDocument.DocumentWithDocflow:type_name -> DocumentWithDocflow
	65,  // 465: DocumentWithDocflow.DocumentId:type_name -> DocumentId
	115, // 466: DocumentWithDocflow.LastEventTimestamp:type_name -> Timestamp
	274, // 467: DocumentWithDocflow.DocumentInfo:type_name -> DocumentInfo
	283, // 468: DocumentWithDocflow.Docflow:type_name -> Docflow
	65,  // 469: DocumentWithDocflow.InitialDocumentIds:type_name -> DocumentId
	65,  // 470: DocumentWithDocflow.SubordinateDocumentIds:type_name -> DocumentId
	154, // 471: DocumentWithDocflow.ForwardDocumentEvents:type_name -> ForwardDocumentEvent
	19,  // 472: DocumentInfo.DocumentType:type_name -> DocumentType
	29,  // 473: DocumentInfo.DocumentDirection:type_name -> DocumentDirection
	185, // 474: DocumentInfo.DocumentDateAndNumber:type_name -> DocumentDateAndNumber
	282, // 475: DocumentInfo.BasicDocumentInfo:type_name -> BasicDocumentInfo
	280, // 476: DocumentInfo.InvoiceInfo:type_name -> InvoiceDocumentInfo
	281, // 477: DocumentInfo.InvoiceCorrectionInfo:type_name -> InvoiceCorrectionDocumentInfo
	279, // 478: DocumentInfo.PriceListInfo:type_name -> PriceListDocumentInfo
	277, // 479: DocumentInfo.ContractInfo:type_name -> ContractDocumentInfo
	278, // 480: DocumentInfo.SupplementaryAgreementInfo:type_name -> SupplementaryAgreementDocumentInfo
	276, // 481: DocumentInfo.UniversalTransferDocumentInfo:type_name -> UniversalTransferDocumentInfo
	275, // 482: DocumentInfo.UniversalCorrectionDocumentInfo:type_name -> UniversalCorrectionDocumentInfo
	41,  // 483: UniversalCorrectionDocumentInfo.Function:type_name -> FunctionType
	185, // 484: UniversalCorrectionDocumentInfo.OriginalDocumentDateAndNumber:type_name -> DocumentDateAndNumber
	185, // 485: UniversalCorrectionDocumentInfo.OriginalDocumentRevisionDateAndNumber:type_name -> DocumentDateAndNumber
	185, // 486: UniversalCorrectionDocumentInfo.OriginalDocumentCorrectionDateAndNumber:type_name -> DocumentDateAndNumber
	41,  // 487: UniversalTransferDocumentInfo.Function:type_name -> FunctionType
	185, // 488: UniversalTransferDocumentInfo.OriginalDocumentDateAndNumber:type_name -> DocumentDateAndNumber
	185, // 489: SupplementaryAgreementDocumentInfo.ContractDocumentDateAndNumber:type_name -> DocumentDateAndNumber
	185, // 490: SupplementaryAgreementDocumentInfo.DocumentDateAndNumber:type_name -> DocumentDateAndNumber
	185, // 491: PriceListDocumentInfo.ContractDocumentDateAndNumber:type_name -> DocumentDateAndNumber
	185, // 492: InvoiceDocumentInfo.OriginalInvoiceDateAndNumber:type_name -> DocumentDateAndNumber
	185, // 493: InvoiceCorrectionDocumentInfo.OriginalInvoiceDateAndNumber:type_name -> DocumentDateAndNumber
	185, // 494: InvoiceCorrectionDocumentInfo.OriginalInvoiceRevisionDateAndNumber:type_name -> DocumentDateAndNumber
	185, // 495: InvoiceCorrectionDocumentInfo.OriginalInvoiceCorrectionDateAndNumber:type_name -> DocumentDateAndNumber
	302, // 496: Docflow.DocumentAttachment:type_name -> SignedAttachment
	300, // 497: Docflow.DocflowStatus:type_name -> DocflowStatus
	115, // 498: Docflow.SendTimestamp:type_name -> Timestamp
	115, // 499: Docflow.DeliveryTimestamp:type_name -> Timestamp
	296, // 500: Docflow.InboundInvoiceDocflow:type_name -> InboundInvoiceDocflow
	293, // 501: Docflow.OutboundInvoiceDocflow:type_name -> OutboundInvoiceDocflow
	290, // 502: Docflow.XmlBilateralDocflow:type_name -> XmlBilateralDocflow
	292, // 503: Docflow.BilateralDocflow:type_name -> BilateralDocflow
	289, // 504: Docflow.UnilateralDocflow:type_name -> UnilateralDocflow
	285, // 505: Docflow.RevocationDocflow:type_name -> RevocationDocflow
	284, // 506: Docflow.ResolutionDocflow:type_name -> ResolutionDocflow
	155, // 507: Docflow.CustomData:type_name -> CustomDataItem
	298, // 508: Docflow.InboundUniversalTransferDocumentDocflow:type_name -> InboundUniversalTransferDocumentDocflow
	299, // 509: Docflow.OutboundUniversalTransferDocumentDocflow:type_name -> OutboundUniversalTransferDocumentDocflow
	248, // 510: Docflow.RoamingNotification:type_name -> RoamingNotification
	302, // 511: RevocationDocflow.RevocationRequestAttachment:type_name -> SignedAttachment
	287, // 512: RevocationDocflow.RecipientSignatureDocflow:type_name -> RecipientSignatureDocflow
	286, // 513: RevocationDocflow.RecipientSignatureRejectionDocflow:type_name -> RecipientSignatureRejectionDocflow
	302, // 514: RecipientSignatureRejectionDocflow.RecipientSignatureRejectionAttachment:type_name -> SignedAttachment
	115, // 515: RecipientSignatureRejectionDocflow.DeliveryTimestamp:type_name -> Timestamp
	303, // 516: RecipientSignatureDocflow.RecipientSignature:type_name -> Signature
	115, // 517: RecipientSignatureDocflow.DeliveryTimestamp:type_name -> Timestamp
	302, // 518: ReceiptDocflow.ReceiptAttachment:type_name -> SignedAttachment
	288, // 519: UnilateralDocflow.ReceiptDocflow:type_name -> ReceiptDocflow
	288, // 520: XmlBilateralDocflow.ReceiptDocflow:type_name -> ReceiptDocflow
	291, // 521: XmlBilateralDocflow.BuyerTitleDocflow:type_name -> BuyerTitleDocflow
	286, // 522: XmlBilateralDocflow.RecipientSignatureRejectionDocflow:type_name -> RecipientSignatureRejectionDocflow
	302, // 523: BuyerTitleDocflow.BuyerTitleAttachment:type_name -> SignedAttachment
	115, // 524: BuyerTitleDocflow.SendTimestamp:type_name -> Timestamp
	115, // 525: BuyerTitleDocflow.DeliveryTimestamp:type_name -> Timestamp
	288, // 526: BilateralDocflow.ReceiptDocflow:type_name -> ReceiptDocflow
	287, // 527: BilateralDocflow.RecipientSignatureDocflow:type_name -> RecipientSignatureDocflow
	286, // 528: BilateralDocflow.RecipientSignatureRejectionDocflow:type_name -> RecipientSignatureRejectionDocflow
	288, // 529: OutboundInvoiceDocflow.ReceiptDocflow:type_name -> ReceiptDocflow
	294, // 530: OutboundInvoiceDocflow.ConfirmationDocflow:type_name -> InvoiceConfirmationDocflow
	295, // 531: OutboundInvoiceDocflow.CorrectionRequestDocflow:type_name -> InvoiceCorrectionRequestDocflow
	115, // 532: OutboundInvoiceDocflow.ConfirmationTimestamp:type_name -> Timestamp
	302, // 533: InvoiceConfirmationDocflow.ConfirmationAttachment:type_name -> SignedAttachment
	288, // 534: InvoiceConfirmationDocflow.ReceiptDocflow:type_name -> ReceiptDocflow
	302, // 535: InvoiceCorrectionRequestDocflow.CorrectionRequestAttachment:type_name -> SignedAttachment
	288, // 536: InvoiceCorrectionRequestDocflow.ReceiptDocflow:type_name -> ReceiptDocflow
	297, // 537: InboundInvoiceDocflow.ReceiptDocflow:type_name -> InboundInvoiceReceiptDocflow
	294, // 538: InboundInvoiceDocflow.ConfirmationDocflow:type_name -> InvoiceConfirmationDocflow
	295, // 539: InboundInvoiceDocflow.CorrectionRequestDocflow:type_name -> InvoiceCorrectionRequestDocflow
	115, // 540: InboundInvoiceDocflow.ConfirmationTimestamp:type_name -> Timestamp
	302, // 541: InboundInvoiceReceiptDocflow.ReceiptAttachment:type_name -> SignedAttachment
	294, // 542: InboundInvoiceReceiptDocflow.ConfirmationDocflow:type_name -> InvoiceConfirmationDocflow
	297, // 543: InboundUniversalTransferDocumentDocflow.ReceiptDocflow:type_name -> InboundInvoiceReceiptDocflow
	294, // 544: InboundUniversalTransferDocumentDocflow.ConfirmationDocflow:type_name -> InvoiceConfirmationDocflow
	295, // 545: InboundUniversalTransferDocumentDocflow.CorrectionRequestDocflow:type_name -> InvoiceCorrectionRequestDocflow
	115, // 546: InboundUniversalTransferDocumentDocflow.ConfirmationTimestamp:type_name -> Timestamp
	291, // 547: InboundUniversalTransferDocumentDocflow.BuyerTitleDocflow:type_name -> BuyerTitleDocflow
	286, // 548: InboundUniversalTransferDocumentDocflow.RecipientSignatureRejectionDocflow:type_name -> RecipientSignatureRejectionDocflow
	288, // 549: OutboundUniversalTransferDocumentDocflow.ReceiptDocflow:type_name -> ReceiptDocflow
	294, // 550: OutboundUniversalTransferDocumentDocflow.ConfirmationDocflow:type_name -> InvoiceConfirmationDocflow
	295, // 551: OutboundUniversalTransferDocumentDocflow.CorrectionRequestDocflow:type_name -> InvoiceCorrectionRequestDocflow
	115, // 552: OutboundUniversalTransferDocumentDocflow.ConfirmationTimestamp:type_name -> Timestamp
	291, // 553: OutboundUniversalTransferDocumentDocflow.BuyerTitleDocflow:type_name -> BuyerTitleDocflow
	286, // 554: OutboundUniversalTransferDocumentDocflow.RecipientSignatureRejectionDocflow:type_name -> RecipientSignatureRejectionDocflow
	301, // 555: DocflowStatus.PrimaryStatus:type_name -> DocflowStatusModelOld
	301, // 556: DocflowStatus.SecondaryStatus:type_name -> DocflowStatusModelOld
	37,  // 557: DocflowStatusModelOld.Severity:type_name -> DocflowStatusSeverity
	250, // 558: SignedAttachment.Attachment:type_name -> Attachment
	303, // 559: SignedAttachment.Signature:type_name -> Signature
	120, // 560: SignedAttachment.Comment:type_name -> Entity
	120, // 561: Signature.Entity:type_name -> Entity
	252, // 562: Signature.VerificationResult:type_name -> SignatureVerificationResult
	41,  // 563: UniversalTransferDocumentSellerTitleInfo.Function:type_name -> FunctionType
	314, // 564: UniversalTransferDocumentSellerTitleInfo.Seller:type_name -> ExtendedOrganizationInfo
	314, // 565: UniversalTransferDocumentSellerTitleInfo.Buyer:type_name -> ExtendedOrganizationInfo
	309, // 566: UniversalTransferDocumentSellerTitleInfo.Shipper:type_name -> Shipper
	314, // 567: UniversalTransferDocumentSellerTitleInfo.Consignee:type_name -> ExtendedOrganizationInfo
	306, // 568: UniversalTransferDocumentSellerTitleInfo.Signers:type_name -> ExtendedSigner
	305, // 569: UniversalTransferDocumentSellerTitleInfo.PaymentDocuments:type_name -> PaymentDocumentInfo
	310, // 570: UniversalTransferDocumentSellerTitleInfo.InvoiceTable:type_name -> InvoiceTable
	319, // 571: UniversalTransferDocumentSellerTitleInfo.AdditionalInfoId:type_name -> AdditionalInfoId
	313, // 572: UniversalTransferDocumentSellerTitleInfo.TransferInfo:type_name -> TransferInfo
	307, // 573: ExtendedSigner.SignerDetails:type_name -> ExtendedSignerDetails
	100, // 574: ExtendedSigner.PowerOfAttorney:type_name -> PowerOfAttorneyToPost
	38,  // 575: ExtendedSignerDetails.SignerType:type_name -> SignerType
	39,  // 576: ExtendedSignerDetails.SignerPowers:type_name -> SignerPowers
	40,  // 577: ExtendedSignerDetails.SignerStatus:type_name -> SignerStatus
	38,  // 578: ExtendedSignerDetailsToPost.SignerType:type_name -> SignerType
	39,  // 579: ExtendedSignerDetailsToPost.SignerPowers:type_name -> SignerPowers
	40,  // 580: ExtendedSignerDetailsToPost.SignerStatus:type_name -> SignerStatus
	314, // 581: Shipper.OrgInfo:type_name -> ExtendedOrganizationInfo
	311, // 582: InvoiceTable.Items:type_name -> ExtendedInvoiceItem
	42,  // 583: ExtendedInvoiceItem.TaxRate:type_name -> TaxRate
	312, // 584: ExtendedInvoiceItem.CustomsDeclarations:type_name -> CustomsDeclaration
	43,  // 585: ExtendedInvoiceItem.ItemMark:type_name -> ItemMark
	320, // 586: ExtendedInvoiceItem.AdditionalInfo:type_name -> AdditionalInfo
	315, // 587: TransferInfo.TransferBase:type_name -> TransferBase
	316, // 588: TransferInfo.Waybill:type_name -> Waybill
	314, // 589: TransferInfo.Carrier:type_name -> ExtendedOrganizationInfo
	317, // 590: TransferInfo.Employee:type_name -> EmployeeOld
	318, // 591: TransferInfo.OtherIssuer:type_name -> OtherIssuer
	319, // 592: TransferInfo.AdditionalInfoId:type_name -> AdditionalInfoId
	45,  // 593: ExtendedOrganizationInfo.Address:type_name -> Address
	44,  // 594: ExtendedOrganizationInfo.OrgType:type_name -> OrgType
	320, // 595: AdditionalInfoId.AdditionalInfo:type_name -> AdditionalInfo
	122, // 596: DocumentList.Documents:type_name -> Document
	263, // 597: GetForwardedDocumentEventsRequest.Filter:type_name -> TimeBasedFilter
	324, // 598: GetForwardedDocumentEventsResponse.Events:type_name -> ForwardedDocumentEvent
	1,   // 599: GetForwardedDocumentEventsResponse.TotalCountType:type_name -> TotalCountType
	115, // 600: ForwardedDocumentEvent.Timestamp:type_name -> Timestamp
	271, // 601: ForwardedDocumentEvent.ForwardedDocumentId:type_name -> ForwardedDocumentId
	272, // 602: ForwardedDocumentEvent.ForwardedDocument:type_name -> ForwardedDocument
	326, // 603: ResolutionRouteList.ResolutionRoutes:type_name -> ResolutionRoute
	271, // 604: GetForwardedDocumentsRequest.ForwardedDocumentIds:type_name -> ForwardedDocumentId
	272, // 605: GetForwardedDocumentsResponse.ForwardedDocuments:type_name -> ForwardedDocument
	65,  // 606: DocumentsMoveOperation.DocumentIds:type_name -> DocumentId
	331, // 607: DraftToSend.DocumentSignatures:type_name -> DocumentSenderSignature
	100, // 608: DocumentSenderSignature.PowerOfAttorney:type_name -> PowerOfAttorneyToPost
	120, // 609: Template.Entities:type_name -> Entity
	9,   // 610: Template.LockMode:type_name -> LockMode
	334, // 611: TemplateToPost.DocumentAttachments:type_name -> TemplateDocumentAttachment
	9,   // 612: TemplateToPost.LockMode:type_name -> LockMode
	202, // 613: TemplateDocumentAttachment.UnsignedContent:type_name -> UnsignedContent
	160, // 614: TemplateDocumentAttachment.Metadata:type_name -> MetadataItem
	335, // 615: TemplateDocumentAttachment.PredefinedRecipientTitle:type_name -> PredefinedRecipientTitle
	155, // 616: TemplateDocumentAttachment.CustomData:type_name -> CustomDataItem
	202, // 617: PredefinedRecipientTitle.UnsignedContent:type_name -> UnsignedContent
	337, // 618: TemplatePatchToPost.Refusals:type_name -> TemplateRefusalAttachment
	339, // 619: TemplateTransformationToPost.DocumentTransformations:type_name -> DocumentTransformation
	620, // [620:620] is the sub-list for method output_type
	620, // [620:620] is the sub-list for method input_type
	620, // [620:620] is the sub-list for extension type_name
	620, // [620:620] is the sub-list for extension extendee
	0,   // [0:620] is the sub-list for field type_name
}

func init() { file_Full_proto_init() }
func file_Full_proto_init() {
	if File_Full_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_Full_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Address); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RussianAddress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ForeignAddress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CounteragentList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Counteragent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CounteragentCertificateList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Certificate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AcquireCounteragentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InvitationDocument); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Department); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DepartmentAdmin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DepartmentList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Routing); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DepartmentToCreate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DepartmentToUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParentDepartmentPatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DepartmentNamingPatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DepartmentKppPatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DepartmentAddressPatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DepartmentRoutingPatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DocumentId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Employee); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmployeePermissions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmployeeAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthorizationPermission); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FullName); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmployeeList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*User); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CertificateInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrganizationUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrganizationUsersList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrganizationUserPermissions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmployeeSubscriptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Subscription); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscriptionsToUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CertificateList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CertificateInfoV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmployeeToCreate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmployeeToCreateCredentials); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmployeeToCreateByLogin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmployeeToCreateByCertificate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmployeeToUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmployeePermissionsPatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmployeeDepartmentPatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmployeeDocumentAccessLevelPatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmployeeSelectedDepartmentsPatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmployeePositionPatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmployeeCanBeInvitedForChatPatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthorizationPermissionPatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmployeeIsAdministratorPatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserToUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserLoginPatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserFullNamePatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignedContent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PowerOfAttorneyToPost); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PowerOfAttorneyFullId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PowerOfAttorneyValidationStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PowerOfAttorneyValidationError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOrganizationsByInnListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrganizationWithCounteragentStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOrganizationsByInnListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoginPassword); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrganizationList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Organization); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Box); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrganizationFeatures); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ManualBlockStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AutoBlockStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Timestamp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AsyncMethodResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AcquireCounteragentResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Message); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TemplateToLetterTransformationInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Entity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Content); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Document); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResolutionInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResolutionRequestInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResolutionTarget); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResolutionRequestDenialInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResolutionRequestDenialAttachment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResolutionRequestDenialCancellationAttachment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResolutionRouteAssignmentInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResolutionRouteRemovalInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancellationInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TemplateTransformationInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TemplateRefusalInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OuterDocflowInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Status); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatusDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EntityRevocationRequestInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PowerOfAttorneyInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NonformalizedDocumentMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InvoiceMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InvoiceRevisionMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InvoiceCorrectionMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InvoiceCorrectionRevisionMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrustConnectionRequestMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BasicDocumentMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[101].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PriceListMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[102].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContractMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[103].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BilateralDocumentMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[104].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AcceptanceCertificateMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[105].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SupplementaryAgreementMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[106].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProformaInvoiceMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[107].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceDetailsMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[108].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResolutionStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[109].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ForwardDocumentEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[110].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomDataItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[111].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UniversalTransferDocumentMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[112].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UniversalTransferDocumentRevisionMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[113].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UniversalCorrectionDocumentMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[114].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UniversalCorrectionDocumentRevisionMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[115].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetadataItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[116].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecipientReceiptMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[117].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfirmationMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[118].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AmendmentRequestMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[119].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Origin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[120].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SenderReceiptMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[121].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LastOuterDocflow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[122].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DocflowStatusV3); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[123].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DocflowStatusModelV3); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[124].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageToPost); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[125].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*XmlDocumentAttachment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[126].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NonformalizedAttachment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[127].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BasicDocumentAttachment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[128].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrustConnectionRequestAttachment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[129].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AcceptanceCertificateAttachment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[130].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StructuredDataAttachment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[131].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PriceListAttachment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[132].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReconciliationActAttachment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[133].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContractAttachment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[134].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Torg13Attachment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[135].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceDetailsAttachment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[136].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EncryptedInvoiceAttachment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[137].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EncryptedDocumentMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[138].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EncryptedInvoiceMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[139].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EncryptedInvoiceCorrectionMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[140].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DocumentDateAndNumber); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[141].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EncryptedXmlDocumentAttachment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[142].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EncryptedXmlBasicDocumentMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[143].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SupplementaryAgreementAttachment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[144].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DocumentAttachment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[145].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessagePatchToPost); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[146].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReceiptAttachment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[147].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CorrectionRequestAttachment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[148].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecipientTitleAttachment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[149].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestedSignatureRejection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[150].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RevocationRequestAttachment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[151].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*XmlSignatureRejectionAttachment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[152].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResolutionRouteAssignment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[153].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResolutionRouteRemoval); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[154].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignatureVerification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[155].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EditDocumentPacketCommand); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[156].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EditingPatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[157].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnsignedContent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[158].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DocumentSignature); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[159].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResolutionAttachment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[160].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResolutionRequestAttachment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[161].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResolutionRequestCancellationAttachment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[162].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomDataPatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[163].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessagePatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[164].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EntityPatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[165].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BoxEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[166].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BoxEventList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[167].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDocflowBatchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[168].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDocflowRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[169].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDocflowBatchResponseV3); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[170].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DocumentWithDocflowV3); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[171].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LastEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[172].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DocumentInfoV3); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[173].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PacketInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[174].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DocumentLinks); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[175].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FullVersion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[176].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DocumentLetterInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[177].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DocumentDraftInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[178].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DocumentTemplateInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[179].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DocumentParticipants); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[180].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DocumentParticipant); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[181].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TemplateTransformationInfoDocflow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[182].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TemplateRefusalInfoDocflow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[183].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DocflowV3); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[184].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResolutionDocflowV3); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[185].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OuterDocflow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[186].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RevocationDocflowV3); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[187].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OuterDocflowEntities); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[188].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatusEntity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[189].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResolutionEntitiesV3); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[190].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResolutionRequestV3); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[191].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApprovementSignatureV3); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[192].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignatureDenialV3); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[193].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResolutionV3); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[194].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RevocationRequestDocflow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[195].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RevocationResponseDocflow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[196].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AmendmentRequestDocflow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[197].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParticipantResponseDocflow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[198].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignatureRejectionDocflow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[199].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfirmationDocflow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[200].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReceiptDocflowV3); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[201].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OperatorConfirmationDocflow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[202].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SenderTitleDocflow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[203].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoamingNotification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[204].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignedAttachmentV3); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[205].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Attachment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[206].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignatureV3); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[207].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignatureVerificationResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[208].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignaturePowerOfAttorney); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[209].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PowerOfAttorneyStatusChange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[210].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CertificateVerificationResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[211].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CertificateChainElement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[212].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDocflowsByPacketIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[213].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDocflowsByPacketIdResponseV3); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[214].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchedDocumentV3); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[215].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchDocflowsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[216].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchDocflowsResponseV3); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[217].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDocflowEventsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[218].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimeBasedFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[219].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDocflowEventsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[220].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DocflowEventV3); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[221].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomPrintFormDetectionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[222].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomPrintFormDetectionResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[223].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomPrintFormDetectionItemResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[224].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ForwardDocumentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[225].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ForwardDocumentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[226].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ForwardedDocumentId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[227].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ForwardedDocument); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[228].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DocumentWithDocflow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[229].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DocumentInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[230].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UniversalCorrectionDocumentInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[231].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UniversalTransferDocumentInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[232].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContractDocumentInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[233].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SupplementaryAgreementDocumentInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[234].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PriceListDocumentInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[235].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InvoiceDocumentInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[236].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InvoiceCorrectionDocumentInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[237].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BasicDocumentInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[238].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Docflow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[239].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResolutionDocflow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[240].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RevocationDocflow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[241].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecipientSignatureRejectionDocflow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[242].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecipientSignatureDocflow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[243].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReceiptDocflow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[244].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnilateralDocflow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[245].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*XmlBilateralDocflow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[246].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuyerTitleDocflow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[247].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BilateralDocflow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[248].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OutboundInvoiceDocflow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[249].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InvoiceConfirmationDocflow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[250].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InvoiceCorrectionRequestDocflow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[251].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InboundInvoiceDocflow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[252].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InboundInvoiceReceiptDocflow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[253].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InboundUniversalTransferDocumentDocflow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[254].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OutboundUniversalTransferDocumentDocflow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[255].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DocflowStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[256].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DocflowStatusModelOld); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[257].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignedAttachment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[258].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Signature); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[259].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UniversalTransferDocumentSellerTitleInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[260].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PaymentDocumentInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[261].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExtendedSigner); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[262].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExtendedSignerDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[263].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExtendedSignerDetailsToPost); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[264].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Shipper); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[265].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InvoiceTable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[266].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExtendedInvoiceItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[267].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomsDeclaration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[268].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransferInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[269].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExtendedOrganizationInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[270].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransferBase); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[271].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Waybill); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[272].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmployeeOld); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[273].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OtherIssuer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[274].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdditionalInfoId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[275].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdditionalInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[276].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DocumentList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[277].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetForwardedDocumentEventsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[278].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetForwardedDocumentEventsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[279].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ForwardedDocumentEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[280].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResolutionRouteList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[281].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResolutionRoute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[282].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetForwardedDocumentsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[283].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetForwardedDocumentsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[284].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DocumentsMoveOperation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[285].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DraftToSend); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[286].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DocumentSenderSignature); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[287].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Template); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[288].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TemplateToPost); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[289].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TemplateDocumentAttachment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[290].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PredefinedRecipientTitle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[291].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TemplatePatchToPost); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[292].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TemplateRefusalAttachment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[293].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TemplateTransformationToPost); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Full_proto_msgTypes[294].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DocumentTransformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_Full_proto_rawDesc,
			NumEnums:      45,
			NumMessages:   295,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_Full_proto_goTypes,
		DependencyIndexes: file_Full_proto_depIdxs,
		EnumInfos:         file_Full_proto_enumTypes,
		MessageInfos:      file_Full_proto_msgTypes,
	}.Build()
	File_Full_proto = out.File
	file_Full_proto_rawDesc = nil
	file_Full_proto_goTypes = nil
	file_Full_proto_depIdxs = nil
}
